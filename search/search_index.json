{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to A.V.A.T.A.R.","text":"<p>A.V.A.T.A.R. is an open source client-server web-based speech recognition assistant dedicated to the design of intelligent homes and the Internet of Things. A.V.A.T.A.R. is developed using the Electron framework, which integrates Chromium and Node.js into its executable.</p>"},{"location":"#principle-of-use","title":"Principle of use","text":"<p>The principle is to dictate a rule vocally via a client, which is then sent to the server. The server translates it into English and analyzes it using Natural Language Processing (NLP). If an intention is found, the server triggers the associated script. These scripts (or plugins) developed in Node.js then interact with all the connected objects that can be controlled (home automation box, TV box, TV, Wi-Fi speaker, Sonos, lamp, gadget...), Open Data (TV programs, cinema schedules, world weather, wikipedia...) or even Google Assistant.</p> <p>A.V.A.T.A.R. is the \u201ccore\u201d of your applications, so all you have to do is develop the plugins that interoperate with what you want to drive, and A.V.A.T.A.R. takes care of the rest. To this end, A.V.A.T.A.R. offers you a development API and a host of tools for easily creating and managing your plugins, as well as a library of plugins made available by the community of contributors. If you want to dispense with voice recognition, A.V.A.T.A.R. also offers a tool for creating and managing button widgets in server and client interfaces. You can also add your own JS/HTML/CSS windows to the application's interfaces.</p>"},{"location":"#supported-platforms","title":"Supported platforms","text":"System Version Server Client Comment Windows &gt;= 10 The ultimate platform for voice choices Linux Debian &gt;= 12Fedora &gt;= 32Ubuntu &gt;= 18.04 Available voices by <code>espeak</code> Mac0S Catalina et sup\u00e9rieur Available voices <p>A.V.A.T.A.R. was developed on Windows 10 and Linux (Debian 12). The following platforms were tested:</p> System Version arch Test serveur OK? Testclient OK? Comment Windows 10 x64 Windows 11 x64 Debian 12 x64 MacOS x64 Raspberry Pi Raspberry Pi OS arm No voice recognition available, no voice available"},{"location":"#alternative-architectures","title":"Alternative architectures","text":"<ul> <li>RHEL / CentOS</li> <li>Manjaro</li> </ul> <p>Electron is compatible with these architectures. It is therefore theoretically possible to install A.V.A.T.A.R. on these platforms.</p> <p></p>"},{"location":"about/","title":"About","text":"<p>Under construction</p>"},{"location":"certificate/","title":"HTTPS certificate","text":""},{"location":"certificate/#prerequisites","title":"Prerequisites","text":""},{"location":"certificate/#openssl","title":"OpenSSL","text":"<p><code>Windows</code>: </p> <p>Download the latest version of OpenSSL</p> <ul> <li>For example, from fireDeamon</li> <li>Install OpenSSL in a folder</li> </ul> <p><code>Linux Debian / Ubuntu</code>:     <pre><code>sudo apt-get update\nsudo apt-get install openssl\n</code></pre></p> <p><code>Linux Fedora</code>:     <pre><code>sudo yum update\nsudo yum install openssl\n</code></pre></p> <p><code>MacOS</code>:</p> <p>Install OpenSSL with Homebrew <pre><code>brew install openssl\n</code></pre></p>"},{"location":"certificate/#create-the-ca-certificate-authority","title":"Create the CA (Certificate Authority)","text":"<p>Instead of having the certificate validated by a paying authority, we'll generate our own CA.</p> Warning <p>We assume that openssl is in the system PATH, otherwise add the path to openssl to all the following commands</p> <ol> <li>Open a terminal and create a /certificates/CA folder</li> <li>Move to this folder</li> <li> <p>Generate the private key     <pre><code>openssl genrsa -des3 -out ./avatarCA.key 2048\n</code></pre></p> <p>During generation, a passphrase is requested. This will be used to sign host certificates.</p> <pre><code>Generating RSA private key, 2048 bit long modulus (2 primes)\n........................................................................+++++\n..........................................+++++\ne is 65537 (0x010001)\nEnter pass phrase for avatarCA.key:\nVerifying - Enter pass phrase for avatarCA.key:\n</code></pre> </li> <li> <p>Generate the root certificate in <code>.pem</code> format</p> <pre><code>openssl req -x509 -new -nodes -key ./avatarCA.key -sha256 -days 10000 -out ./avatarCA.pem\n</code></pre> <p>The certificate is generated for a period of 10,000 days. At the time of generation, the passphrase of the previous key is requested. A number of questions are asked, which are answered as shown here:</p> <pre><code>Enter pass phrase for avatarCA.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:FR\nState or Province Name (full name) [Some-State]:Ile de france\nLocality Name (eg, city) []:Paris\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:avatar\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:avatar\nEmail Address []:\n</code></pre> </li> <li> <p>Generate the root certificate in <code>crt</code> format</p> <pre><code>openssl x509 -in ./avatarCA.pem -inform PEM -out ./avatarCA.crt\n</code></pre> <p>We now have 3 files in the certificates/CA folder:</p> <ul> <li>avatarCA.key =&gt; La cl\u00e9 priv\u00e9e</li> <li>avatarCA.pem =&gt; Certificat racine au format pem</li> <li>avatarCA.crt =&gt; Certificat racine au format crt</li> </ul> </li> <li> <p>Deploy the root certificate in the certificate store</p> <p><code>Windows</code>: </p> <ul> <li>In the taskbar, search for <code>certificate</code></li> <li>Click on <code>Manage user certificates</code></li> <li>In the left-hand menu, click on <code>trusted root certification authorities</code> and then on <code>Certificates</code></li> <li>Right-click on <code>Certificates</code> then <code>All tasks</code> and <code>Import</code></li> <li>In the 1st window, click on <code>next</code></li> <li>Import the root certificate avatarCA.crt</li> <li>Click on <code>next</code></li> <li>The certificate store must be <code>trusted root certification authorities</code></li> <li>Click on <code>next</code></li> <li>Confirm with <code>yes</code> to all other windows</li> <li>The message <code>Import successful</code> is displayed</li> <li>The root certificate is now displayed in the certificate list</li> </ul> <p><code>Linux</code>:</p> <ul> <li>If it doesn't exist, create the /usr/local/share/ca-certificates/ folder (as root)</li> <li>Check its permissions, which must be 755</li> <li>Create a folder /usr/local/share/ca-certificates/avatar (as root)</li> <li>Copy the file avatarCA.pem (or avatarCA.crt or both) to /usr/local/share/ca-certificates/avatar/</li> <li> <p>Update certificates </p> <pre><code>update-ca-certificates\n</code></pre> </li> <li> <p>The command returns:</p> <pre><code>Updating certificates in /etc/ssl/certs...\n1 added, 0 removed; done.\nRunning hooks in /etc/ca-certificates/update.d...\ndone.\n</code></pre> </li> </ul> </li> <li> <p>Add the certificate to Chrome</p> <p><code>Windows</code>: </p> <p>No action required. Chrome for Windows uses system-level certificates  </p> <p><code>Linux</code>: </p> <ul> <li> <p>Search for the local database <code>cert9.db</code> containing the certificates for the user profile <pre><code>find ~ -name \"cert9.db\"\n</code></pre></p> </li> <li> <p>My search returns : <pre><code>/home/avatar/.pki/nssdb/cert9.db\n/home/avatar/.mozilla/firefox/va572v31.default/cert9.db\n</code></pre></p> </li> </ul> <p>The .pki folder is used by Chrome</p> <ul> <li>Add the certificate to the database <pre><code>certutil -A -n \"avatar\" -t \"C,\" -i /usr/local/share/ca-certificates/avatar/avatarCA.pem -d sql:$HOME/.pki/nssdb/\n</code></pre></li> </ul> Note for Linux/MacOS <p>If the <code>certutil</code> command doesn't exist, install the <code>libnss3-tools</code> package</p> <p><code>Linux Debian / Ubuntu</code>: <pre><code>sudo apt-get update\nsudo apt-get install libnss3-tools\n</code></pre></p> <p><code>Linux Fedora</code>: <pre><code>sudo yum update\nsudo yum install libnss3-tools\n</code></pre></p> <p><code>MacOS</code>:</p> <p>Install OpenSSL with Homebrew <pre><code>brew install libnss3-tools\n</code></pre></p> <ul> <li>Installed certificates can be checked with:     <pre><code>certutil -d sql:$HOME/.pki/nssdb -L\n</code></pre></li> </ul> </li> </ol>"},{"location":"certificate/#create-a-certificate-for-the-host-client","title":"Create a certificate for the host client","text":"<p>Now that we have an in-house CA installed on the server, we can generate a certificate for the client host and sign it with the CA.</p> <p>Warning</p> <p>In this example, the server is sb-portable (the name of my server). This name will be used throughout the procedure. Change sb-portable to your server name.</p> <ol> <li>Create a /certificates/hote folder</li> <li>In the terminal, move to this folder</li> <li>Generate the private key     <pre><code>openssl genrsa -out ./sb-portable.key 2048\n</code></pre></li> <li> <p>Generate the CSR (Certificate Signing Request)     <pre><code>openssl req -new -key ./sb-portable.key -out ./sb-portable.csr\n</code></pre></p> <p>A number of questions are answered. You must enter the server name as it is called from the outside in the CN (Common Name) field:</p> <p>For me, sb-portable, for you, your server name</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:FR\nState or Province Name (full name) [Some-State]:ile de france\nLocality Name (eg, city) []:Paris\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:avatar\nOrganizational Unit Name (eg, section) []:avatar\nCommon Name (e.g. server FQDN or YOUR name) []:sb-portable\nEmail Address []:\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n</code></pre> </li> <li> <p>Create the configuration file for the subdomain</p> <ul> <li>Edit a sb-portable.ext file</li> <li>Add these values to the file, setting DNS.1 to the server name</li> </ul> <p>For me, sb-portable, for you, your server name</p> <pre><code>authorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = sb-portable\n</code></pre> </li> <li> <p>Sign the certificate with the CA, valid for 10,000 days </p> <pre><code>openssl x509 -req -in ./sb-portable.csr -CA ../CA/avatarCA.pem -CAkey ../CA/avatarCA.key -CAcreateserial -out ./sb-portable.crt -days 10000 -sha256 -extfile ./sb-portable.ext\n</code></pre> <p>The CA's passphrase is requested to validate the certificate signature:</p> <pre><code>Certificate request self-signature ok\nsubject=C=FR, ST=ile de france, L=Paris, O=avatar, OU=avatar, CN=sb-portable\nEnter pass phrase for ../CA/avatarCA.key:\n</code></pre> <p>We now have 4 files (for me sb-portable, for you, your server name):</p> <ul> <li>sb-portable.key =&gt; The private key of the subdomain certificate</li> <li>sb-portable.csr =&gt; Certificate signature request</li> <li>sb-portable.crt =&gt; Subdomain certificate in <code>crt</code> format</li> <li>sb-portable.ext =&gt; Subdomain configuration file</li> </ul> </li> </ol> <p>Certificate generation is now complete. You can now return to client installation</p> <p>  Back to Client installation - HTTPS certificate </p>"},{"location":"client-API/","title":"API Client","text":""},{"location":"client-API/#config","title":"<code>Config</code>","text":"<p>Object globale regroupant la configuration du client.</p>"},{"location":"client-API/#configmodules","title":"<code>Config.modules</code>","text":"<p>Object regroupant la configuration des plugins. Cet objet est g\u00e9n\u00e9ralement utilis\u00e9 dans les plugins pour r\u00e9cup\u00e9rer une valeur de cl\u00e9 de propri\u00e9t\u00e9.</p> &lt;Plugin&gt;.prop&lt;Plugin&gt;.js <pre><code> {\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"my first plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    }\n}\n</code></pre> <pre><code> const name = Config.modules.myFirstPlugin.name;\n</code></pre>"},{"location":"client-API/#message-loggers","title":"Message loggers","text":"<p>Logger methods are used to display messages in the A.V.A.T.A.R client console.</p> <p>Possible data types for all loggers: <pre><code>const str = 'a string';\nconst bool = true;\nconst arr = ['one', 'two', 3];\nconst obj = {key: \"value\"};\nconst f = () =&gt; console.log('hello');\n</code></pre></p>"},{"location":"client-API/#infomessage","title":"<code>info(...message)</code>","text":"<p>Affiche un message d'information dans la console.</p> <pre><code>info(str, bool, arr, obj, f);\n// returns in the console: \n// info: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"client-API/#infogreenmessage","title":"<code>infoGreen(...message)</code>","text":"<p>Affiche un message d'information  en vert dans la console.</p>"},{"location":"client-API/#infoorangemessage","title":"<code>infoOrange(...message)</code>","text":"<p>Affiche un message d'information  en orange dans la console.</p>"},{"location":"client-API/#warnmessage","title":"<code>warn(...message)</code>","text":"<p>Affiche un message d'avertissement en orange dans la console.</p> <pre><code>warn(str, bool, arr, obj, f);\n// returns in the console: \n// warn: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"client-API/#errormessage","title":"<code>error(...message)</code>","text":"<p>Affiche un message d'erreur en rouge dans la console </p> <pre><code>error(str, bool, arr, obj, f);\n// returns in the console: \n// error: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"client-API/#infoconsolemessage","title":"<code>infoConsole(...message)</code>","text":"<p>Affiche un message dans la console de d\u00e9veloppement de Chromium (cliquez sur F10 dans l'interface du client).</p> <p>Warning</p> <p>Du fait de la mise en bac \u00e0 sable de Chromium, le rendu d'une fonction est impossible dans la console de d\u00e9veloppement. Afficher une fonction g\u00e9n\u00e8rera une erreur. Tous les autres types de donn\u00e9es sont possibles.</p> <p><pre><code>infoConsole(str, bool, arr, obj);\n</code></pre> </p>"},{"location":"client-API/#dialog","title":"Dialog","text":""},{"location":"client-API/#avatarspeakttscallback-end-voice-volume-speed-pitch","title":"<code>Avatar.speak(tts[,callback, end, voice, volume, speed, pitch])</code>","text":"<p>Ex\u00e9cute un tts sur le syst\u00e8me audio (enceinte du client ou autre syst\u00e8me d\u00e9clar\u00e9).</p> param\u00e8tre type Obligatoire Default value Values Description <code>tts</code> stringobject oui Le texte ou un tableau de textes \u00e0 vocaliser. Peut \u00eatre un texte simple, plusieurs textes s\u00e9par\u00e9s par un pipe ('|') ou un tableau de textes (les textes peuvent \u00eatre s\u00e9par\u00e9s par un pipe ('|')). Une des valeurs sera choisie al\u00e9atoirement. <code>callback</code> function non Fonction de callback ex\u00e9cut\u00e9e apr\u00e8s le speak <code>end</code> boolean non true truefalse D\u00e9finie si la restitution de l'\u00e9coute sur le client est effectu\u00e9e apr\u00e8s le speaktrue: restitue l'\u00e9coutefalse: ne restitue pas l'\u00e9coute voice string non Config.voices.current[Config.voices.type] Voix \u00e0 utiliser volume number non Config.voices.volume Volume de la voix speed number non Config.voices.speed Vitesse de la voix pitch number non Config.voices.pitch Intonation de la voix <p>Exemples :  </p> <ol> <li>Vocalise le tts et restitue l'\u00e9coute     <pre><code>Avatar.speak('Hello, what can i do for you?')\n</code></pre></li> <li>Vocalise un des tts al\u00e9atoirement et restitue l'\u00e9coute     <pre><code>Avatar.speak('Hello, what can i do for you?|Hi, can I help you?')\n</code></pre></li> <li>Vocalise un des tts al\u00e9atoirement et ne restitue pas l'\u00e9coute     <pre><code>Avatar.speak('Hello, what can i do for you?|Hi, can I help you?', null, false)\n</code></pre></li> <li>Vocalise un des tts al\u00e9atoirement, restitue l'\u00e9coute et ex\u00e9cute un callback ensuite     <pre><code>Avatar.speak(['Hello, what can i do for you?', 'Hi, can I help you?'], () =&gt; {\n    // Do stuff\n})\n</code></pre></li> <li>Vocalise le tts, ne restitue pas l'\u00e9coute et ex\u00e9cute un callback ensuite     <pre><code>Avatar.speak('Hello, what can i do for you?', () =&gt; {\n    // Do stuff\n}, false)\n</code></pre></li> <li>Vocalise un des tts al\u00e9atoirement, ne restitue pas l'\u00e9coute et ex\u00e9cute un callback ensuite     <pre><code>Avatar.speak(['Hello, what can i do for you?|Hi, can I help you?', 'I\\'m home. Can I get you anything?'], () =&gt; {\n    // Do stuff\n}, false)\n</code></pre></li> <li>Vocalise le tts, restitue l'\u00e9coute avec une d\u00e9finition de voix     <pre><code>// definition: voice name, volume, speed, pitch\nAvatar.speak('Hello, what can i do for you?',null, null, \"Microsoft Julie - French (France)\", 100, 80, 1)\n\n//Another definition: voice name and speed\nAvatar.speak('Hello, what can i do for you?', null, null,\"Microsoft Julie - French (France)\", null, 70)\n</code></pre></li> </ol>"},{"location":"client-API/#avatarlistenendactivatelisten","title":"<code>Avatar.Listen.end([activateListen])</code>","text":"<p>R\u00e9activation de l'\u00e9coute.</p> param\u00e8tre type Obligatoire Default value Values Description <code>activateListen</code> boolean non true truefalse D\u00e9finie si la restitution de l'\u00e9coute est effectu\u00e9e. Dans tous les cas, la methode <code>unmute</code> est ex\u00e9cut\u00e9e <p>Exemples: </p> <ol> <li> <p>R\u00e9activation de l'\u00e9coute     <pre><code>// Reactivation of listening\nAvatar.Listen.end();\n\n// Do stuff\n</code></pre></p> </li> <li> <p>tts sans la r\u00e9activation de l'\u00e9coute (end = false), callback et restitution de l'\u00e9coute      <pre><code>Avatar.speak('Hello, what can i do for you?', () =&gt; {\n    // Do Stuff\n    // .......\n\n    // Then reactivation of listening\n    Avatar.Listen.end();\n}, false) \n</code></pre></p> </li> </ol>"},{"location":"client-API/#avatarlistenstopforced","title":"<code>Avatar.Listen.stop(forced)</code>","text":"<p>Arr\u00eate l'\u00e9coute du client</p> param\u00e8tre type Obligatoire Description <code>forced</code> boolean non Force l'arr\u00eat de l'\u00e9coute m\u00eame si l'\u00e9coute est d\u00e9j\u00e0 normalement arr\u00eat\u00e9e <pre><code>Avatar.Listen.stop(true);\n</code></pre>"},{"location":"client-API/#avatarlistenstartforced","title":"<code>Avatar.Listen.start(forced)</code>","text":"<p>red\u00e9marre l'\u00e9coute du client</p> param\u00e8tre type Obligatoire Description <code>forced</code> boolean non Force le d\u00e9marrage de l'\u00e9coute m\u00eame si l'\u00e9coute est d\u00e9j\u00e0 normalement d\u00e9marr\u00e9e <pre><code>Avatar.Listen.start(true);\n</code></pre>"},{"location":"client-API/#avatarlistenstartlistenaction","title":"<code>Avatar.Listen.startListenAction()</code>","text":"<p>D\u00e9clenche un dialogue (identique au mot cl\u00e9 d\u00e9clencheur).</p> <pre><code>Avatar.Listen.startListenAction();\n</code></pre>"},{"location":"client-API/#avatarlistenstoptlistenactionforced","title":"<code>Avatar.Listen.stoptListenAction([forced])</code>","text":"<p>Stoppe le dialogue en cours</p> param\u00e8tre type Obligatoire Default value Values Description <code>forced</code> boolean non true truefalse D\u00e9finie si la restitution de l'\u00e9coute sur le client est effectu\u00e9e. Dans tous les cas, la methode <code>unmute</code> est ex\u00e9cut\u00e9e <pre><code>Avatar.Listen.stoptListenAction(true);\n</code></pre>"},{"location":"client-API/#music-play","title":"Music play","text":""},{"location":"client-API/#avatarplaymusic-type-end-callback","title":"<code>Avatar.play(music[, type, end, callback])</code>","text":"<p>Joue un fichier son sur le client</p> param\u00e8tre type Obligatoire Default value Values Description <code>music</code> string oui Le fichier son \u00e0 jouer. Peut \u00eatre un fichier, une adresse web locale ou distante.__dirname est remplac\u00e9 par &lt;A.V.A.T.A.R&gt;/resources/app/core <code>type</code> string non local localurl - local: Fichier sur le client- url: Lien http local ou distant <code>end</code> string non after beforeafter D\u00e9fini si la restitution de l'\u00e9coute sur le client est faite avant ou apr\u00e8s de jouer le fichier son <code>callback</code> function non Fonction de callback ex\u00e9cut\u00e9e apr\u00e8s le fichier son <p>Exemples: </p> <ol> <li>Absolute path on the client, reactivates listening before playing, no callback      <pre><code>Avatar.play('C:/music/siren.mp3', 'before'); \n</code></pre></li> <li>&lt;A.V.A.T.A.R&gt;/resources/app/core path on the client, reactivates listening after playing and a callback  <pre><code>Avatar.play('__dirname/music/siren.mp3', 'local', 'after', () =&gt; {\n   // Do stuff\n}); \n</code></pre></li> <li>Music on the web, reactivates listening after playing and a callback    <pre><code>Avatar.play(\"https://ccrma.stanford.edu/~jos/mp3/cello.mp3\", 'url', () =&gt; {\n    // Do stuff\n});\n</code></pre></li> <li>HTTP static folder on the client, reactivates listening after playing     <pre><code>const music = `http://${Config.http.client.ip}:${Config.http.client.port}/Love_Is_a_Battlefield.mp3`;\n\n// sets static local folder\nAvatar.static.set('C:/music', () =&gt; {\n    // Plays music\n    Avatar.play(music, 'url');\n});\n</code></pre></li> </ol>"},{"location":"client-API/#avatarstopcallback","title":"<code>Avatar.stop([callback])</code>","text":"<p>Stoppe le fichier son sur le client</p> param\u00e8tre type Obligatoire Description <code>callback</code> function non Fonction de callback ex\u00e9cut\u00e9e apr\u00e8s l'arr\u00eat du fichier son <p>Exemple :</p> <pre><code>Avatar.stop();\n</code></pre>"},{"location":"client-API/#files-folders","title":"Files &amp; folders","text":""},{"location":"client-API/#avatarstaticsetfolder-calbback","title":"<code>Avatar.static.set(folder[, calbback])</code>","text":"<p>D\u00e9finit un dossier statique sur le client.</p> param\u00e8tre type Obligatoire Description <code>folder</code> string oui Dossier \u00e0 rendre static <code>callback</code> function non Fonction de callback <p>Exemple: </p> <pre><code>// sets static folder on the client\nAvatar.static.set('C:/music', () =&gt; {\n     // Do stuff\n});\n</code></pre>"},{"location":"client-API/#encryptdecrypt-a-value","title":"Encrypt/decrypt a value","text":"<p>Les m\u00e9thodes Avatar.encrypt et Avatar.decrypt sont identiques aux m\u00e9thodes du serveur.</p>"},{"location":"client-API/#http-request","title":"HTTP request","text":"<p>Acc\u00e8s aux plugins par requ\u00e8te HTTP.</p> <p>Format:  http://&lt;IP address&gt;:&lt;Port&gt;/avatarclient-&lt;route&gt;/&lt;Plugin&gt;?key=value&amp;key=value</p> Param\u00e8tre Obligatoire Description IP address oui L'adresse IP du client Port oui Le port de communication du client route oui La route HTTP d\u00e9finie dans les propri\u00e9t\u00e9s pour le client Plugin oui Le nom du plugin \u00e0 ex\u00e9cuter key=value non Les param\u00e8tres de l'object data \u00e0 passer \u00e0 la m\u00e9thode action du pluginSi une cl\u00e9 de param\u00e8tre est \u00e9gale \u00e0 <code>command</code> alors l'object data sera {action: {command: value, key: value} sinon {key: value} <p>Tip</p> <p>La configuration du port HTTP et de la route doivent \u00eatre faites dans les propri\u00e9t\u00e9s du Plugin</p> <p></p> <p>Exemples:</p> <pre><code>/** Client IP address: 192.168.2.35\n// Port: 4100\n// Route: 'livingroom'\n// Plugin: myPlugin\n// keys: command=updateInfo&amp;id=225665\n// Object data re\u00e7u dans le plugin: {action: {command: updateInfo, id: 225665}}\n*/\ntry {\n    const response = await axios (url: 'http://192.168.2.35:4100/avatarclient-livingroom/myPlugin?command=updateInfo&amp;id=225665');\n    if (response.status !== 200) {\n        throw new Error ('status '+response.status);\n    }\n} catch (err) {\n    error ('HTTP error:', err);\n}\n</code></pre> <pre><code>/** Serveur IP address: 192.168.2.35\n// Port: 4100\n// Route: 'Living'\n// Plugin: myPlugin\n// keys: id=225665\n// Object data re\u00e7u dans le plugin: {id: 225665}\n*/\ntry {\n    const response = await axios ('http://192.168.2.35:4100/avatarclient-livingroom/myPlugin?id=225665');\n    if (response.status !== 200) {\n        throw new Error ('status '+response.status);\n    }\n} catch (err) {\n    error ('HTTP error:', err);\n}\n</code></pre>"},{"location":"client-API/#interface","title":"Interface","text":""},{"location":"client-API/#avatarinterfacemainwindow","title":"<code>Avatar.Interface.mainWindow()</code>","text":"<p>Retourne l'instance de BrowserWindow de la fen\u00eatre principale d'A.V.A.T.A.R.</p> <p>NOTE: Voir la m\u00e9thode Avatar.Interface.mainWindow() de l'API serveur pour plus de pr\u00e9cision.</p>"},{"location":"client-API/#avatarinterfacebrowserwindowoptions-html-ismenu","title":"<code>Avatar.Interface.BrowserWindow(options, html[, isMenu])</code>","text":"<p>Cr\u00e9e une nouvelle <code>BrowserWindow</code> avec les propri\u00e9t\u00e9s natives d\u00e9finies par les options.</p> <p>NOTE: Voir la m\u00e9thode Avatar.Interface.BrowserWindow() de l'API serveur pour plus de pr\u00e9cision.</p>"},{"location":"client-API/#avatarinterfaceipcmain","title":"<code>Avatar.Interface.ipcMain()</code>","text":"<p>Permet de communiquer de mani\u00e8re asynchrone depuis le processus main avec les processus de rendu. Retourne le module ipcMain d'A.V.A.T.A.R.</p> <p>NOTE: Voir la m\u00e9thode Avatar.Interface.ipcMain() de l'API serveur pour plus de pr\u00e9cision.</p>"},{"location":"client-API/#avatarinterfacemenu","title":"<code>Avatar.Interface.Menu()</code>","text":"<p>Retourne le module Menu</p> <p>NOTE: Voir la m\u00e9thode Avatar.Interface.Menu() de l'API serveur pour plus de pr\u00e9cision.</p>"},{"location":"client-API/#avatarinterfacedialog","title":"<code>Avatar.Interface.dialog()</code>","text":"<p>Retourne le module dialog</p> <p>NOTE: Voir la m\u00e9thode Avatar.Interface.dialog() de l'API serveur pour plus de pr\u00e9cision.</p>"},{"location":"client-API/#avatarinterfaceshell","title":"<code>Avatar.Interface.shell()</code>","text":"<p>Retourne le module shell</p> <p>NOTE: Voir la m\u00e9thode Avatar.Interface.shell() de l'API serveur pour plus de pr\u00e9cision.</p>"},{"location":"client-API/#avatarinterfaceshowrestartboxmsg","title":"<code>Avatar.Interface.showRestartBox(msg)</code>","text":"<p>Affiche une boite de dialogue de red\u00e9marrage dans l'interface du client</p> <p>NOTE: Voir la m\u00e9thode Avatar.Interface.showRestartBox() de l'API serveur pour plus de pr\u00e9cision.</p> <p>  Developer Guide </p>"},{"location":"client-install/","title":"Client installation","text":""},{"location":"client-install/#preparing-the-package","title":"Preparing the package","text":"<ol> <li>Create a C:\\packager\\client (Windows) or /packager/client (Linux) folder which will be used to package the application</li> <li>Download the A.V.A.T.A.R client zip file from GitHub<ul> <li>Use the  button and <code>Download zip</code></li> </ul> </li> <li>Unzip <code>avatarClient-master.zip</code></li> <li>Copy the contents of the avatarClient-master/dist folder to /packager/client</li> </ol>"},{"location":"client-install/#installing-the-packager-module","title":"Installing the packager module","text":"<ol> <li>Open a terminal and move to the /packager/client folder</li> <li>Enter the following command to install the packager and all application modules: <pre><code>npm install --save-dev @electron/packager\n</code></pre></li> <li>After a few moments, you should see the following result: <pre><code>added 405 packages, and audited 406 packages in 19s\n\n57 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></li> </ol> About vulnerabilities <p>The application is updated regularly, but it is possible that you may discover vulnerabilities. If this is the case, installation is unaffected and can continue. You can also contribute by leaving an issue on the A.V.A.T.A.R. GitHub to update the application.</p>"},{"location":"client-install/#running-the-packager-module","title":"Running the packager module","text":"<p>In order to have the latest version of <code>Electron</code> for your installation, you need to retrieve the current version from GitHub Electron which will be used to package it.</p> <ul> <li> <p>On the right in the Releases section, below the About section, note the current version</p> <p></p> </li> <li> <p>Still in the packager/client folder</p> </li> <li> <p>Run the packager :</p> <ul> <li>For the example, the current version is 31.2.1, change the value to the current version retrieved from GitHub Electron</li> </ul> <p><pre><code>npx electron-packager . --electron-version=31.2.1 --icon=./avatar.ico --out=output\n</code></pre> 3. After a few moments, you should see the following result (varies by platform): <pre><code>Packaging app for platform win32 x64 using electron v31.2.1\nWrote new app to: output\\avatarClient-win32-x64\n</code></pre></p> </li> </ul>"},{"location":"client-install/#add-chrome-config-file-for-avatar-client-executable","title":"Add Chrome config file for A.V.A.T.A.R. client executable","text":"<ol> <li>Move to the output/avatarClient-&lt;platform&gt;/resources/app folder</li> <li>Locate the puppeteer.config.cjs file</li> <li>Copy (do not move!) the file to output/avatarClient-platform-arch (in the executable folder)</li> <li>Edit the copied file output/avatarClient-platform-arch/puppeteer.config.cjs.</li> <li> <p>Change the <code>cacheDirectory</code> property to the correct access folder for Chrome's .cache folder</p> <p>NOTE: <code>__dirname</code> is the folder where the puppeteer.config.cjs file is. In the example below, change the folder regarding your platform if needed (Especially for MacOS).</p> <pre><code>const {join} = require('path');\n\n/**\n* @type {import(\"puppeteer\").Configuration}\n*/\nmodule.exports = {\n// Changes the cache location for Puppeteer.\ncacheDirectory: join(__dirname, 'resources/app/core/chrome/.cache', 'puppeteer'),\n};\n</code></pre> </li> </ol>"},{"location":"client-install/#electron-module-installation","title":"Electron module installation","text":"<ol> <li>Move to the output/avatarClient-&lt;platform&gt;/resources/app folder</li> <li>Enter the following command to install Electron in the package: <pre><code>npm install electron --save-dev\n</code></pre></li> <li>After a few moments, you should see the following result: <pre><code>added 137 packages, changed 13 packages, and audited 406 packages in 31s\n\n57 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></li> </ol>"},{"location":"client-install/#https-certificate","title":"HTTPS certificate","text":"<p>The client's speech recognition uses the Web Speech API interface, which can be accessed by all browsers. As a result, a client embades a version of Google Chrome when it is installed to ensure perfect compatibility with the client's version at all times.</p> <p>To ensure secure communication between Google Chrome and the client, you need to create an HTTPS certificate. Follow the first step first, then return to this page to complete the client installation.</p> <ol> <li>Create a self-signed certificate</li> <li> <p>Copy the certificate (in my case sb-portable) to the client's certificate folder:</p> <p>sb-portable.key and sb-portable.crt files to output/avatarClient-&lt;platform&gt;/resources/app/core/chrome/certificates</p> </li> </ol>"},{"location":"client-install/#ffmpeg","title":"FFmpeg","text":"<p>A client needs ffplay to play sound and music files.</p> <p><code>Windows</code> : </p> <ul> <li>Download the latest version of FFmpeg from FFmpeg<ul> <li>In the 'git master builds' section, select the full version ffmpeg-git-full.7z.</li> </ul> </li> <li>Unzip and copy FFmpeg to output/avatarClient-win32-x64/resources/app/core/lib/ffmpeg/win32</li> </ul> Warning <p>Copy only the application folders, not the 1st level zip folder!</p> <p>Expected result:</p> <pre><code>app/\n    core/\n        lib/\n            ffmpeg/\n                win32/\n                    bin/\n                    doc/\n                    presets/\n</code></pre> <p><code>Linux Debian / Ubuntu</code> :     <pre><code>sudo apt-get update\nsudo apt-get install ffmpeg\n</code></pre></p> <p><code>Linux Fedora</code>:     <pre><code>sudo yum update\nsudo yum install ffmpeg\n</code></pre></p> <p><code>MacOS</code> :</p> <p>Install the required packages with Homebrew <pre><code>brew install ffmpeg\n</code></pre></p>"},{"location":"client-install/#voices","title":"Voices","text":"Platform Local voices Google Chrome remote voices Comment Windows No action required Linux Voices available through espeak and mbrola. See below for installation MacOS No action required. No test performed on this platform for remote voices. Test voice selection in client settings. If no voices appear, select local voices <p><code>Linux</code> :</p> <ul> <li><code>espeak</code> is a multi-language speech synthesizer, which we'll use only for phonetic conversion.  </li> <li> <p><code>mbrola</code> is a multi-language voice synthesizer that offers improved rendering and can be coupled with espeak.</p> </li> <li> <p>Download packages and voices</p> <pre><code>sudo apt install espeak mbrola\n</code></pre> <p>Then install the voices available from the [mbrola] GitHub site (https://github.com/numediart/MBROLA-voices?tab=readme-ov-file).</p> <p>Copy the voices to the /usr/share/mbrola/<code>name</code>/ folder For example, for the <code>mb-fr4</code> voice, the file is <code>fr4</code>:</p> <pre><code>/usr/\n    share/\n        mbrola/\n            fr4/\n                fr4\n</code></pre> Tip <p>After downloading a voice, run a test in a terminal to check that it works. For example, for French, only the mb-fr1 (male) and mb-fr4 (female) voices work.</p> <p>For example, to test the mb-fr4 voice: <pre><code>espeak -v mb-fr4 -q --pho \"Je parle correctement\" | mbrola -t 1.5 -e -C \"n n2\" /usr/share/mbrola/fr4/fr4 - /tmp/test.wav\naplay --file-type wav /tmp/test.wav\n</code></pre></p> </li> <li> <p>Configure mbrola voices</p> <ul> <li>Create and edit the output/avatarClient-linux-x64/resources/app/core/lib/tts/linux/voices/voices.jon file </li> <li>Add each downloaded voice in the following format:</li> </ul> parameter type Comment default boolean <code>true</code> ou <code>false</code>. Whether the voice is default or not name string The name displayed in the voice selection parameters gender string <code>male</code> ou <code>female</code>. Voice genre language string The language code of voice code string The name of the mbrola voice file string The mbrola voice file <p>Example of a <code>voices.json</code> file with 2 voices :</p> <pre><code>[\n    {\n        \"default\": true,\n        \"name\": \"French female voice (mbrola)\",\n        \"gender\": \"female\",\n        \"language\": \"fr-fr\",\n        \"code\": \"mb-fr4\",\n        \"file\": \"/usr/share/mbrola/fr4/fr4\"\n    },\n    {\n        \"default\": false,\n        \"name\": \"French male voice (mbrola)\",\n        \"gender\": \"male\",\n        \"language\": \"fr-fr\",\n        \"code\": \"mb-fr1\",\n        \"file\": \"/usr/share/mbrola/fr1/fr1\"\n    }\n]\n</code></pre> Note <p>Unlike <code>mbrola</code> voices, which require a configuration file, <code>espeak</code> voices are automatically added and appear in the client's voice selection properties.</p> </li> </ul>"},{"location":"client-install/#deploy-the-client-as-an-application","title":"Deploy the client as an application","text":"<p>The client is now ready to be moved into its application directory</p>"},{"location":"client-install/#windows","title":"Windows","text":"<ol> <li>Create a folder for the client (e.g. C:\\avatar\\client)</li> <li>Move the contents of output\\avatarClient-win32-x64 to the created folder</li> <li>Delete the C:\\packager\\client folder</li> </ol>"},{"location":"client-install/#linux","title":"Linux","text":"<p>You have 2 possible choices:</p> <ul> <li>Move the contents of output\\avatarClient-linux-arch to a folder and start the server with its <code>avatarClient</code> executable</li> <li>Create a <code>.deb</code> package to install the client as an application</li> </ul> <p>Choose what you want to do below (between \u00ab Move to folder \u00bb or \u00ab Create a <code>.deb</code> package \u00bb)</p>"},{"location":"client-install/#move-to-folder","title":"Move to folder","text":"<ol> <li>Create a folder for the client (e.g. /avatar/client)</li> <li>Move the contents of output/avatarClient-darwin-arch to the created folder</li> <li>Delete the /packager/client folder</li> </ol>"},{"location":"client-install/#create-a-deb-package","title":"Create a <code>.deb</code> package","text":"<ol> <li> <p>Install the required packages</p> <p><code>Linux Debian / Ubuntu</code>:     <pre><code>sudo apt-get update\nsudo apt-get install fakeroot dpkg\n</code></pre></p> <p><code>Linux Fedora</code>:     <pre><code>sudo yum update\nsudo yum install fakeroot dpkg\n</code></pre></p> </li> <li> <p>Install electron-installer-debian <pre><code>npm install -g electron-installer-debian\n</code></pre></p> </li> <li>In the /packager/client folder, create the <code>.deb</code> package <pre><code>electron-installer-debian --src output/avatarClient-linux-x64/ --dest output/installer/ --arch amd64\n</code></pre></li> <li>Move to the output/installer folder and install the package (the name may vary depending on the platform) <pre><code>sudo apt install ./avatarClient_4.0.0_amd64.deb\n</code></pre></li> <li> <p>Add an application icon</p> <ul> <li>Edit the /usr/share/applications/avatarClient.desktop file</li> <li>Change the value of the <code>Icon</code> property</li> </ul> <pre><code>Icon=/usr/lib/avatarClient/resources/app/avatar.ico\n</code></pre> </li> </ol>"},{"location":"client-install/#macos","title":"MacOS","text":"<p>You have 2 possible choices:</p> <ul> <li>Move the contents of output\\avatarClient-darwin-arch to a folder and start the server with its <code>avatarClient</code> executable</li> <li>Create a <code>.deb</code> package to install the client as an application</li> </ul> <p>Choose what you want to do below (between \u201cMove to a folder\u201d or \u201cCreate a .deb package\u201d)</p>"},{"location":"client-install/#move-to-folder_1","title":"Move to folder","text":"<ol> <li>Create a folder for the client (e.g. /avatar/client)</li> <li>Move the contents of output/avatarClient-darwin-arch to the created folder</li> <li>Delete the /packager/client folder</li> </ol>"},{"location":"client-install/#create-a-deb-package_1","title":"Create a <code>.deb</code> package","text":"<ol> <li>Install the required packages with Homebrew <pre><code>brew install fakeroot dpkg\n</code></pre></li> <li>Install electron-installer-debian <pre><code>npm install -g electron-installer-debian\n</code></pre></li> <li>In the packager/client folder, create the <code>.deb</code> package     <pre><code>electron-installer-debian --src output/avatarClient-darwin-&lt;arch&gt;/Contents/Resources/app --dest output/installer/ --arch &lt;arch&gt;\n</code></pre></li> <li>Move to the output/installer folder and install the package     <pre><code>dpkg -c ./avatarClient_4.0.0_&lt;arch&gt;.deb\n</code></pre></li> <li> <p>Add an application icon</p> <p>If the application icon does not appear, you can modify it using the <code>avatar.ico</code> file accessible in the application directories.  </p> </li> <li> <p>Search for the client in applications</p> </li> </ol> About MacOS <p>Although theoretically possible, installation of a <code>.deb</code> package with electron-installer-debian for macOS has not been tested. If you encounter any problems, please consult the issues reported by users.  </p> <p>You can also use electron-deboa-maker instead of <code>electron-installer-debian</code>.</p>"},{"location":"client-install/#start-the-client","title":"Start the client","text":"<ol> <li>Start A.V.A.T.A.R server</li> <li> <p>Start the client</p> <p></p> </li> <li> <p>Enter the information required to start the client:</p> <ul> <li>Client name</li> <li>The server's UDP search range<ul> <li>You can enter a search range in the format :<ul> <li>XXX.XXX.XXX.XXX-XXX</li> <li>For example, for 192.168.1.100-110, the client will look for the server in address 192.168.1.100 to 110</li> </ul> </li> <li>You can also enter the server address directly<ul> <li>For example, 192.168.1.100</li> </ul> </li> </ul> </li> <li>The UDP search port<ul> <li>By default: 3333</li> <li>This port number must be identical to the one defined in the server properties  </li> <li>If you haven't changed it on the server, leave the default port</li> </ul> </li> </ul> </li> <li>The client restarts</li> </ol>"},{"location":"client-install/#add-the-host-certificate","title":"Add the host certificate","text":"<ol> <li> <p>The client window displays a warning message telling you that HTTPS has not been configured</p> <p></p> </li> <li> <p>Left-click on the client's name to open its context menu </p> </li> <li> <p>Click on <code>Edit</code> -&gt; <code>Plugin Studio</code></p> <p></p> </li> <li> <p>In <code>Plugin Studio</code>, click on the <code>Plugins</code> tab, then click on the <code>Chrome</code> plugin</p> </li> <li>Click on the <code>Properties</code> tabs_<ul> <li>Add the file name (in my case: sb-portable.key) to the <code>key</code> property</li> <li>Add the file name (in my case: sb-portable.crt) to the <code>cert</code> property</li> <li>Add the server name to the <code>address</code> property</li> <li>Uncheck the <code>headless</code> property to display Chrome on next startup and check if the certificate is valid</li> </ul> </li> <li> <p>Right-click and click <code>Save</code> to save Chrome properties</p> <p></p> </li> <li> <p>Close the window (using the cross)</p> </li> <li>Restart the client </li> <li>After restarting the client, Chrome appears</li> <li> <p>Check that the HTTPS certificate is valid in the Chrome window</p> <p></p> </li> <li> <p>Open <code>Plugin Studio</code> again and change the <code>headless</code> property to true to hide Chrome the next time it is started</p> <p></p> </li> </ol> <p>Warning</p> <p>Chrome properties are defined in a <code>chrome</code> plugin so that they can be easily modified from within <code>Plugin Studio</code>.</p> <p>Never delete this plugin, or the client will stop working!</p> <p>  Introduction </p>"},{"location":"client-properties/","title":"Client settings","text":"<p>Client settings are accessed via its name in the application interface.</p> <p></p> <ol> <li> <p>Left-click on the client's name to display its contextual menu</p> <p>Note</p> <p>Left-click is deliberate for compatibility with graphic tablets without keyboard </p> </li> <li> <p>Click on Settings</p> </li> </ol> <p>NOTE: All the parameters below are described in the order in which they appear in the window.    </p>"},{"location":"client-properties/#settings-tab","title":"Settings tab","text":""},{"location":"client-properties/#show-all-informations-in-the-console","title":"<code>Show all informations in the console</code>","text":"<p>Select whether you want all information to be displayed in the console. This can be very useful if you want to know whether or not a plugin loads correctly on startup.</p>"},{"location":"client-properties/#application-language","title":"<code>Application language</code>","text":"<p>Defines the language used for all graphical interfaces and application messages in the console.</p> Info <p>The language used for speech rules is defined in the <code>Dialog</code> tab.</p> <p>2 langages sont propos\u00e9s avec l'application :</p> <p>2 languages are offered by default with the application:</p> <ul> <li>English</li> <li>French</li> <li> <p>+ By default</p> <ul> <li>The system's current language</li> </ul> Warning <p>Setting <code>By default</code> assumes that the localization file for the current language exists </p> </li> </ul> <p>You can translate a localization file into the language of your choice and add it to the application's languages: </p> <ol> <li>Copy one of the localization files to app/locales/, naming it with the country code (2 letters)</li> <li> <p>Modify the values of all keys</p> Warning <p>The $$ characters are replaced by dynamic values when the message is displayed. Do not delete them.  </p> </li> <li> <p>Add an entry in app/locales/BCP47.loc to show the new language in the properties and use it.</p> <ul> <li>For example, suppose a new location file pt.loc is created</li> <li>The new entry in the file will be:</li> </ul> <pre><code>{\n    \"1\": {\n        \"tag\": \"en\",\n        \"region\": \"English (US English)\"\n    },\n    \"2\": {\n        \"tag\": \"fr\",\n        \"region\": \"French (especially in France)\"\n    },\n    \"3\": {\n        \"tag\": \"pt\",\n        \"region\": \"Portuguese (Portugal)\"\n    }\n}\n</code></pre> </li> </ol>"},{"location":"client-properties/#client-name","title":"<code>Client name</code>","text":"<p>The client name. </p>"},{"location":"client-properties/#server-search-range","title":"<code>Server search range</code>","text":"<p>The server's UDP search range. You can enter a search range in the form:</p> <ul> <li>XXX.XXX.XXX.XXX-XXX</li> <li>For example: for 192.168.2.100-110, the client will look for the server in address 192.168.2.100 to 110.</li> </ul> <p>You can also enter the server address directly</p> <ul> <li>For example: 192.168.2.100</li> </ul>"},{"location":"client-properties/#server-communication-port-http","title":"<code>Server communication port (HTTP)</code>","text":"<p>The communication port with the A.V.A.T.A.R. server.</p> Warning <p>This HTTP port number must be the same on the server and each client </p>"},{"location":"client-properties/#server-search-port-udp","title":"<code>Server search port (UDP)</code>","text":"<p>The UDP port to search for the server.</p> <ul> <li>Default value: 3333</li> </ul> Warning <p>This UDP port number must be the same on the server and each client</p>"},{"location":"client-properties/#delay-between-server-searches","title":"<code>Delay between server searches</code>","text":"<p>Time in seconds between each network scan to find the server in the specified search range.</p> Tip <p>If the server can't be found, for example if a wrong address range has been set, you'll need to modify the property manually:</p> <ol> <li>Open the file app/core/Avatar.prop in a text editor</li> <li>Find the <code>target</code> property and change its value</li> <li>Save the file and restart the client</li> </ol>"},{"location":"client-properties/#client-communication-port-http","title":"<code>Client communication port (HTTP)</code>","text":"<p>The communication port with the A.V.A.T.A.R. server.  </p>"},{"location":"client-properties/#client-communication-route","title":"<code>Client communication route</code>","text":"<p>The port used to access client plugins via HTTP requests (see HTTP request in the Client API for more details).</p>"},{"location":"client-properties/#number-of-automatic-client-restarts-per-24h","title":"<code>Number of automatic client restarts per 24h</code>","text":"<ul> <li>Default value: 0 (no restart)</li> </ul> <p>To refresh the server by restarting it regularly, you can enter a value between 1 and 24. </p> To know <p>In order not to interfere with automatic programs that may be launched at fixed times, 7 minutes are added to the selected times.</p>"},{"location":"client-properties/#screen-saver","title":"Screen saver","text":"<p>Activates a screen saver after the server has been fully loaded. Useful, for example, if you use A.V.A.T.A.R. in tablet mode to automatically switch off the screen.</p> <p><code>Windows</code> : Black screen by default. No screensaver file required.</p> <ul> <li>If you want to use a specific screensaver:<ul> <li>Rename app/lib/screensaver/win32/screensaver.bat to app/lib/screensaver/win32/noscreensaver.bat. The application will then automatically use the app/lib/screensaver/win32/screensaver.vbs file</li> <li>Then select a screensaver to be passed as a parameter<ul> <li>Select C:\\Windows\\System32\\scrnsave.scr to have a black screen</li> </ul> </li> </ul> </li> </ul> <p><code>Linux</code> - <code>macOS</code> : Black screen by default. No screensaver file required.</p> <ul> <li>If you want to use a specific screensaver, edit the app/lib/screensaver/&lt;platform&gt;/screensaver.sh file</li> <li>Then select a screensaver to be passed as a parameter</li> </ul>"},{"location":"client-properties/#updates","title":"Updates","text":"<p>Choose whether you want the application to check for updates on startup. If Yes, and if a new version of the application is available, the flashing message \u201cNew version available!\u201d will be displayed in the interface.</p>"},{"location":"client-properties/#dialog-tab","title":"Dialog tab","text":"<p>In this tab, you can define the properties of voice rules</p>"},{"location":"client-properties/#dialog-language","title":"<code>Dialog language</code>","text":"<p>Select the language used for voice rules.</p> Info <p>The languages displayed are defined in the app/locales/BCP47-dialog.loc file.</p>"},{"location":"client-properties/#voice-regognition-module","title":"<code>Voice regognition module</code>","text":"<p>This parameter defines the folder where the speech recognition module is located.</p> <pre><code>app /\n    core /\n        chrome /\n</code></pre> Info <p>The client's speech recognition uses the Web Speech API interface, which can be accessed by all browsers. As a result, a client embades a version of Google Chrome when it is installed to ensure perfect compatibility with the client's version at all times.</p> <p>It is possible to develop another speech recognition module based on another application. For more details, leave a message on the application's github.</p>"},{"location":"client-properties/#trigger-keywords","title":"<code>Trigger keywords</code>","text":"<p>List of keywords that trigger listening.</p>"},{"location":"client-properties/#word-separators","title":"<code>Word separators</code>","text":"<p>Several actions can be defined in the same rule. When A.V.A.T.A.R finds one of these selectors in a sentence, it will divide the sentence into as many actions and execute them one after the other.</p> <p>For example:</p> Separator Sentence Action andthen stop the musicstop the music and turn on the TVstop the music and turn on the TV, then put on the 1st channel 1. stop the music1. stop the music2. allume la t\u00e9l\u00e91. stop the music2. turn on the TV3. put on the 1st channel"},{"location":"client-properties/#restart-listening","title":"<code>Restart listening</code>","text":"<p>The list of sentences that can be said when a problem has blocked listening in order to restart it.</p>"},{"location":"client-properties/#dialogue-redirection","title":"<code>Dialogue redirection</code>","text":"<p>A plugin can be used to redirect dialogs to speakers other than those on the client PCs.</p> <p>For example, to Sonos speakers for which a SonosPlayer plugin exists.  </p> <p>If the dialog is redirected, the voice is selected in the redirection plugin. The current voice and the voice list are no longer used.</p> <p>For this example, the parameter will be:</p> <p></p> Info <p>This setting is client-specific. One client may have its dialogs redirected to a dedicated speaker, while another uses the speaker on its PC.</p>"},{"location":"client-properties/#loop-mode","title":"<code>Loop mode</code>","text":"<p>Select whether you want the dialog to loop after each dialog.  </p> <p>Take the following example: You: Jarvis (trigger keyword) A.V.A.T.A.R: I'm listening You: stop the music A.V.A.T.A.R: It's done A.V.A.T.A.R: Do you need anything else? (loop mode answer) You: turn on the TV    A.V.A.T.A.R: It's done A.V.A.T.A.R: anything else? (loop mode answer) etc... etc... A.V.A.T.A.R: Do you need anything else? (loop mode answer) You: that's it thanks (terminates loop mode) A.V.A.T.A.R: At your service (end of dialogue in loop mode)  </p> Info <p>Loop mode is only effective when a dialog is opened by the trigger keyword alone, without a rule. Loop mode is compatible with word separators.</p> <p>Key phrases are defined in the Rules tab.</p>"},{"location":"client-properties/#automatic-dialog-stop","title":"<code>Automatic dialog stop</code>","text":"<p>Enter a value in seconds to have the dialog automatically interrupted if no sentence is spoken when listening is triggered.</p>"},{"location":"client-properties/#time-before-and-after-each-speak","title":"<code>Time before and after each speak</code>","text":"<p>Enter a value in seconds to leave a delay before and after an A.V.A.T.A.R. response, for example if you find a synchronization problem.</p>"},{"location":"client-properties/#voices-tab","title":"Voices Tab","text":""},{"location":"client-properties/#voice-preference","title":"<code>Voice preference</code>","text":"Local voicesRemote voices <p>Displays system voices in the list of available voices.</p> <p>About Linux</p> <p>No system voices are available for Linux. Selecting local voices will display the <code>espeak</code> and <code>mbrola</code> voices.</p> <p>Displays Google Chrome's Web Speech API voices in the available voices list.</p> Platform Disponible Comment Windows Male and female voices available Linux No voice available MacOS No voice available"},{"location":"client-properties/#current-voice","title":"<code>Current voice</code>","text":"<p>The current voice used for dialogues</p>"},{"location":"client-properties/#selected-voices","title":"<code>Selected voices</code>","text":"<p>Voices selected and used by the change voice rule.  </p>"},{"location":"client-properties/#available-voices","title":"<code>Available voices</code>","text":"<p>Displays system or remote voices, depending on the voice preference selected.</p> <ul> <li><code>Select button</code> : <ul> <li>Adds the voice to the list of selected voices</li> </ul> </li> <li><code>Bouton Define current</code> : <ul> <li>Adds the voice to the list of selected voices and sets it as current</li> </ul> </li> </ul>"},{"location":"client-properties/#test-sentence","title":"<code>Test sentence</code>","text":"<p>Enter a phrase to test the voice, then click on the <code>Test</code> button.</p>"},{"location":"client-properties/#voice-settings","title":"<code>Voice settings</code>","text":"<ul> <li><code>Voice volume</code></li> <li><code>Voice speed</code></li> <li><code>Voice pitch</code>: <ul> <li>The tone of voice</li> <li>NOTE: For remote voices only</li> </ul> </li> </ul>"},{"location":"client-properties/#change-voice","title":"<code>Change voice</code>","text":"<p>Enter a rule that will be used to change voices. Voices in the available voices list will be selected one after the other each time a voice is changed.</p>"},{"location":"client-properties/#rules-tab","title":"Rules tab","text":"<p>The <code>Rules</code> tab is divided into 2 parts:</p> <ul> <li>The 1st section at the top, the phrases you can say:<ul> <li>To end the loop mode</li> <li>To end the dialog if it is triggered without a prompt (e.g. a false positive)</li> </ul> </li> <li>The 2nd section below shows what the customer responds to:<ul> <li>When the dialog is triggered by the keyword</li> <li>When the dialog loops in loop mode</li> <li>when the client doesn't understand your answer during an askme (question/answer)</li> <li>When you end the dialog in loop mode</li> <li>When you end the dialog without prompting (e.g. a false positive)</li> </ul> </li> </ul>"},{"location":"client-properties/#interface-tab","title":"Interface tab","text":"<p>Customer interface management properties are grouped by type: </p> <ul> <li>Client name properties</li> <li>Console properties</li> <li>Visualizer properties</li> </ul>"},{"location":"client-properties/#intercom-tab","title":"Intercom tab","text":""},{"location":"client-properties/#list-of-rules","title":"<code>List of rules</code>","text":"<p>In order, the 4 lists of rules group together the sentences that can be said to trigger the intercom:</p> <ul> <li>Rules for intercom with one client</li> <li>Rules for intercom with all clients</li> <li>The sentence the client says to indicate that the recording is starting </li> <li>The sentence the client says to indicate that the message has been sent to client(s)</li> </ul>"},{"location":"client-properties/#silence-time","title":"<code>Silence time</code>","text":"<p>Silence time in seconds for recording to stop and client to send message to client(s).</p>"},{"location":"client-properties/#silence-level-to-start-recording","title":"<code>Silence level to start recording</code>","text":"<p>The lower the level, the higher the noise.</p>"},{"location":"client-properties/#silence-level-to-stop-recording","title":"<code>Silence level to stop recording</code>","text":"<p>The lower the level, the higher the noise.</p>"},{"location":"client-properties/#recording-driver","title":"<code>Recording driver</code>","text":"<p>waveaudio<code>is normally the driver used to generate the</code>.wav` file. If you wish, you can modify this driver for another type of recording.</p>"},{"location":"client-properties/#recording-device","title":"<code>Recording device</code>","text":"<p><code>default</code> is normally the device used for registration. If you wish, you can change this device.</p>"},{"location":"client-properties/#debug-mode","title":"<code>Debug mode</code>","text":"<p>If you notice a problem, you can view more information in the client console.</p>"},{"location":"client-properties/#background-tab","title":"Background tab","text":"<p>Choose a wallpaper in <code>jpg</code> format for the client graphical interface.</p> <p>By default, the application offers a number of wallpapers in the app/assets/images/background folder.</p> <p>Note</p> <p>You can choose a wallpaper from any folder. When saved, it will be copied to the app/assets/images/background folder.</p> <p>  Server settings </p>"},{"location":"developer-examples/","title":"Examples","text":""},{"location":"developer-examples/#world-time","title":"World time","text":"<p>Ce plugin permet d'avoir l'heure dans les plus grandes villes du monde. Dans cet exemple, vous d\u00e9couvrez pas \u00e0 pas une suite logique de d\u00e9veloppement d'un plugin :</p> <ol> <li>D\u00e9velopper dans un terminal</li> <li>La cr\u00e9ation du plugin par Plugin Studio</li> <li>Modifier les propri\u00e9t\u00e9s du plugin apr\u00e8s sa cr\u00e9ation</li> <li>Modifier le script du plugin apr\u00e8s sa cr\u00e9ation</li> <li>Ajouter du traitement naturel du langage dans le script du plugin avec l'object relations</li> <li>Ajouter des propri\u00e9t\u00e9s</li> <li>Installer et importer des modules</li> <li>Modifier le script du plugin pour le rendre fonctionnel</li> <li>Localiser les messages dans plusieurs langues</li> <li>Ajouter une page d'information</li> </ol>"},{"location":"developer-examples/#weather-forecast","title":"Weather forecast","text":"<p>Cr\u00e9ation d'un plugin affichant la m\u00e9t\u00e9o dans une fen\u00eatre. Cet exemple est compos\u00e9 de 3 parties qui permettent de d\u00e9couvrir des fonctionalit\u00e9s de d\u00e9veloppement distinctes</p>"},{"location":"developer-examples/#part-1-widget-bouton","title":"Part 1 - Widget bouton","text":"<ul> <li>La cr\u00e9ation d'un plugin</li> <li>La cr\u00e9ation d'un widget bouton</li> </ul>"},{"location":"developer-examples/#part-2-fenetre","title":"Part 2 - Fen\u00eatre","text":"<ul> <li>L'ajout d'une fen\u00eatre fille de l'interface d'A.V.A.T.A.R</li> <li>D\u00e9couverte du framework Electron et des API de cr\u00e9ation d'une fen\u00eatre </li> </ul>"},{"location":"developer-examples/#part-3-plugin-client","title":"Part 3 - Plugin client","text":"<ul> <li>Le transfert du plugin vers un client</li> </ul> <p>L'ensemble vous permet d'avoir une fen\u00eatre m\u00e9t\u00e9o de la ville de votre choix et accessible (ouverture/fermeture) par un widget bouton sur le serveur et sur un client.</p>"},{"location":"developer-guide/","title":"Developer guide","text":"<p>The developer's guide provides documentation for plugin developers.  </p> <ul> <li>Tutorial<ul> <li>This tutorial will guide you through the process of creating a plugin from scratch, then teach you how to package and distribute it to users.</li> </ul> </li> <li>API<ul> <li>Server: All server-side API functions.</li> <li>Client: All client-side API functions.</li> </ul> </li> <li>Examples<ul> <li>Development examples</li> </ul> </li> </ul>"},{"location":"getting-started/","title":"Getting started","text":"<p>In this section you will find :</p> <ul> <li>Server and client settings options:<ul> <li>Serveur settings</li> <li>Client settings</li> </ul> </li> <li>Concepts to understand:<ul> <li>Vocal rules</li> <li>Plugin rules</li> <li>Virtual client</li> </ul> </li> <li>Description of essential tools:<ul> <li>Plugin Studio</li> </ul> </li> </ul> <p>Note</p> <p>We strongly advise you to study these sections in order to use the application correctly</p>"},{"location":"introduction/","title":"Introduction","text":"<p>The A.V.A.T.A.R. installation consists of 2 parts:</p> <ul> <li>Server installation</li> <li>Installing a client<ul> <li>The client can be installed either on the same workstation as the server, or on a dedicated workstation.</li> <li>For several clients, you can repeat the installation or zip the 1st installation to copy it to the other workstations and only do the necessary parts.</li> <li>If you choose to install the server and a client on the same workstation, check if there is enought disk space and memory.</li> </ul> </li> </ul> <p>Below are the installation requirements:</p> Type RAM Disk space Server 4Go mini / 8Go preferred 1 Go Client 4Gb mini / 8Go preferred 2 Go"},{"location":"introduction/#prerequisites","title":"Prerequisites","text":"<p>To install, Node.js and npm must be installed on each platform.</p> <ul> <li><code>Windows</code>: You can use the Prebuild Installer </li> <li><code>Linux</code>: You can use the Package Manager and choose <code>Linux</code> et <code>nvm</code></li> <li><code>MacOS</code>: You can use the Package Manager and choose <code>MacOS</code> et <code>nvm</code></li> </ul> <p>Follow the installation procedure associated with the choice</p> <p>After installation, open a terminal and check that you have the latest version of <code>Node.js</code> and <code>npm</code> in the system PATH:</p> <pre><code># verifies the right Node.js version is in the environment\nnode -v # should print `v20.15.1` or newer\n\n# verifies the right npm version is in the environment\nnpm -v # should print at least `10.7.0` or newer\n</code></pre> <p> Server installation  </p>"},{"location":"meteo-widget-client/","title":"Weather forecast Client - Part 3","text":"<p>Dans la 3\u00e8me partie, nous allons transf\u00e9rer le plugin m\u00e9t\u00e9o sur un client. POur cela, nous allons utiliser la commande <code>transfert</code>du <code>Plugin Studio</code>.</p> <ol> <li>Ouvrez <code>Plugin studio</code></li> <li>Cliquez 2 fois sur le plugin <code>weather forecast</code> pour ouvrir son menu contextuel</li> <li>Cliquez sur la command <code>transfert</code></li> <li>S\u00e9lectionnez un client dans la liste des clients</li> <li> <p>Cliquez sur <code>Red\u00e9marrez le client apr\u00e8s le transfert</code></p> <p></p> </li> <li> <p>Cliquez sur le bouton Transfert</p> </li> <li> <p>Le plugin est copi\u00e9 sur le client s\u00e9lectionn\u00e9</p> <p></p> </li> <li> <p>Le client red\u00e9marre    </p> </li> </ol> <p>Si vous d\u00e9sirez faire une copie de sauvegarde du plugins si celui-ci existe sur le client, cliquez sur la case \u00e0 cocher. Le plugin sera sauvegard\u00e9 dans le r\u00e9pertoire &lt;Client&gt;/app/resources/core/backup-plugins</p> <pre><code>A.V.A.T.A.R\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n            \u251c\u2500\u2500 core\n                \u251c\u2500\u2500 backup-plugins\n                    \u251c\u2500\u2500 weather\n                        \u251c\u2500\u2500 &lt;DATE\\&gt;-&lt;HOUR\\&gt;\n                            \u251c\u2500\u2500 plugin files\n</code></pre> Warning <p>En th\u00e9orie, un plugin r\u00e9alis\u00e9 sur le serveur peut \u00eatre copi\u00e9 sans modification sur un client pour peu qu'il n'utilise pas des imports de modules de l'application qui n'existent pas sur le client. </p> <p>Pour son utiisation, verifiez que des m\u00e9thodes avec des options diff\u00e9rentes, comme par exemple <code>Avatar.speak()</code>, soient modifi\u00e9es avec les bonnes options.</p> <p>Testez le plugin une fois transf\u00e9r\u00e9 pour v\u00e9rifier que celui-ci est fonctionnel.</p>"},{"location":"meteo-widget/","title":"Weather forecast - Part 2","text":"<p>Dans la 2\u00e8me partie, nous allons ajouter une fen\u00eatre fille de l'interface A.V.A.T.A.R construite avec le framework Electron</p> <p>D\u00e9velopper une fen\u00eatre pour un plugin est facilit\u00e9 par A.V.A.T.A.R. Il n'est pas n\u00e9cessaire de construire une application Electron compl\u00e8te, vous utilisez seulement les m\u00e9thodes de l'API. </p>"},{"location":"meteo-widget/#comprendre-les-fichiers","title":"Comprendre les fichiers","text":"<p>Pour construire une fen\u00eatre, plusieurs fichiers sont n\u00e9cessaires:</p>"},{"location":"meteo-widget/#main-process","title":"Main process","text":"<p>Le fichier \"main process\" est le fichier script node.js du plugin (cot\u00e9 serveur web). Dans ce fichier sont effectu\u00e9es toutes les actions qui sont en relation avec A.V.A.TA.R et le script du plugin, comme par exemple la cr\u00e9ation d'une fen\u00eatre fille.</p>"},{"location":"meteo-widget/#pre-load","title":"Pre load","text":"<p>Le fichier \"pre load\" est une passerelle entre le \"main process\" et le \"renderer process\" (cot\u00e9 client Chromium). Dans ce fichier sont d\u00e9finies les \"m\u00e9thodes passerelles\" qui enverront ou recevront des informations entre le \"main process\" et le \"renderer process\" via ce processus de communication.</p>"},{"location":"meteo-widget/#renderer-process","title":"Renderer process","text":"Important <p>Les processus de rendu d'Electron sont ex\u00e9cut\u00e9s dans un bac \u00e0 sable. Ils se comportent de la m\u00eame mani\u00e8re qu'un processus de rendu Chrome normal. Un moteur de rendu en bac \u00e0 sable n'aura donc pas d'environnement Node.js initialis\u00e9. Plus simplement, vous ne pouvez pas utiliser node.js dans un processus de rendu.</p> <p>Le bac \u00e0 sable limite les dommages que peut causer un code malveillant en limitant l'acc\u00e8s \u00e0 la plupart des ressources du syst\u00e8me  et ne peuvent utiliser librement que les cycles de l'unit\u00e9 centrale et la m\u00e9moire.</p> <p>Le \"renderer process\" comprend 3 principaux fichiers:</p>"},{"location":"meteo-widget/#javascript","title":"javascript","text":"<p>Dans ce fichier sont re\u00e7us ou envoy\u00e9es toutes les communications du \"main process\" (en passant par le \"pre load\") mais aussi, peut effectuer toutes les actions javascript de l'interface web (cot\u00e9 client Chromium).</p> Note <p>Il n'est pas n\u00e9cessaire d'avoir un fichier javascript si aucune communication entre le \"main process\" et le \"renderer process\" n'est effectu\u00e9e, ni aucune fonction javascript pour la page web.</p>"},{"location":"meteo-widget/#html","title":"HTML","text":"<p>Le fichier \"html\" est le fichier de rendu de la page web. Le fichier javascript est appel\u00e9 dans ce fichier.</p>"},{"location":"meteo-widget/#css","title":"CSS","text":"<p>Le fichier \"css\" est le fichier de mise en forme de la page web. il est appel\u00e9 dans le fichier \"html\".</p>"},{"location":"meteo-widget/#en-resume","title":"En r\u00e9sum\u00e9","text":"Type SubType language Obligatoire Format Commentaire Main process node.js&gt;= ES6 oui &lt;plugin&gt;.js Le script du plugin Pre load node.jsCommonJS non &lt;plugin&gt;-preload.js Le fichier passerelle.Obligatoire seulement si une communication d'information est n\u00e9cessaire entre le Main proccess et le Renderer process Renderer javascript &gt;= ES6 non &lt;plugin&gt;-renderer.js Obligatoire seulement si une communication d'information est n\u00e9cessaire avec le Main proccess Renderer html html oui &lt;plugin&gt;.html Le fichier de rendu de la page web Renderer css css non &lt;plugin&gt;.css Le fichier de mise en forme de la page web"},{"location":"meteo-widget/#creer-les-fichiers-du-plugin","title":"Cr\u00e9er les fichiers du plugin","text":""},{"location":"meteo-widget/#le-fichier-pre-load","title":"Le fichier Pre load","text":"<ol> <li>Ouvrez un terminal et d\u00e9placez-vous dans le r\u00e9pertoire du plugin     <pre><code>cd &lt;A.V.A..T.A.R&gt;/resources/app/cores/plugin/weather\n</code></pre></li> <li>Cr\u00e9ez un fichier weather-preload.js</li> <li> <p>Copiez le template de fichier pre load ci-dessous dans le fichier</p> weather-preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n\n})\n</code></pre> </li> </ol>"},{"location":"meteo-widget/#le-fichier-html","title":"Le fichier HTML","text":"<ol> <li>Dans le r\u00e9pertoire du plugin, cr\u00e9ez un fichier weather.html</li> <li> <p>Copiez le template de fichier html ci-dessous dans le fichier</p> <p>Note: Les import du weather.css et du weather-renderer.js sont inclus</p> weather.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'; script-src-elem 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n        &lt;meta http-equiv=\"X-Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"/&gt;\n        &lt;link href=\"./weather.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;script src=\"./weather-renderer.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> </ol>"},{"location":"meteo-widget/#le-fichier-javacript","title":"Le fichier javacript","text":"<ol> <li>Dans le r\u00e9pertoire du plugin, cr\u00e9ez un fichier weather-renderer.js</li> <li>Pour l'instant, le fichier est vide</li> </ol>"},{"location":"meteo-widget/#le-fichier-css","title":"Le fichier CSS","text":"<ol> <li>Dans le r\u00e9pertoire du plugin, cr\u00e9ez un fichier weather.css</li> <li> <p>Copiez le template de fichier css ci-dessous dans le fichier</p> weather.css<pre><code>body, html {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    margin: 0;\n    -webkit-app-region: drag;\n}\n</code></pre> </li> </ol>"},{"location":"meteo-widget/#creer-la-fenetre","title":"Cr\u00e9er la fen\u00eatre","text":"<p>Dans le script du plugin,</p> <ol> <li> <p>Ajoutez une variable globale WeatherWindow</p> weather.js<pre><code>// Private\nlet WeatherWindow; // weather forecast window\nlet currentwidgetState;\nlet periphInfo = []; // devices table\nlet Locale; //language pak\n</code></pre> </li> <li> <p>Ajoutez les actions du bouton</p> weather.js<pre><code>export async function widgetAction (even) {\n    // Save current state\n    currentwidgetState = even.value.action === 'On' ? true : false;\n    // If 'On', show window\n    if (!WeatherWindow &amp;&amp; even.value.action === 'On') return openWeatherWindow();\n    // If 'Off', destroy window\n    if (WeatherWindow &amp;&amp; even.value.action === 'Off') WeatherWindow.destroy();\n}\n</code></pre> </li> <li> <p>Ajoutez dans le script du plugin la m\u00e9thode suivante \u00e0 la fin du fichier:</p> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n    })\n\n    WeatherWindow.on('closed', () =&gt; {\n        WeatherWindow = null;\n    })  \n}\n</code></pre> </li> <li> <p>Red\u00e9marrez A.V.A.T.A.R</p> </li> <li>Testez le widget bouton <ul> <li>Vous pouvez aussi essayer de d\u00e9placer la fen\u00eatre en faisant un drag&amp;drop</li> </ul> </li> </ol>"},{"location":"meteo-widget/#explications","title":"Explications","text":"<p>Quelques explications sur les m\u00e9thodes et objects de la cr\u00e9ation de la fen\u00eatre dans la m\u00e9thode openWeatherWindow </p>"},{"location":"meteo-widget/#avatarinterfacemainwindow","title":"Avatar.Interface.mainWindow()","text":"<p>Returns the A.V.A.T.A.R main window</p>"},{"location":"meteo-widget/#class-browserwindow","title":"class BrowserWindow #","text":"<p>Create and control browser windows.  </p> Important <p>This class is controled by A.V.A.T.A.R. You have to use the Avatar.Interface.BrowserWindow() to create a new browser window.</p> <ul> <li>line 23: Create a new browser window <pre><code>WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n</code></pre></li> </ul>"},{"location":"meteo-widget/#winshow-event-method","title":"win.show() event method #","text":"<p>Shows and gives focus to the window. </p> <ul> <li> <p>line 3: Creates window only if the WeatherWindow variable is undefined. <pre><code>if (WeatherWindow) return WeatherWindow.show();\n</code></pre></p> </li> <li> <p>line 26: Show the window when the event <code>ready-to-show</code> is emitted  <pre><code>WeatherWindow.once('ready-to-show', () =&gt; {\n    WeatherWindow.show();\n})\n</code></pre></p> </li> </ul>"},{"location":"meteo-widget/#event-methods","title":"Event methods","text":"<p>Event: 'ready-to-show' # Emitted when the web page has been rendered (while not being shown) and window can be displayed without a visual flash.</p> <pre><code>WeatherWindow.once('ready-to-show', () =&gt; {\n    WeatherWindow.show();\n})\n</code></pre> <p>Event: 'closed' # Emitted when the window is closed. After you have received this event you should remove the reference to the window and avoid using it any more.</p> <pre><code>WeatherWindow.on('closed', () =&gt; {\n    WeatherWindow = null;\n})  \n</code></pre>"},{"location":"meteo-widget/#window-position","title":"window position","text":""},{"location":"meteo-widget/#save","title":"Save","text":"<p>La sauvegarde de la position de la fen\u00eatre est effectu\u00e9e lorsque A.V.A.T.A.R est red\u00e9marr\u00e9 ou quitter.</p> <ol> <li> <p>Ajoutez <code>fs-extra</code>dans les imports</p> <pre><code>import * as path from 'node:path';\nimport fs from 'fs-extra';\nimport * as url from 'url';\n</code></pre> </li> <li> <p>Ajoutez dans la m\u00e9thode onClose() le test de sauvegarde comme ci-dessous</p> <pre><code>export async function onClose (widgets) {\n    // Save widget position\n    if (Config.modules.weather.widget.display === true) {\n        await Widget.initVar(widgetFolder, widgetImgFolder, null, Config.modules.weather);\n        if (widgets) await Widget.saveWidgets(widgets);\n    }\n\n    // Save meteo forecast position\n    if (WeatherWindow) { // The window is displayed\n        // Get window instance position\n        let pos = WeatherWindow.getPosition();\n        // Writes position and the window state (displayed or closed)\n        fs.writeJsonSync(path.resolve(__dirname, 'assets', 'style.json'), {\n        x: pos[0],\n        y: pos[1],\n        start: true,\n        });\n    } else {  // The window is closed\n        // If the backup file exists then keeps the position first\n        let prop = {};\n        if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n            prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        }\n        // Writes the window state (closed)\n        prop.start = false;\n        fs.writeJsonSync(path.resolve(__dirname, 'assets', 'style.json'), prop);\n    }\n} \n</code></pre> </li> </ol>"},{"location":"meteo-widget/#restore","title":"restore","text":"<p>La restitution de la position de la fen\u00eatre est effectu\u00e9e \u00e0 la cr\u00e9ation de la fen\u00eatre.</p> <ol> <li> <p>Ajoutez dans la m\u00e9thode openWeatherWindow() la restitution de la position comme ci-dessous</p> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    };\n\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        if (prop) {\n            style.x = prop.x;\n            style.y = prop.y;\n        }\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n    })\n\n    WeatherWindow.on('closed', () =&gt; {\n        WeatherWindow = null;\n    })  \n}\n</code></pre> </li> </ol>"},{"location":"meteo-widget/#restore-window-state","title":"Restore window state","text":"<p>La restitution de l'\u00e9tat de la fen\u00eatre est effectu\u00e9e lorsque A.V.A.T.A.R a termin\u00e9 d'afficher les widgets</p> <ol> <li> <p>Ajoutez dans la m\u00e9thode readyToShow() la restitution de l'\u00e9tat comme ci-dessous</p> <p>weather.js<pre><code>export async function readyToShow () {\n    // If a backup file exists\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        // Set currentwidgetState global variable\n        currentwidgetState = prop.start;\n        // currentwidgetState = true : creates and shows new window\n        if (currentwidgetState) openWeatherWindow();\n    } else  \n        // not displayed if the window is closed\n        currentwidgetState = false;\n\n    // Refreshs information of the button widget regarding window state ('On' or 'Off' image)\n    Avatar.Interface.refreshWidgetInfo({plugin: 'weather', id: \"808221\"});  \n}\n</code></pre> 2. Ajoutez la variable currentwidgetState \u00e0 <code>false</code> dans l'event <code>closed</code> comme ci-dessous</p> weather.js<pre><code>WeatherWindow.on('closed', () =&gt; {\n    // not displayed if the window is closed\n    currentwidgetState = false;\n\n    WeatherWindow = null;\n})  \n</code></pre> </li> <li> <p>Red\u00e9marrez A.V.A.T.A.R</p> </li> <li>Testez la sauvegarde/restore de la position et de l'\u00e9tat de la fen\u00eatre </li> </ol>"},{"location":"meteo-widget/#ajoutez-la-meteo","title":"Ajoutez la m\u00e9t\u00e9o","text":"<p>Vous pouvez r\u00e9cup\u00e9rer un widget m\u00e9t\u00e9o d'une ville sur plusieurs sites. Soyez prudent sur le choix du site, certains r\u00e9cup\u00e8rent beaucoup d'information de connexion (comme weatherwidget.org), d'autres sont carr\u00e9ment r\u00e9pertori\u00e9s comme tr\u00e8s dangereux (comme widget-meteo.com). Le plus simple est d'utiliser un site s\u00e9curis\u00e9 (comme le site de m\u00e9t\u00e9o France qui donne aussi la m\u00e9t\u00e9o dans tous les pays)</p> Warning <p>Souvenez-vous aussi de la cr\u00e9ation du fichier html. Ce fichier d\u00fb \u00e0 l'ex\u00e9cution du rendu dans le bac \u00e0 sable limite les dommages que peut causer un code malveillant mais impose aussi une validation des liens externes. Pour certains sites qui ex\u00e9cutent du code javascript, il vous faudra autoriser le site dans les security policy</p> <ol> <li>Ouvrez un navigateur et connectez-vous sur le site de m\u00e9t\u00e9o France ou le site de votre choix</li> <li>R\u00e9cup\u00e9rez le code html</li> <li> <p>Copiez-le dans le fichier html comme ci-dessous</p> <p>weather.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self'; script-src-elem 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n        &lt;meta http-equiv=\"X-Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"/&gt;\n        &lt;link href=\"./weather.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;iframe id=\"widget_autocomplete_preview\"  width=\"150\" height=\"300\" frameborder=\"0\" src=\"https://meteofrance.com/widget/prevision/441090##3D6AA2\" title=\"Pr\u00e9visions Nantes par M\u00e9t\u00e9o-France\"&gt; &lt;/iframe&gt;\n        &lt;script src=\"./weather-renderer.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> 4. Changez la taille de l'\u00e9l\u00e9ment iframe pour width=\"100%\" et height=\"100%\"</p> <p>weather.html<pre><code>&lt;iframe id=\"widget_autocomplete_preview\"  width=\"100%\" height=\"100%\" frameborder=\"0\" src=\"https://meteofrance.com/widget/prevision/441090##3D6AA2\" title=\"Pr\u00e9visions Nantes par M\u00e9t\u00e9o-France\"&gt; &lt;/iframe&gt;\n</code></pre> 5. Autorisez le site dans les security policy en l'ajoutant dans la police <code>default-src</code> comme ci-dessous weather.html<pre><code>&lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self' https://meteofrance.com; script-src 'self'; script-src-elem 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n</code></pre> 6. Red\u00e9marrez A.V.A.T.A.R</p> <p></p> </li> </ol> Tip <p>Si vous constatez un probl\u00e8me de taille de fen\u00eatre, vous pouvez l'ajuster dans le script et l'objet style.width et style.height</p>"},{"location":"meteo-widget/#transferer-des-informations-entre-les-main-et-renderer-processus","title":"Transf\u00e9rer des informations entre les Main et Renderer processus","text":"<p>Nous pourrions nous arr\u00eater l\u00e0 puisque le plugin est fonctionnel mais pour l'exemple, nous allons transf\u00e9rer des informations entre le main process et le renderer process.</p> <p>Il existe plusieurs types de communication inter process (IPC):</p> <p>Type 1: Processus principal (Main) vers moteur de rendu (Renderer) Type 2: Moteur de rendu vers le processus principal (unidirectionnel) Type 3: Moteur de rendu vers le processus principal (bidirectionnel)</p> Tip <p>Pour vous familiariser avec ces concepts, vous pouvez lire la documentation Electron sur La communication inter-processus</p> <p>Dans notre exemple, nous allons d'abord utiliser le types 1 pour envoyer un message depuis le main process au moteur de rendu pour qu'il ex\u00e9cute une fonction puis ensuite le type 3 pour que le moteur de rendu demande une information au processus principal et recevoir la r\u00e9ponse, enfin nous utiliserons le type 2 pour que le moteur de rendu envoie un ordre d'ex\u00e9cution de fermeture de la fen\u00eatre au processus principal.</p>"},{"location":"meteo-widget/#type-1-envoyer-un-message-au-moteur-de-rendu","title":"Type 1: Envoyer un message au moteur de rendu","text":"<p>L'envoi d'un message au moteur de rendu s'effectue via son instance WebContents, cette instance de WebContents contient une m\u00e9thode send qui peut \u00eatre utilis\u00e9e.</p> <ol> <li> <p>Ajoutez dans le script du plugin la m\u00e9thode <code>send</code></p> </li> <li> <p>Exposition de <code>ipcRenderer.on</code> via l'ajout dans le script de pre load</p> </li> <li> <p>Ajoutez la fonction d\u2019\u00e9coute dans le moteur de rendu</p> weather-renderer.js<pre><code>async function setElementLabel() {\n\n}\n\nwindow.electronAPI.onInitWeather( _event =&gt; {\n    setElementLabel();\n})\n</code></pre> </li> </ol> <p>En r\u00e9sum\u00e9 :  Nous avons envoy\u00e9 un message au rendu par la m\u00e9thode <code>send</code> via le script de pre load par <code>ipcRenderer.on</code> et le rendu le re\u00e7oit via la fonction d'\u00e9coute <code>onInitWeather</code></p> <p>Il nous reste maintenant \u00e0 demander la valeur d'un el\u00e9ment <code>label</code>, pour ce faire nous \u00e9tablir une communication via le type 3 Moteur de rendu vers le processus principal (bidirectionnel)</p>"},{"location":"meteo-widget/#contentssendchannel-args","title":"contents.send(channel, ...args)","text":"<ul> <li>channel string</li> <li>...args any[]</li> </ul> <p>Envoye un message asynchrone et un certain nombre d'arguments au processus de rendu via channel</p> Warning <p>NOTE: L'envoi de types Javascript non standards tels que des objets DOM ou des objets sp\u00e9ciaux d\u00e9clenchera une exception.</p> <p>Pour notre exemple, nous devons signifier au moteur de rendu qu'il doit ex\u00e9cuter une action de mise \u00e0 jour d'un el\u00e9ment <code>label</code> apr\u00e8s son initialisation compl\u00e8te (afin que tous les el\u00e9ments du DOM soient accessibles). Le moyen de faire ca est de placer la m\u00e9thode <code>send</code> dans l'event <code>ready-to-show</code></p> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    };\n\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        if (prop) {\n            style.x = prop.x;\n            style.y = prop.y;\n        }\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n         WeatherWindow.webContents.send('onInit-weather');\n    })\n\n    WeatherWindow.on('closed', () =&gt; {\n        // not displayed if the window is closed\n        currentwidgetState = false;\n\n        WeatherWindow = null;\n    })  \n} \n</code></pre>"},{"location":"meteo-widget/#ipcrendereronchannel-listener","title":"ipcRenderer.on(channel, listener)","text":"<ul> <li>channel string</li> <li>listener Function<ul> <li>event IpcRendererEvent</li> <li>...args any[]</li> </ul> </li> </ul> <p>Ecoute sur channel et listener sera appel\u00e9 ainsi: listener(event, args...) \u00e0 la r\u00e9ception d'un nouveau message.</p> weather-preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n    onInitWeather: (callback) =&gt; ipcRenderer.on('onInit-weather', (_event, value) =&gt; callback(value))\n})    \n</code></pre> <p>Apr\u00e8s avoir charg\u00e9 le script de pr\u00e9chargement, votre processus de rendu aura acc\u00e8s \u00e0 la fonction d\u2019\u00e9coute <code>window.electronAPI.onInitWeather()</code>.</p>"},{"location":"meteo-widget/#type-3-le-rendu-demande-une-information-au-processus-principal-et-attend-la-reponse-bidirectionnel","title":"Type 3: Le rendu demande une information au processus principal et attend la r\u00e9ponse (bidirectionnel)","text":"<p>Une communication bidirectionnel est l'appel d'un module du processus principal \u00e0 partir du code du processus de rendu avec l'attente d'un r\u00e9sultat. Cela peut \u00eatre fait en utilisant ipcRenderer.invoke dans le script de pre load jumel\u00e9 avec ipcMain.handle dans le main process.</p> <ol> <li> <p>Ajoutez un module d'\u00e9coute</p>"},{"location":"meteo-widget/#ipcmainhandlechannel-listener","title":"ipcMain.handle(channel, listener)","text":"<ul> <li>channel string</li> <li>listener Function | any&gt;<ul> <li>event IpcMainInvokeEvent</li> <li>...args any[]</li> </ul> <p>Ajoute un module d'\u00e9coute sur channel dans le main process. Ce gestionnaire est appel\u00e9 chaque fois que le processus de rendu appelle <code>ipcRenderer.invoke(channel, ...args)</code>.</p> <p>Si listener renvoie une Promise, le r\u00e9sultat final de la promesse sera retourn\u00e9 en r\u00e9ponse \u00e0 l'appelant distant. Sinon, la valeur de retour de l'\u00e9couteur sera utilis\u00e9e comme valeur de la r\u00e9ponse.</p> Warning <ul> <li>The IPC main is controled by A.V.A.T.A.R. You have to use the Avatar.Interface.ipcMain() for returning the A.V.A.T.A.R ipcMain.</li> <li>Un handle pour le channel ne peut \u00eatre d\u00e9clar\u00e9 qu'une seule fois. Il doit obligatoirement \u00eatre supprim\u00e9 par un ipcMain.removeHandler avant d'\u00eatre d\u00e9clar\u00e9 de nouveau.</li> </ul> <ul> <li>Ajoutez dans la m\u00e9thode openWeatherWindow l'ajout et la suppression du gestionnaire comme ci-dessous</li> </ul> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    };\n\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        if (prop) {\n            style.x = prop.x;\n            style.y = prop.y;\n        }\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n        WeatherWindow.webContents.send('onInit-weather');\n    })\n\n    // returns the localized message defined in arg\n    Avatar.Interface.ipcMain().handle('weather-msg', async (_event, arg) =&gt; {return Locale.get(arg)});\n\n    WeatherWindow.on('closed', () =&gt; {\n        // not displayed if the window is closed\n        currentwidgetState = false;\n\n        // Removes the handler `weather-msg` when the window is closed\n        Avatar.Interface.ipcMain().removeHandler('weather-msg');\n\n        WeatherWindow = null;\n    })  \n}\n</code></pre> <li> <p>Exposition de <code>ipcRenderer.invoke</code> via l'ajout dans le script de pre load</p>"},{"location":"meteo-widget/#ipcrendererinvokechannel-args","title":"ipcRenderer.invoke(channel, ...args)","text":"<ul> <li>channel string</li> <li>...args any[]</li> </ul> <p>Retourne une Promise - qui se r\u00e9sout avec la r\u00e9ponse du processus principal. <p>Envoie un message au processus principal via channel et attend un r\u00e9sultat asynchrone.</p> weather-preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n    onInitWeather: (callback) =&gt; ipcRenderer.on('onInit-weather', (_event, value) =&gt; callback(value)),\n    getMsg: (value) =&gt; ipcRenderer.invoke('weather-msg', value)\n})    \n</code></pre> <p>Le module d'\u00e9coute <code>weather-msg</code> est appel\u00e9 chaque fois que la fonction <code>window.electronAPI.getMsg()</code> du processus de rendu appelle <code>ipcRenderer.invoke()</code> </p> <li> <p>Ajoutez la fonction getMsg() dans le processus de rendu</p> weather-renderer.js<pre><code>async function Lget (target, ...args) {\n    if (args) {\n        target = [target];\n        args.forEach(arg =&gt; {\n            target.push(arg);\n        })\n    } \n\n    return await window.electronAPI.getMsg(target);\n}\n\nasync function setElementLabel() {\n    document.getElementById('quit').innerHTML = await Lget(\"message.quit\");\n}\n\nwindow.electronAPI.onInitWeather( _event =&gt; {\n    setElementLabel(); \n})  \n</code></pre> </li> <li> <p>Localisez le message</p> <ul> <li>Modifiez le fichier weather/locales/en.pak comme ci-dessous</li> </ul> <p>NOTE: Consultez &lt;lang&gt;.get() pour plus d'information</p> en.pak<pre><code>{\n    \"message\": {\n        \"quit\":\"X\"\n    }\n}\n</code></pre> </li> <li> <p>Ajoutez un el\u00e9ment <code>label</code> dans le fichier html</p> <p>weather.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self'; script-src-elem 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n        &lt;meta http-equiv=\"X-Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"/&gt;\n        &lt;link href=\"./weather.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;iframe id=\"widget_autocomplete_preview\"  width=\"150\" height=\"300\" frameborder=\"0\" src=\"https://meteofrance.com/widget/prevision/441090##3D6AA2\" title=\"Pr\u00e9visions Nantes par M\u00e9t\u00e9o-France\"&gt; &lt;/iframe&gt;\n        &lt;label id=\"quit\" class=\"quit\"&gt;&lt;/label&gt;\n        &lt;script src=\"./weather-renderer.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> 6. Ajoutez un style dans le fichier css</p> weather.css<pre><code>body, html {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    margin: 0;\n    -webkit-app-region: drag;\n}\n\n.quit{\n    position: fixed;\n    top: 0px;\n    right: 2px;\n    -webkit-app-region:no-drag;\n    font: 13px helvetica neue, helvetica, arial, sans-serif;\n    font-weight: bold;\n    color: rgb(255, 255, 255);\n    z-index: 2;\n}\n.quit:hover {\n    color: rgb(247, 5, 5);\n    cursor: pointer;\n}\n</code></pre> </li> <li> <p>Red\u00e9marrez A.V.A.T.A.R et v\u00e9rifiez l'ajout de l'el\u00e9ment label X dans le coin haut droit</p> <p></p> </li>"},{"location":"meteo-widget/#type-2-le-rendu-envoie-une-information-au-processus-principal-unidirectionnel","title":"Type 2: Le rendu envoie une information au processus principal (unidirectionnel)","text":"<p>Une communication unidirectionnel est l'appel d'un module du processus principal \u00e0 partir du code du processus de rendu. Cela peut \u00eatre fait en utilisant ipcRenderer.send dans le script de pre load jumel\u00e9 avec ipcMain.on dans le main process.</p> <ol> <li> <p>Ajoutez un module d'\u00e9coute</p> </li> <li> <p>Exposition de <code>ipcRenderer.send</code> via l'ajout dans le script de pre load</p> </li> <li> <p>Ajoutez la fonction <code>window.electronAPI.quit()</code> dans le processus de rendu</p> weather-renderer.js<pre><code>window.onbeforeunload = async (e) =&gt; {\n    e.returnValue = false;\n    // Calls window closure in the main process \n    window.electronAPI.quit();\n}\n\n// A click on the label calls the 'beforeunload' event\ndocument.getElementById(\"quit\").addEventListener(\"click\", async (event) =&gt; {\n    window.dispatchEvent(new Event ('beforeunload'));\n})\n\nasync function Lget (target, ...args) {\n\n    if (args) {\n        target = [target];\n        args.forEach(arg =&gt; {\n            target.push(arg);\n        })\n    } \n\n    return await window.electronAPI.getMsg(target);\n}\n\nasync function setElementLabel() {\n    document.getElementById('quit').innerHTML = await Lget(\"message.quit\");\n}\n\nwindow.electronAPI.onInitWeather( _event =&gt; {\n    setElementLabel(); \n})\n</code></pre> </li> <li> <p>Red\u00e9marrez A.V.A.T.A.R et v\u00e9rifiez la fermeture de la fen\u00eatre par un click de l'el\u00e9ment label X</p> </li> </ol>"},{"location":"meteo-widget/#ipcmainonchannel-listener","title":"ipcMain.on(channel, listener)","text":"<ul> <li>channel string</li> <li>listener Function<ul> <li>event IpcMainEvent</li> <li>...args any[]</li> </ul> </li> </ul> <p>Ecoute sur channel et listener sera appel\u00e9 ainsi: listener(event, args...) \u00e0 la r\u00e9ception d'un nouveau message.</p> Warning <ul> <li>The IPC main is controled by A.V.A.T.A.R. You have to use the Avatar.Interface.ipcMain() for returning the A.V.A.T.A.R ipcMain.</li> <li>Un Listener pour le channel ne peut \u00eatre d\u00e9clar\u00e9 qu'une seule fois. Il doit obligatoirement \u00eatre supprim\u00e9 par un ipcMain.removeAllListeners avant d'\u00eatre d\u00e9clar\u00e9 de nouveau.</li> </ul> <p>Pour notre exemple, nous devons signifier au processus principal qu'il doit ex\u00e9cuter la fermeture de la fen\u00eatre par un click de l'el\u00e9ment label X.  </p> <p>NOTE: Cette fermeture est r\u00e9alis\u00e9e par la m\u00e9thode d'instance win.destroy()</p> <ul> <li>Ajoutez dans la m\u00e9thode openWeatherWindow l'ajout et la suppression du module d'\u00e9coute comme ci-dessous</li> </ul> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    };\n\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        if (prop) {\n            style.x = prop.x;\n            style.y = prop.y;\n        }\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n        WeatherWindow.webContents.send('onInit-weather');\n    })\n\n    // Destroys window by a click on the 'X' label \n    Avatar.Interface.ipcMain().one('weather-quit', () =&gt; {\n        // Closed window\n        WeatherWindow.destroy();\n\n        // refresh widget button on window closed\n        Avatar.Interface.refreshWidgetInfo({plugin: 'weather', id: \"808221\"});\n    });\n\n    // returns the localized message defined in arg\n    Avatar.Interface.ipcMain().handle('weather-msg', async (_event, arg) =&gt; {return Locale.get(arg)});\n\n    WeatherWindow.on('closed', () =&gt; {\n        // not displayed if the window is closed\n        currentwidgetState = false;\n\n        // Removes the `weather-msg` handler when the window is closed\n        Avatar.Interface.ipcMain().removeHandler('weather-msg');\n\n        // Removes the `weather-quit` listener when the window is closed\n        Avatar.Interface.ipcMain().removeAllListeners('weather-quit');\n\n        WeatherWindow = null;\n    })  \n}\n</code></pre>"},{"location":"meteo-widget/#ipcrenderersendchannel-args","title":"ipcRenderer.send(channel, ...args)","text":"<ul> <li>channel string</li> <li>...args any[]</li> </ul> <p>Envoie un message asynchrone ainsi que des arguments au processus principal via channel.</p> weather-preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n    onInitWeather: (callback) =&gt; ipcRenderer.on('onInit-weather', (_event, value) =&gt; callback(value)),\n    getMsg: (value) =&gt; ipcRenderer.invoke('weather-msg', value),\n    quit: () =&gt; ipcRenderer.send('weather-quit')\n})    \n</code></pre> <p>Le listener <code>weather-quit</code> est appel\u00e9 chaque fois que la fonction <code>window.electronAPI.quit()</code> du processus de rendu appelle <code>ipcRenderer.send()</code></p>"},{"location":"meteo-widget/#finalisation","title":"Finalisation","text":"<p>Quelques petits ajouts pour finaliser le plugin, par exemple :</p> <ol> <li>Que la taille de la fen\u00eatre soient des param\u00e8tres</li> <li>Que l'on puisse facilement ouvrir la console Chromium</li> </ol> <p>1: Taille de la fen\u00eatre en param\u00e8tres</p> <ul> <li>Ajoutez des propri\u00e9t\u00e9s pour le plugin par Plugin studio</li> </ul> <pre><code>win = {\n    width: 150,\n    height: 320,\n    opacity: 1\n}\ndevTools = false\n</code></pre> <p></p> <p>2: Modifiez l'objet <code>style</code> pour inclure les param\u00e8tres</p> weather.js<pre><code>let style = {\n    parent: Avatar.Interface.mainWindow(),\n    frame: false,\n    movable: true,\n    resizable: false,\n    minimizable: false,\n    alwaysOnTop: false,\n    show: false,\n    width: Config.modules.weather.win.width,\n    height: Config.modules.weather.win.height,\n    opacity : Config.modules.weather.win.opacity,\n    icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n    webPreferences: {\n        preload: path.resolve(__dirname, 'weather-preload.js')\n    },\n    title: \"Weather forecast\"\n};\n\n......\n</code></pre> <p>3: Ajoutez l'ouverture de la console Chromium</p> weather.js<pre><code>WeatherWindow.once('ready-to-show', () =&gt; {\n    WeatherWindow.show();\n    WeatherWindow.webContents.send('onInit-weather');\n    // Displays the Chromium console if the devTools parameter is true\n    if (Config.modules.weather.devTools) WeatherWindow.webContents.openDevTools();\n})\n</code></pre> <ol> <li>Red\u00e9marrez A.V.A.T.A.R</li> </ol> <p>Dans l'exemple suivant, nous allons tranf\u00e9rer ce plugin vers un client</p> <p>  Cr\u00e9er un widget bouton - Part 1Tranf\u00e9rer le plugin vers un client - Part 3  </p>"},{"location":"meteo/","title":"Weather forecast - Part 1","text":"<p>Dans la 1\u00e8re partie de la cr\u00e9ation du plugin <code>Weather forecast</code>, nous allons commencer par cr\u00e9er le plugin puis voir la cr\u00e9ation d'un widget bouton.</p>"},{"location":"meteo/#creation-du-plugin","title":"Cr\u00e9ation du plugin","text":"<ol> <li>D\u00e9marrez le serveur dans un terminal</li> <li> <p>Cr\u00e9ez un plugin par Plugin Studio</p> <ul> <li>Nom : <code>weather</code></li> <li>Affich\u00e9: <code>Weather forecast</code></li> <li> <p>Rules: Non</p> <p></p> </li> <li> <p>Script methods: </p> <ul> <li><code>M\u00e9thodes de localisation du langage</code></li> <li><code>Methods for creating and managing widget buttons (onClose() and init() methods are added automatically)</code></li> </ul> <p> </p> </li> <li> <p>Ajouter une image </p> <ul> <li>S\u00e9lectionnez l'image <code>&lt;A.V.A.T.A.R&gt;/resources/app/assets/images/PluginCreation/weather.png</code></li> </ul> <p></p> </li> <li> <p>Pas de documentation</p> </li> </ul> <p></p> </li> </ol>"},{"location":"meteo/#modification-du-plugin","title":"Modification du plugin","text":"<p>Le Plugin Studio cr\u00e9\u00e9 automatiquement un core d'application complet avec des fichiers et des m\u00e9thodes qui peuvent \u00eatre n\u00e9cessaires suivant le type de bouton et la complexit\u00e9 du plugin.  Le plugin weather est un plugin simple qui ne n\u00e9cessite pas de m\u00e9thodes sp\u00e9cifiques pour mettre \u00e0 jour des informations, par cons\u00e9quent nous pouvons faire un peu de m\u00e9nage.</p> <ol> <li> <p>Supprimez le r\u00e9pertoire lib et son contenu.</p> <ul> <li>Ouvrez un terminal et d\u00e9placez-vous dans le r\u00e9pertoire du plugin     <pre><code>cd &lt;A.V.A..T.A.R&gt;/resources/app/cores/plugin/weather\n</code></pre></li> <li>Supprimez le r\u00e9pertoire lib</li> </ul> </li> <li> <p>Modifiez ensuite le fichier script du plugin dans Visual Studio (ou un autre \u00e9diteur de texte)</p> <ul> <li>Ouvrez le fichier <code>&lt;A.V.A.T.A.R&gt;/resources/app/core/plugins/weather/weather.js</code></li> <li>Puisqu'il n'y a pas de r\u00e8gles vocales, nous allons en profiter pour d\u00e9placer la m\u00e9thode getpak() de la m\u00e9thode action() dans la m\u00e9thode init()<ul> <li>Attention: Changez data.language par Config.language puisque le code de langue est maintenant li\u00e9 \u00e0 l'application et non pas \u00e0 un client</li> </ul> </li> <li>Supprimez tous les commentaires et les imports inutiles ajout\u00e9s pendant la cr\u00e9ation du plugin pour avoir un r\u00e9sultat comme ci-dessous (vous pouvez garder les commentaires qui vous int\u00e9ressent)</li> </ul> weather.js<pre><code>import * as path from 'node:path';\nimport * as url from 'url';\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\nimport * as widgetLib from '../../../widgetLibrairy.js';\nconst Widget = await widgetLib.init();\n\n// devices table\nlet periphInfo = [];\n//language pak\nlet Locale;\n\nconst widgetFolder = path.resolve(__dirname, 'assets/widget');\nconst widgetImgFolder = path.resolve(__dirname, 'assets/images/widget');\n\nexport async function onClose (widgets) {\n    // Save widget positions\n    if (Config.modules.weather.widget.display === true) {\n        await Widget.initVar(widgetFolder, widgetImgFolder, null, Config.modules.weather);\n        if (widgets) await Widget.saveWidgets(widgets);\n    }\n}\n\n\nexport async function init () {\n    if (!await Avatar.lang.addPluginPak(\"weather\")) {\n        return error('weather: unable to load language pak files');\n    }\n\n    Locale = await Avatar.lang.getPak(\"weather\", Config.language);\n    if (!Locale) {\n        return error (`weather: Unable to find the '${Config.language}' language pak.`);\n    }\n}\n\n\nexport async function getWidgetsOnLoad () {\n    if (Config.modules.weather.widget.display === true) {\n        await Widget.initVar(widgetFolder, widgetImgFolder, null, Config.modules.weather);\n        let widgets = await Widget.getWidgets();\n        return {plugin: \"weather\", widgets: widgets, Config: Config.modules.weather};\n    } \n}\n\n\nexport async function readyToShow () {\n\n}\n\n\nexport async function getNewButtonState (arg) {\n    return;\n}\n\n\nexport async function getPeriphInfo () {\n    return periphInfo;\n}\n\n\nexport async function widgetAction (even) {\n\n    infoConsole(even.value);\n\n}\n\n\nexport async function action(data, callback) {\n    callback();\n}\n</code></pre> </li> <li> <p>Red\u00e9marrez A.V.A.T.A.R</p> <ul> <li>Faite un Ctrl +<code>C</code> dans le terminal pour arr\u00eater le serveur</li> <li>R\u00e9cup\u00e9rez la derni\u00e8re commande <code>npm start .</code> pour red\u00e9marrer le serveur</li> </ul> </li> <li> <p>Testez le plugin  </p> <ul> <li>Aucune erreur ne doit appara\u00eete dans le terminal et dans la console A.V.A.T.A.R</li> </ul> </li> </ol>"},{"location":"meteo/#ajouter-un-widget-bouton","title":"Ajouter un widget bouton","text":""},{"location":"meteo/#initialisation","title":"Initialisation","text":"<p>La 1\u00e8re \u00e9tape est d'initaliser le bouton dans le script du plugin en ajoutant un widget de type <code>button</code> dans la variable periphInfo.</p> <p>Ci-dessous la description des cl\u00e9s possibles:</p> Cl\u00e9 Format Obligatoire Commentaire name string oui Le nom du widget value_type string oui Le type de bouton.Il existe 3 types de widget possibles, les types <code>list</code> et <code>float</code> sont cr\u00e9\u00e9s automatiquement dans Widget Studio en fonction du type de device (domotique). Le type <code>button</code> est le seul type possible pouvant \u00eatre initialis\u00e9 dans un plugin. usage_name string oui Le nom d'un r\u00e9pertoire dans &lt;plugin&gt;/assets/images/widget o\u00f9 seront utilis\u00e9s les fichiers images pour les \u00e9tats du widget periph_id string oui une valeur al\u00e9atoire unique notes string non Une note associ\u00e9e au widget <ol> <li> <p>Ajoutez les lignes suivantes dans la m\u00e9thode init()</p> weather.js<pre><code>export async function init () {\n    if (!await Avatar.lang.addPluginPak(\"weather\")) {\n        return error('weather: unable to load language pak files');\n    }\n\n    Locale = await Avatar.lang.getPak(\"weather\", Config.language);\n    if (!Locale) {\n        return error(`weather: Unable to find the '${Config.language}' language pak.`);\n    }\n\n    periphInfo.push({\n        Buttons: [\n            {\n                name: \"Weather\",\n                value_type: \"button\",\n                usage_name: \"Button\",\n                periph_id: \"808221\",\n                notes: \"Open weather forecast\"\n            }\n        ]\n    });\n}\n</code></pre> </li> <li> <p>Ajoutez une variable globale currentwidgetState pour garder l'\u00e9tat courant du bouton</p> weather.js<pre><code>// devices table\nlet periphInfo = [];\n//language pak\nlet Locale;\n// button state\nlet currentwidgetState; \n\nconst widgetFolder = path.resolve(__dirname, 'assets/widget');\n</code></pre> </li> <li> <p>Ajoutez dans les 2 m\u00e9thodes ci-dessous les appels \u00e0 currentwidgetState</p> weather.js<pre><code>export async function getNewButtonState (arg) {\n    return currentwidgetState === true ? \"Off\" : \"On\";\n}\n\nexport async function getPeriphInfo () {\n    return periphInfo;\n}\n\nexport async function widgetAction (even) {\n    currentwidgetState = even.value.action === 'On' ? true : false;\n    infoConsole(even.value);\n}\n</code></pre> </li> <li> <p>Red\u00e9marrez A.V.A.T.A.R</p> <ul> <li>Faite un Ctrl +<code>C</code> dans le terminal pour arr\u00eater le serveur</li> <li>R\u00e9cup\u00e9rez la derni\u00e8re commande <code>npm start .</code> pour red\u00e9marrer le serveur</li> </ul> </li> </ol>"},{"location":"meteo/#parametrage","title":"Param\u00e8trage","text":"<p>Apr\u00e8s avoir initialis\u00e9 le widget, il est n\u00e9cessaire de le param\u00e8trer pour le faire appara\u00eetre dans l'interface A.V.A.T.A.R</p> <ol> <li>Ouvrez  Widget Studio</li> <li>Cliquez sur l'onglet Plugins et cliquez sur le plugin <code>Weather forecast</code></li> <li> <p>D\u00e9roulez Buttons et cliquez sur Weather</p> <p></p> </li> <li> <p><code>Action On</code>: </p> <ul> <li>S\u00e9lectionnez le plugin <code>Weather forecast</code> </li> <li>Ajoutez un param\u00e8tre Off</li> </ul> </li> <li> <p><code>Action Off</code>: </p> <ul> <li>S\u00e9lectionnez le plugin <code>Weather forecast</code> </li> <li>Ajoutez un param\u00e8tre On</li> </ul> <p></p> </li> <li> <p>Cliquez sur l'onglet Images</p> </li> <li>Cliquez sur l'image On<ul> <li>S\u00e9lectionnez l'image <code>&lt;A.V.A.T.A.R&gt;/resources/app/assets/images/PluginCreation/weather.png</code></li> <li>S\u00e9lectionnez Customized for the device </li> </ul> </li> <li> <p>Cliquez sur l'image Off</p> <ul> <li>S\u00e9lectionnez la m\u00eame image <code>&lt;A.V.A.T.A.R&gt;/resources/app/assets/images/PluginCreation/weather-icon.png</code></li> <li>S\u00e9lectionnez Customized for the device </li> </ul> <p></p> </li> <li> <p>Cliquez sur le bouton Create</p> <ul> <li>Le bouton appara\u00eet dans l'interface A.V.A.T.A.R</li> <li>Vous pouvez le tester en cliquant dessus</li> </ul> </li> <li>Cliquez sur l'onglet Settings</li> <li>Positionnez le slider Opacity \u00e0 0</li> <li>Cliquez sur le bouton Modify<ul> <li>La bordure du bouton est maintenant transparente dans l'interface A.V.A.T.A.R</li> </ul> </li> <li>Cliquez sur close pour fermer la fen\u00eatre Widget Studio</li> <li>Dans l'interface A.V.A.T.A.R, d\u00e9placez le bouton en le s\u00e9lectionnant par sa bordure (transparente)</li> <li> <p>Pour enregistrer son emplacement, quittez A.V.A.T.A.R par le menu du node server</p> Warning <p>Ne faite pas un Ctrl +<code>C</code> dans le terminal sinon la m\u00e9thode Onclose() ne sera pas ex\u00e9cut\u00e9 et l'emplacement ne sera pas sauvegard\u00e9.</p> </li> <li> <p>Dans le terminal, r\u00e9cup\u00e9rez la derni\u00e8re commande <code>npm start .</code> pour red\u00e9marrer le serveur</p> </li> </ol> Success <p>Nous avons maintenant un bouton Weather dans l'interface A.V.A.T.A.R !   </p>"},{"location":"meteo/#ajouter-les-actions-de-bouton","title":"Ajouter les actions de bouton","text":"<p>La m\u00e9thode widgetAction ex\u00e9cute un infoConsole, vous pouvez v\u00e9rifier les actions que nous avons appel\u00e9s <code>On</code> et <code>Off</code> en ouvrant la console Chromium d'A.V.A.T.A.R</p> <pre><code>export async function widgetAction (even) {\n    currentwidgetState = even.value.action === 'On' ? true : false;\n    infoConsole(even.value);\n    // Returns: \n    // {\n    //    action: \"On\"\n    //    description: \"Off\"\n    //    plugin: \"Weather forecast\"\n    // }\n}\n</code></pre> <p></p> <p>Dans l'exemple suivant, nous allons ex\u00e9cuter l'affichage de la m\u00e9t\u00e9o dans une fen\u00eatre fille d'A.V.A.T.A.R.</p> <p>  IntroductionCr\u00e9er une fen\u00eatre - Part 2  </p>"},{"location":"plugin-rules/","title":"Plugin rules","text":"<p>As A.V.A.T.A.R is a multi-language application, and in order to have a language-independent correspondence of rules, rules are obligatorily written in English. English is also the language of choice for Natural Language Processing.</p> <p>A.V.A.T.A.R incorporates its own natural language processing, providing a convenient way to search for and match sentence parts with a dictated rule.</p>"},{"location":"plugin-rules/#matches","title":"Matches","text":"<p>Below are matches that can be used to write a rule:</p> Correspondence Description Rule Sentence  match Basic matching The rule must correspond exactlyto a sequence in the sentence <code>what time is it</code> <code>what time is it</code> <code>what time is it in Paris</code> <code>please what time is it exactly</code> <code>what time</code> Any one term The <code>.</code> character means any one term <code>turn on . light</code> <code>turn on the light</code> <code>turn on the led light</code> All terms until The * means all terms until - it may be 0 <code>turn on * light</code> <code>turn on the light</code> <code>turn on the led light</code> Options-list - () <code>(word1|word2)</code> parentheses allow listing possible matches for the word.- ( 'OR' logic ) <code>going to (bed|sleep)</code> <code>going to bed</code> <code>going to sleep</code> First The <code>^</code> character means something should be in the start of a match <code>^John eats glue</code> <code>John eats glue</code> <code>Mister John eats glue</code> Last The <code>$</code> character means something should be in the end of a match <code>am going$</code> <code>i am going</code> <code>i am going to the bed</code> Root matches <code>{}</code> characters mean the 'root' 'stemmed' version of the wordThe root form of a #Verb is an #Infinitive form. <code>{go} to bed</code> <code>i am going to bed</code> <code>i went to bed</code> <code>i will go to bed</code> Regexsuffix lookup Looks for sub-word matches with the  regex <code>/ /</code> characters <code>/nny$/</code> <code>tell me a funny story</code> <code>tell me a story</code> Regexinfix lookup Looks for sub-word matches with the  regex <code>/ /</code> characters <code>/stor/</code> <code>tell me a story</code> <code>tell me a joke</code> <p>matches can be associated, for example:</p> <pre><code>{go} * bed              ==&gt; the 'root' version of \"go\" and all terms until bed\n{go} * bed$             ==&gt; the 'root' version of \"go\" and all terms until bed and bed is the last term\n{go} * (bed|sleep)      ==&gt; the 'root' version of \"go\" and all terms until bed OR sleep\n^{go} . (bed|sleep)     ==&gt; the 'root' version of \"go\" must be in the start and only one term until bed OR sleep    \n</code></pre>"},{"location":"plugin-rules/#manage-rules","title":"Manage rules","text":"<p>Each plugin has a properties file in <code>.json</code> format where rules are defined:  </p> <pre><code>app/\n    core/\n        plugins/\n            &lt;plugin&gt;/\n                &lt;plugin&gt;.prop\n</code></pre> <p>Tip</p> <p>Manage plugin rules and properties via the Plugin Studio interface !</p> <p>  Getting started </p>"},{"location":"plugin-studio/","title":"Plugin Studio","text":"<p>Each plugin has a properties file (.prop) in <code>json</code> format in which all its properties are defined (see Plugin files for more details). </p> <p>Plugin Studio interface lets you manage plugin properties much more easily than with a text editor.</p> <p>In addition to managing plugin properties, Plugin Studio lets you :</p> <ul> <li>Display the plugins' information page</li> <li>activate/deactivate a plugin</li> <li>Open the plugin's HTML documentation</li> <li>Delete a plugin </li> <li>Transfert a plugin to a client </li> <li>To encrypt/decrypt a string (useful for passwords)</li> <li>translate-a-sentence in English (Plugin Studio server only)</li> </ul> ServerClient <ol> <li>Click on the server node to open the context menu</li> <li>Click on <code>Edition</code> -&gt; <code>Plugin Studio</code></li> </ol> <p></p> <ol> <li>Click on the client name to open the context menu</li> <li>Click on <code>Edition</code> -&gt; <code>Plugin Studio</code></li> </ol> <p></p> <p></p>"},{"location":"plugin-studio/#information-page","title":"Information Page","text":"<p>The information page is generally used as a presentation and user manual for a plugin.  </p> <ol> <li>On the left, open the list of plugins and click on the relevant plugin</li> <li>The information page is displayed by default</li> </ol> Note <p>If the plugin is too large, HTML documentation is recommended.</p>"},{"location":"plugin-studio/#activatedeactivate-a-plugin","title":"Activate/Deactivate a plugin","text":"<ol> <li>On the left, open the list of plugins and click on the relevant plugin</li> <li>The Plugins tab closes. Open the Plugins tab again and click on the plugin a 2nd time to display its contextual menu</li> <li>Depending on its current status, click on Activate or Desactivate</li> </ol>"},{"location":"plugin-studio/#html-documentation","title":"HTML Documentation","text":"<p>Some plugins may have documentation that is too large to be displayed in the information page.  If the plugin has HTML documentation, the Documentation menu will automatically appear in its context menu.</p> <ol> <li>On the left, open the list of plugins and click on the relevant plugin</li> <li>The Plugins tab closes. Open the Plugins tab again and click on the plugin a 2nd time to display its contextual menu</li> <li>Click on Documentation</li> </ol>"},{"location":"plugin-studio/#delete-a-plugin","title":"Delete a plugin","text":"<ol> <li>On the left, open the list of plugins and click on the relevant plugin</li> <li>The Plugins tab closes. Open the Plugins tab again and click on the plugin a 2nd time to display its contextual menu</li> <li>Click on Delete</li> <li>Click on Delete in the confirmation window</li> </ol> <p>Danger</p> <p>Be careful! deleting a plugin is definitive! </p>"},{"location":"plugin-studio/#property-management","title":"Property management","text":"<ol> <li>On the left, open the list of plugins and click on the relevant plugin</li> <li>Click on the Properties tab to display plugin properties</li> </ol> <p>The management menu is accessed by left-clicking on each line, as in the example below: </p> <p></p>"},{"location":"plugin-studio/#adding-a-property","title":"Adding a property","text":"<p>To add a property, click on a line and then use Append or Insert depending on what you want to do:</p> <ul> <li><code>Insert</code>: Adds an entry before the selected line</li> <li><code>Append</code>: Adds an entry after the selected line</li> </ul> <p>Tip</p> <p>Choose the right line for the location where you want to add an entry.  </p> <p>A good way to know if you're adding the entry correctly is to collapse or expand the parent object or array by its little arrow (to the left of its name), the new entry should appear or disappear with it.</p> <p>Then select the type of input you require from the submenu associated with the command. Table of input types:</p> Type Description Input Result String string 1. Enter a key2. Enter value The value appears in greenfield : By default Number Integer or float value 1. Click on String2. Enter a key3. Add a value4. Open the entry submenu and click on Type.5. Click on Auto The value appears in redfield : 20field : 20.98 Boolean boolean (true ou false) 1. Click on String2. Enter a key3. Add a value true ou false4. Open the entry submenu and click on Type5.  Click on Auto The value appears in orange with a checkbox  Array [ ] Table of values 1. Click on Array2. Enter a key3. Open the entry submenu (new array) and click on Append then select the type of entry to add to the array4. To add another entry, select the last line created and repeat the operation The values in the table are coloured according to type Object { } Key/value collection 1. Click on Array2. Enter a key3. Open the entry submenu (new object) and click on Append then select the type of entry to add to the object4. To add another entry, select the last line created and repeat the operation Object values appear in color according to type"},{"location":"plugin-studio/#delete-a-property","title":"Delete a property","text":"<ol> <li>Click on the line to be deleted</li> <li>Open the menu</li> <li>Click on Remove</li> </ol> <p>Warning</p> <p>The action deletes the entry with its contents. If the type is Array or Object, all entries below will be deleted.</p>"},{"location":"plugin-studio/#save-properties","title":"Save properties","text":"<ol> <li>Click in the properties interface to show the contextual menu</li> <li>Click on Save</li> </ol>"},{"location":"plugin-studio/#reload-properties","title":"Reload properties","text":"<p>Use this command if you want to reload the properties without restarting A.V.A.T.A.R.</p> <ol> <li>Click in the properties interface to show the contextual menu</li> <li>Click on Reload</li> </ol> <p>Note</p> <p>When you close Plugin Studio, the application will notice that you've modified the properties and will ask you if you want to restart to reload them. Since you've done this manually, you can then click on Later.</p>"},{"location":"plugin-studio/#encryptdecrypt-a-string","title":"Encrypt/Decrypt a string","text":"<p>This string encryption/decryption interface is useful for saving an encrypted value, such as a password, in the properties file.</p> <ol> <li>Click in the properties interface to show the contextual menu</li> <li>Click on Encrypt/Decrypt</li> </ol>"},{"location":"plugin-studio/#encrypt","title":"Encrypt","text":"<ol> <li>Enter a decrypted value to be encrypted in the Decrypted string field</li> <li>Click on Encrypt</li> <li> <p>The encrypted value appears in the Encrypted string field</p> <p></p> </li> <li> <p>Copy the encrypted value (CTRL-C) and paste it into a plugin property value field</p> </li> </ol> <p></p> <ol> <li>Save properties</li> </ol>"},{"location":"plugin-studio/#decrypt","title":"Decrypt","text":"<ol> <li>Enter a encrypted value to be decrypted in the Encrypted string field.</li> <li>Click on Decrypt</li> <li>The decrypted value appears in the Decrypted string field.</li> </ol>"},{"location":"plugin-studio/#translate-a-sentence","title":"Translate a sentence","text":"<ol> <li>Click in the properties interface to show the contextual menu</li> <li>Click on Translate</li> </ol> <p>Then copy the translated sentence into a plugin property value field. If you wish, you can then modify the sentence to add a NLP match</p> <p>  Getting started </p>"},{"location":"server-API/","title":"API Serveur","text":""},{"location":"server-API/#config","title":"<code>Config</code>","text":"<p>Object globale regroupant la configuration d'A.V.A.T.A.R serveur.</p>"},{"location":"server-API/#configmodules","title":"<code>Config.modules</code>","text":"<p>Object regroupant la configuration des plugins. Cet objet est g\u00e9n\u00e9ralement utilis\u00e9 dans les plugins pour r\u00e9cup\u00e9rer une valeur de cl\u00e9 de propri\u00e9t\u00e9.</p> &lt;Plugin&gt;.prop&lt;Plugin&gt;.js <pre><code> {\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"my first plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    }\n}\n</code></pre> <pre><code> const name = Config.modules.myFirstPlugin.name;\n</code></pre>"},{"location":"server-API/#message-loggers","title":"Message loggers","text":"<p>Logger methods are used to display messages in the A.V.A.T.A.R. console.</p> <p>Possible data types for all loggers: <pre><code>const str = 'a string';\nconst bool = true;\nconst arr = ['one', 'two', 3];\nconst obj = {key: \"value\"};\nconst f = () =&gt; console.log('hello');\n</code></pre></p>"},{"location":"server-API/#infomessage","title":"<code>info(...message)</code>","text":"<p>Affiche un message d'information dans la console.</p> <pre><code>info(str, bool, arr, obj, f);\n// returns in the console: \n// info: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"server-API/#infogreenmessage","title":"<code>infoGreen(...message)</code>","text":"<p>Affiche un message d'information  en vert dans la console.</p>"},{"location":"server-API/#infoorangemessage","title":"<code>infoOrange(...message)</code>","text":"<p>Affiche un message d'information  en orange dans la console.</p>"},{"location":"server-API/#warnmessage","title":"<code>warn(...message)</code>","text":"<p>Affiche un message d'avertissement en orange dans la console.</p> <pre><code>warn(str, bool, arr, obj, f);\n// returns in the console: \n// warn: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"server-API/#errormessage","title":"<code>error(...message)</code>","text":"<p>Affiche un message d'erreur en rouge dans la console </p> <pre><code>error(str, bool, arr, obj, f);\n// returns in the console: \n// error: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"server-API/#infoconsolemessage","title":"<code>infoConsole(...message)</code>","text":"<p>Affiche un message dans la console de d\u00e9veloppement de Chromium (cliquez sur F11 dans l'interface A.V.A.T.A.R).</p> <p>Warning</p> <p>Du fait de la mise en bac \u00e0 sable de Chromium, le rendu d'une fonction est impossible dans la console de d\u00e9veloppement. Afficher une fonction g\u00e9n\u00e8rera une erreur. Tous les autres types de donn\u00e9es sont possibles.</p> <p><pre><code>infoConsole(str, bool, arr, obj);\n</code></pre> </p>"},{"location":"server-API/#dialog","title":"Dialog","text":""},{"location":"server-API/#avatarspeaktts-client-end-callback-voice-volume-speed-pitch","title":"<code>Avatar.speak(tts, client[, end, callback, {voice, volume, speed, pitch}])</code>","text":"<p>Ex\u00e9cute un tts sur le syst\u00e8me audio du client (enceinte du client ou autre syst\u00e8me d\u00e9clar\u00e9).</p> param\u00e8tre type Obligatoire Default value Values Description <code>tts</code> stringobject oui Le texte ou un tableau de textes \u00e0 vocaliser. Peut \u00eatre un texte simple, plusieurs textes s\u00e9par\u00e9s par un pipe ('|') ou un tableau de textes (les textes peuvent \u00eatre s\u00e9par\u00e9s par un pipe ('|')). Une des valeurs sera choisie al\u00e9atoirement. <code>client</code> string oui Config.default.client Le client o\u00f9 le texte est vocalis\u00e9. Peut \u00eatre un vrai client ou un client virtuel, dans ce cas le texte sera vocalis\u00e9 sur le vrai client du client virtuel <code>end</code> boolean non true truefalse D\u00e9finie si la restitution de l'\u00e9coute sur le client est effectu\u00e9e apr\u00e8s le speaktrue: restitue l'\u00e9coutefalse: ne restitue pas l'\u00e9coute <code>callback</code> function non Fonction de callback ex\u00e9cut\u00e9e apr\u00e8s le speak {voice, volume, speed, pitch} objectvoice: stringvolume: numberspeed: numberpitch: number non D\u00e9finition de la voix \u00e0 utiliser. Cette voix doit exister.Les cl\u00e9s voice, volume, speed, pitch ne sont pas obligatoires.Les valeurs <code>number</code> d\u00e9pendent de la plateforme et de la voix <p>Exemples :  </p> <ol> <li>Vocalise le tts sur le client Living room et restitue l'\u00e9coute     <pre><code>Avatar.speak('Hello, what can i do for you?', 'Living room')\n</code></pre></li> <li>Vocalise un des tts al\u00e9atoirement sur le client Living room et restitue l'\u00e9coute     <pre><code>Avatar.speak('Hello, what can i do for you?|Hi, can I help you?', 'Living room')\n</code></pre></li> <li>Vocalise un des tts al\u00e9atoirement sur le client Living room et ne restitue pas l'\u00e9coute     <pre><code>Avatar.speak('Hello, what can i do for you?|Hi, can I help you?', 'Living room', false)\n</code></pre></li> <li>Vocalise un des tts al\u00e9atoirement sur le client Living room, restitue l'\u00e9coute et ex\u00e9cute un callback ensuite     <pre><code>Avatar.speak(['Hello, what can i do for you?', 'Hi, can I help you?'], 'Living room', () =&gt; {\n    // Do stuff\n})\n</code></pre></li> <li>Vocalise le tts sur le client Living room, ne restitue pas l'\u00e9coute et ex\u00e9cute un callback ensuite     <pre><code>Avatar.speak('Hello, what can i do for you?', 'Living room', false, () =&gt; {\n    // Do stuff\n})\n</code></pre></li> <li>Vocalise un des tts al\u00e9atoirement sur le client Living room, ne restitue pas l'\u00e9coute et ex\u00e9cute un callback ensuite     <pre><code>Avatar.speak(['Hello, what can i do for you?|Hi, can I help you?', 'I\\'m home. Can I get you anything?'], 'Living room', false, () =&gt; {\n    // Do stuff\n})\n</code></pre></li> <li>Vocalise le tts sur le client Living room et restitue l'\u00e9coute avec une d\u00e9finition de voix     <pre><code>// definition: voice name, volume, speed, pitch\nAvatar.speak('Hello, what can i do for you?', 'Living room', {voice: \"Microsoft Julie - French (France)\", volume: 100, speed: 80, pitch: 1})\n\n//Another definition: voice name and speed\nAvatar.speak('Hello, what can i do for you?', 'Living room', {voice: \"Microsoft Julie - French (France)\", speed: 70})\n</code></pre></li> </ol>"},{"location":"server-API/#avataraskmetts-client-grammar-timeout-callback-rawsentence-voice-volume-speed-pitch","title":"<code>Avatar.askme(tts, client, grammar, timeout, callback[, rawSentence, {voice, volume, speed, pitch}])</code>","text":"<p>Ex\u00e9cute un tts sur le syst\u00e8me audio du client (enceinte du client ou autre syst\u00e8me d\u00e9clar\u00e9), attend une r\u00e9ponse d\u00e9finie dans l'objet grammaire puis retourne le r\u00e9sultat dans le callback.</p> <p>Note</p> <p>Pour am\u00e9liorer le r\u00e9sultat des r\u00e9ponses du askme que vous prononcez, une recherche de la grammaire la plus proche est effectu\u00e9e par une distance de levenshtein. Cette recherche est effectu\u00e9e uniquement pour les langues Fran\u00e7aise et Anglaise.</p> param\u00e8tre type Obligatoire Default value Description <code>tts</code> stringobject non Le texte ou un tableau de textes \u00e0 vocaliser. Peut \u00eatre un texte simple, plusieurs textes s\u00e9par\u00e9s par un pipe ('|') ou un tableau de textes (les textes peuvent \u00eatre s\u00e9par\u00e9s par un pipe ('|')). Une des valeurs sera choisie al\u00e9atoirement. <code>client</code> string oui Config.default.client Le client o\u00f9 le texte est vocalis\u00e9. Peut \u00eatre un vrai client ou un client virtuel, dans ce cas le texte sera vocalis\u00e9 sur le vrai client du client virtuel <code>grammar</code> object oui Grammaire de r\u00e9ponses possibles sous la forme &lt;grammaire&gt;:&lt;tag d'ex\u00e9cution&gt; <code>timeout</code> number oui 20 D\u00e9lais d'attente de la r\u00e9ponse exprim\u00e9e en secondes <code>callback</code> function oui Fonction de callback ex\u00e9cut\u00e9e pour le askme <code>rawSentence</code> string non Cas sp\u00e9cial: A pr\u00e9ciser obligatoirement si le client est de type <code>mobile</code> (eg. Android) {voice, volume, speed, pitch} objectvoice: stringvolume: numberspeed: numberpitch: number non D\u00e9finition de la voix \u00e0 utiliser. Cette voix doit exister.Les cl\u00e9s voice, volume, speed, pitch ne sont pas obligatoires.Les valeurs <code>number</code> d\u00e9pendent de la plateforme et de la voix <p>Exemples :  </p> <ol> <li>askme simple, action \u00e0 ex\u00e9cuter avec une grammaire fixe     <pre><code>Avatar.askme(\"Hello, what is your name ?\", client,\n{\n    \"paul\": \"doStuffForPaul\",\n    \"john\": \"doStuffForJohn\",\n    \"finish\": \"done\"\n}, 15, (answer, end) =&gt; {\n    // Removes the askme and resets listen to the client\n    end(client);\n\n    // Fixed Grammar\n    switch(answer) {\n        case \"doStuffForPaul\":\n            // do stuff for Paul\n            break;\n        case \"doStuffForJohn\":\n            // do stuff for John\n            break;\n        case \"done\": // \"finish\" rule. Ending the askme without execution\n        default:\n            // timeout reached without answer\n            Avatar.speak(\"nothing to do\", client);\n    }\n})\n</code></pre></li> <li> <p>askme g\u00e9n\u00e9rique, action \u00e0 ex\u00e9cuter avec une grammaire g\u00e9n\u00e9rique et fixe</p> <p>askme accepte une r\u00e8gle de grammaire g\u00e9n\u00e9rique ('*') qui retourne le texte dict\u00e9 sous la forme \"generic:&lt;r\u00e9ponse&gt;\" Cette r\u00e8gle g\u00e9n\u00e9rique peut \u00eatre utilis\u00e9e en m\u00eame temps que des r\u00e8gles de grammaires strictes.</p> <p><pre><code>Avatar.askme(\"Hello, what is your name ?\", client,\n{\n    \"*\": \"generic\",\n    \"finish\": \"done\"\n}, 15, (answer, end) =&gt; {\n    // Removes the askme and resets listen to the client\n    end(client);\n\n    // tests the generic grammar\n    if (answer.split(':')[1]) return Avatar.speak(`Welcome ${answer.split(':')[1]}`, client);\n\n    // Otherwise, fixed Grammar\n    switch(answer) {\n        case \"done\": // \"finish\" rule. Ending the askme without execution\n        default:\n            // timeout reached without answer\n            Avatar.speak(\"nothing to do\", client);\n    }\n})\n</code></pre> 3. askme sans tts, par exemple une application (eg. Google Assistant) qui prononce elle-m\u00eame la question et attend une r\u00e9ponse <pre><code>Avatar.askme(null, client,\n{\n    \"*\": \"generic\",\n    \"finish\": \"done\"\n}, 15, (answer, end) =&gt; {\n    // Removes the askme and resets listen to the client\n    end(client);\n\n    // tests the generic grammar\n    if (answer.split(':')[1]) {\n        // do stuff\n        return answerForApp(answer.split(':')[1]);\n    }\n\n    // Otherwise, fixed Grammar\n    switch(answer) {\n        case \"done\": // \"finish\" rule. Ending the askme without execution\n        default:\n            // timeout reached without answer\n            Avatar.speak(\"nothing to do\", client);\n    }\n})\n</code></pre></p> </li> </ol>"},{"location":"server-API/#avatarspeechendclient-activatelisten-callback","title":"<code>Avatar.Speech.end(client[, activateListen, callback])</code>","text":"<p>Restitue l'\u00e9coute sur le client.</p> param\u00e8tre type Obligatoire Default value Values Description <code>client</code> string oui Config.default.client Le client concern\u00e9. Peut \u00eatre un vrai client ou un client virtuel, dans ce cas le texte sera vocalis\u00e9 sur le vrai client du client virtuel <code>activateListen</code> boolean non true truefalse D\u00e9finie si la restitution de l'\u00e9coute sur le client est effectu\u00e9e. Dans tous les cas, la methode <code>unmute</code> du plugin concern\u00e9 est ex\u00e9cut\u00e9e <code>callback</code> function non Fonction de callback ex\u00e9cut\u00e9e apr\u00e8s la restitution de l'\u00e9coute sur le client. Si la methode <code>timeoutCallbackEnd</code> du plugin concern\u00e9 existe, un d\u00e9lais pour ex\u00e9cuter le callback peut \u00eatre d\u00e9fini. <p>Exemples: </p> <ol> <li> <p>R\u00e9activation de l'\u00e9coute     <pre><code>// Reactivation of listening\nAvatar.Speech.end('Living room');\n\n// Do stuff\n</code></pre></p> </li> <li> <p>tts sur le client sans la r\u00e9activation de l'\u00e9coute (end = false) puis apr\u00e8s avoir r\u00e9aliser une action dans le callback, restitution de l'\u00e9coute      <pre><code>Avatar.speak('Hello, what can i do for you?', 'Living room', false, () =&gt; {\n    // Do Stuff\n    // .......\n\n    // Then reactivation of listening\n    Avatar.Speech.end('Living room');\n}) \n</code></pre></p> </li> <li>Temporisarion de 5 secondes pour le timeout du callback end     <pre><code>/**\n* Returns a timeout for the callback of the Avatar.Speech.end method\n* @param {string=} client - the A.V.A.T.A.R client which execute the end, can be a real or virtual client\n* @return {number=} - required - returns timeout in milliseconds\n*/\nexport function timeoutCallbackEnd(client) {\n    return 5000;\n}\n\nconst test = () =&gt; {\n    // tts on Living room, no reactivation of listening\n    Avatar.speak('Hello, what can i do for you?', 'Living room', false, () =&gt; {\n        // Do stuff\n        // ........\n\n        // Then, reactivation of listening and a callback\n        Avatar.Speech.end('Living room', () =&gt; {\n            // Do stuff\n            // ........\n        })\n    }) \n}\n</code></pre></li> </ol>"},{"location":"server-API/#music-play","title":"Music play","text":""},{"location":"server-API/#avatarplaymusic-client-type-end-callback","title":"<code>Avatar.play(music, client, type[, end, callback])</code>","text":"<p>Joue un fichier son sur le client</p> param\u00e8tre type Obligatoire Default value Values Description <code>music</code> string oui Le fichier son \u00e0 jouer. Peut \u00eatre:- Un fichier sur le serveur ou sur un client- Une adresse web locale ou distante.__dirname est remplac\u00e9 par &lt;A.V.A.T.A.R&gt;/resources/app/core <code>client</code> string oui Config.default.client Le client sur lequel le fichier son doit \u00eatre jou\u00e9 <code>type</code> string oui localurl - local: Fichier sur le client ou sur le serveur- url: Lien http local ou distant <code>end</code> string non after beforeafter D\u00e9fini si la restitution de l'\u00e9coute sur le client est faite avant ou apr\u00e8s de jouer le fichier son <code>callback</code> function non Fonction de callback ex\u00e9cut\u00e9e apr\u00e8s le fichier son <p>Exemples: </p> <ol> <li>Absolute path on the client, reactivates listening before playing, no callback      <pre><code>Avatar.play('C:/music/siren.mp3', 'Living room', 'local', 'before'); \n</code></pre></li> <li>&lt;A.V.A.T.A.R&gt;/resources/app/core path on the client, reactivates listening after playing and a callback  <pre><code>Avatar.play('__dirname/music/siren.mp3', 'Living room', 'local', 'after', () =&gt; {\n   // Do stuff\n}); \n</code></pre></li> <li>Music on the web, reactivates listening after playing and a callback    <pre><code>Avatar.play(\"https://ccrma.stanford.edu/~jos/mp3/cello.mp3\", 'Living room', 'url', 'after', () =&gt; {\n    // Do stuff\n});\n</code></pre></li> <li>HTTP static folder on the server  (music file on the server), reactivates listening after playing   <pre><code>const music = `http://${Config.http.ip}:${Config.http.port}/Love_Is_a_Battlefield.mp3`;\n\n// sets static folder on the server\nAvatar.static.set('C:/music', () =&gt; {\n    // Plays music on the client\n    Avatar.play(music, 'Living room', 'url');\n});\n</code></pre></li> <li>HTTP static folder on the client (music file on the client), reactivates listening before playing   <pre><code>const clientInfos = Avatar.Socket.getClient('Living room');\nconst music = `http://${clientInfos.ip}:${clientInfos.loopback}/Love_Is_a_Battlefield.mp3`;\n\n// sets static folder on the client\nAvatar.static.setToClient('C:/music', 'Living room', () =&gt; {\n    // Plays music on the client\n    Avatar.play(music, 'Living room', 'url', 'before');\n});\n</code></pre></li> </ol>"},{"location":"server-API/#avatarstopclient-callback","title":"<code>Avatar.stop(client[, callback])</code>","text":"<p>Stoppe le fichier son sur le client</p> param\u00e8tre type Obligatoire Default value Description <code>client</code> string oui Config.default.client Le client o\u00f9 le fichier son doit \u00eatre stoppp\u00e9 <code>callback</code> function non Fonction de callback ex\u00e9cut\u00e9e apr\u00e8s l'arr\u00eat du fichier son <p>Exemple :</p> <pre><code>Avatar.stop('Living room');\n</code></pre>"},{"location":"server-API/#files-folders","title":"Files &amp; folders","text":""},{"location":"server-API/#avatarcopyfilefrom-to-client-end-backup-callback","title":"<code>Avatar.copyFile(from, to, client[, end, backup, callback])</code>","text":"<p>Copie un fichier du serveur sur un client.</p> param\u00e8tre type Obligatoire Default value Values Description <code>from</code> string oui Nom du fichier source \u00e0 copier sur le serveur <code>to</code> string oui Nom du fichier destination sur le client.__dirname est remplac\u00e9 par &lt;A.V.A.T.A.R&gt;/resources/app/core <code>client</code> string oui Config.default.client Le client sur lequel le fichier est copi\u00e9 <code>end</code> string non beforeafter D\u00e9fini si la restitution de l'\u00e9coute sur le client est faite avant ou apr\u00e8s la copie du fichier <code>backup</code> boolean non false truefalse D\u00e9fini si une copie en _old est faite si le fichier de destination existe <code>callback</code> function non Fonction de callback ex\u00e9cut\u00e9e apr\u00e8s la copie <p>Exemples: </p> <pre><code>// Absolute server and client paths, activate listening before copy of the file\nAvatar.copyFile('C:/avatar-server/tmp/myfile.js', 'C:/tmp/myfile.js', 'Living room', 'before', () =&gt; {\n    // Do stuff\n})\n</code></pre> <pre><code>// &lt;A.V.A.T.A.R\\&gt;resources/app/core path on the client and backup of the file if exists\nAvatar.copyFile('C:/tmp/avatar.js', '__dirname/avatar.js', 'Living room', true); \n</code></pre>"},{"location":"server-API/#avatartransfertpluginplugin-client-backup-callback","title":"<code>Avatar.transfertPlugin(plugin, client[, backup, callback])</code>","text":"<p>Copie le r\u00e9pertoire d'un plugin du serveur vers un client.</p> param\u00e8tre type Obligatoire Default value Values Description <code>plugin</code> string oui Nom du plugin \u00e0 transf\u00e9rer sur le client <code>client</code> string oui Config.default.client Le client sur lequel le r\u00e9pertoire du plugin est transf\u00e9rer <code>backup</code> boolean non false truefalse D\u00e9fini si une copie de sauvegarde dans le r\u00e9pertoire &lt;Client&gt;/app/resources/core/backup-plugins est faite si le plugin existe sur le client <code>callback</code> function non Fonction de callback ex\u00e9cut\u00e9e apr\u00e8s le transfert <p>Exemples: </p> <pre><code>// Copys the weather plugin to the `Living room` client with a backup before the copy\nAvatar.transfertPlugin('weather, 'Living room', true, () =&gt; {\n    // Do stuff\n})\n</code></pre>"},{"location":"server-API/#avatarstaticsetfoldercallback","title":"<code>Avatar.static.set(folder[,callback])</code>","text":"<p>D\u00e9fini un dossier statique sur le serveur.</p> param\u00e8tre type Obligatoire Description <code>folder</code> string oui Dossier \u00e0 rendre static <code>callback</code> function non Fonction de callback <p>Exemple: </p> <pre><code>// sets static folder on the server\nAvatar.static.set('C:/music', () =&gt; {\n     // Do stuff\n});\n</code></pre>"},{"location":"server-API/#avatarstaticsettoclientfolder-clientcallback","title":"<code>Avatar.static.setToClient(folder, client[,callback])</code>","text":"<p>D\u00e9finit un dossier statique sur un client.</p> param\u00e8tre type Obligatoire Description <code>folder</code> string oui Dossier \u00e0 rendre static <code>client</code> string oui Le client sur lequel le dossier est \u00e0 rendre static <code>callback</code> function non Fonction de callback <p>Exemple: </p> <pre><code>// sets static folder on the server\nAvatar.static.setToClient('C:/music', 'Living room', () =&gt; {\n     // Do stuff\n});\n</code></pre>"},{"location":"server-API/#client-methods","title":"Client methods","text":""},{"location":"server-API/#avatarclientfromrulesentence","title":"<code>Avatar.clientFromRule(sentence)</code>","text":"<ul> <li><code>sentence</code> &lt;string&gt; A sentence</li> <li>Returns: &lt;string&gt; A client included in the sentence, can be a virtual client</li> </ul> <p>Exemples: </p> <ul> <li>Client r\u00e9el: 'Living room'</li> <li>Client virtuel: 'Patio'</li> </ul> <pre><code>const room = Avatar.clientFromRule('switch on the light in the Living room');\n// Returns: 'Living room'\n</code></pre> <pre><code>const room = Avatar.clientFromRule('switch on the light in the patio');\n// Returns: 'patio'\n</code></pre>"},{"location":"server-API/#avatarclientpluginclient-plugin-param-callback","title":"<code>Avatar.clientPlugin(client, plugin[, param, callback])</code>","text":"<p>Ex\u00e9cute un plugin sur le client.</p> param\u00e8tre type Obligatoire Default value Description <code>client</code> string oui Config.default.client Le client sur lequel le plugin est ex\u00e9cut\u00e9 <code>plugin</code> string oui Plugin \u00e0 ex\u00e9cuter <code>param</code> objet non Param\u00e8tres de l'object data du plugin \u00e0 ex\u00e9cuter <code>callback</code> function non Fonction de callback ex\u00e9cut\u00e9e apr\u00e8s l'ex\u00e9cution du plugin <p>Exemples: </p> <ol> <li>Ex\u00e9cute le plugin <code>time</code> <pre><code>Avatar.clientPlugin('Living room', 'time');\n</code></pre></li> <li>Autre ex\u00e9cution du plugin <code>time</code> avec callback     <pre><code>Avatar.clientPlugin('Living room', \"time\", () =&gt; {\n    // Do stuff\n});\n</code></pre></li> <li>Ex\u00e9cute le plugin <code>eeDomus</code> avec des param\u00e8tres      <pre><code>Avatar.clientPlugin('Living room', 'eeDomus', {action: {command: 'set', periph: '568947', value: '1OO'}});\n</code></pre></li> </ol>"},{"location":"server-API/#avatargettrueclientclient","title":"<code>Avatar.getTrueClient(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A virtual client</li> <li>Returns: &lt;string&gt; The true client</li> </ul> <p>Retourne le vrai client d'un client virtuel.</p> <p>Exemples: </p> <ul> <li>Client virtuel: 'patio'</li> <li>Client r\u00e9el: 'Living room'</li> </ul> <pre><code>const client = Avatar.getTrueClient('patio');\n// Returns: 'Living room'\n</code></pre> <pre><code>const client = Avatar.getTrueClient('Living room');\n// Returns: 'Living room'\n</code></pre>"},{"location":"server-API/#avatargetvirtualclientsclient","title":"<code>Avatar.getVirtualClients(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A true client</li> <li>Returns: &lt;array&gt;[ ] Virtual clients of the true client</li> </ul> <p>Exemple: </p> <ul> <li>Client r\u00e9el: 'Living room'</li> <li>Client virtuel: 'patio'</li> <li>Client virtuel: 'kitchen'</li> </ul> <pre><code>const virtualClients = Avatar.getVirtualClients('Living room');\n// Returns: ['patio', 'kitchen']\n</code></pre> <pre><code>const virtualClients = Avatar.getVirtualClients('patio');\n// Returns: []\n</code></pre>"},{"location":"server-API/#avatarismobileclient","title":"<code>Avatar.isMobile(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A client</li> <li>Returns: &lt;boolean&gt; true if the client is mobile (eg. Android) or false</li> </ul> <pre><code>const properties = Avatar.isMobile('Living room');\n// Returns: true\n</code></pre>"},{"location":"server-API/#avatarisvirtualclientclient","title":"<code>Avatar.isVirtualClient(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A client</li> <li>Returns: &lt;boolean&gt; true if the client is virtual or false</li> </ul> <p>Exemples: </p> <ul> <li>Client r\u00e9el: 'Living room'</li> <li>Client virtuel: 'patio'</li> </ul> <pre><code>const isVirtual = Avatar.isVirtualClient('Living room');\n// Returns: false\n</code></pre> <pre><code>const isVirtual = Avatar.isVirtualClient('patio');\n// Returns: true\n</code></pre>"},{"location":"server-API/#avatarrunappappexe-client-param-callback","title":"<code>Avatar.runApp(appExe, client[, param, callback])</code>","text":"<p>Ex\u00e9cute une application sur le client</p> param\u00e8tre type Obligatoire Default value Description <code>appExe</code> string oui Application \u00e0 ex\u00e9cuter__dirname est remplac\u00e9 par &lt;A.V.A.T.A.R&gt;/resources/app/core <code>client</code> string oui Config.default.client Le client sur lequel l'application est ex\u00e9cut\u00e9e <code>param</code> string non Param\u00e8tres de l'application \u00e0 ex\u00e9cuter <code>callback</code> function non Fonction de callback ex\u00e9cut\u00e9e apr\u00e8s l'ex\u00e9cution de l'application <p>Exemples: </p> <pre><code>// Executes the `screensaver` application depending of the plateform (Windows, Linux, Darwin)\nconst screensaver = process.platform === 'win32'\n? path.join(__dirname, \"lib\", \"screensaver\", \"win32\", \"screensaver.bat\")\n: path.join(__dirname, \"lib\", \"screensaver\", process.platform, \"screensaver.sh\");\n\nAvatar.runApp(screensaver, 'Living room');\n</code></pre> <pre><code>// Executes nircmd application on Windows only with parameters and callback\nAvatar.runApp('C:/apps/nircmd/nircmd', 'Living room', 'win close class \"IEFrame\"',() =&gt; {\n    // Do stuff\n});\n</code></pre>"},{"location":"server-API/#avatarisserverspeakclient","title":"<code>Avatar.isServerSpeak(client)</code>","text":"<p>Test si les dialogues sont redirig\u00e9s vers des enceintes autres que celles du PC client.</p> <p>Returns &lt;boolean&gt; true or false</p> <pre><code>// 'Living room' has wifi speakers\nconst serverSpeak = Avatar.isServerSpeak('Living room');\nReturns: true\n</code></pre>"},{"location":"server-API/#avatarismobileclient_1","title":"<code>Avatar.isMobile(client)</code>","text":"<p>Test si le client est un client mobile (eg. Android)</p> <p>Returns &lt;boolean&gt; true or false</p> <pre><code>const mobile = Avatar.isMobile('Living room');\nReturns: false\n</code></pre>"},{"location":"server-API/#avatarisloopmodeclient","title":"<code>Avatar.isLoopMode(client)</code>","text":"<p>Test si le client est configur\u00e9 en mode loop</p> <p>Returns &lt;boolean&gt; true or false</p> <pre><code>const mobile = Avatar.isLoopMode('Living room');\nReturns: false\n</code></pre>"},{"location":"server-API/#avatarsocketgetclients","title":"<code>Avatar.Socket.getClients()</code>","text":"<ul> <li>Returns: &lt;array&gt; All connected clients</li> </ul> <p>Exemple: </p> <pre><code>const clients = Avatar.Socket.getClients();\n// Returns: &lt;array\\&gt;[ ]&lt;/span&gt; All connected clients\n// [\n//      Client {\n//          id: 'Living_room',      // ID of the client\n//          name: 'Living room',    // name of the client\n//          Obj: Socket {...},      // client socket\n//          loop_mode: false,       // dialog loops after each dialog \n//          server_speak: false,    // dialogs are redirected to other speakers\n//          ip: '191.89.2.120',     // client IP adress \n//          loopback: '',           // client remote http port\n//          language: 'en-EN',      // language of the client dialogs\n//          is_mobile: false        // the client is mobile or not\n//      }\n// ]\n</code></pre>"},{"location":"server-API/#avatarsocketgetclientsocketclient","title":"<code>Avatar.Socket.getClientSocket(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A connected client</li> <li>Returns: &lt;object&gt; Socket object of the connected client</li> </ul> <p>Exemple: </p> <pre><code>const clientSocket = Avatar.Socket.getClientSocket('Living room');\n//  Returns: \n//  &lt;ref *1&gt; Socket {....}\n</code></pre> <p>Note</p> <p>L'object retourn\u00e9 est ensuite utilis\u00e9 pour \u00e9mettre un event sur un client par clientSocket.emit(event)</p>"},{"location":"server-API/#clientsocketemitevent","title":"<code>&lt;clientSocket&gt;.emit(event)</code>","text":"<ul> <li><code>event</code> &lt;string&gt; Emet l'event sur le client</li> </ul> <p>Les \u00e9v\u00e9nements possibles:</p> Event param\u00e8tres Description restart Red\u00e9marre le client quit Ferme le client shutdown Arr\u00eate le serveur du client start_listen D\u00e9clenche l'\u00e9coute sur le client stop_listen (client, full) Stoppe l'\u00e9coute sur le client<code>client</code> &lt;string&gt; Client name<code>full</code> &lt;boolean&gt; - true: Restitue l'\u00e9coute - false: Ne restitue pas l'\u00e9coute Dans tous les cas, la methode <code>unmute</code> du plugin concern\u00e9 est ex\u00e9cut\u00e9e listenOnOff (state) Active/d\u00e9sactive l'\u00e9coute du client<code>state</code> &lt;boolean&gt;- true: Active l'\u00e9coute - false: d\u00e9sactive l'\u00e9coute <pre><code>// Restarts the server of the client\nconst clientSocket = Avatar.Socket.getClientSocket('Living room');\nclientSocket.emit('restart');\n</code></pre> <pre><code>// Stops listening of the client\nconst clientSocket = Avatar.Socket.getClientSocket('Living room');\nclientSocket.emit('stop_listen', 'Living room', true);\n</code></pre>"},{"location":"server-API/#plugin-methods","title":"Plugin methods","text":""},{"location":"server-API/#avatargetpropertyfile-property","title":"<code>Avatar.getProperty(file[, property])</code>","text":"<p>Retourne les propri\u00e9t\u00e9s du fichier JSON ou la valeur de property</p> param\u00e8tre type Obligatoire Description <code>file</code> string oui Le fichier de propri\u00e9t\u00e9s au format JSON <code>property</code> string non le nom de la propri\u00e9t\u00e9 <p>Exemples: </p> <pre><code>const properties = Avatar.getProperty('/folder/myProperties.prop');\n// Returns:\n// {\n//     \"myProperties\":\"This is my JSON file\",\n//     \"values\":100,\n//     \"description\":\"My first plugin\"\n// }\n</code></pre> <pre><code>const property = Avatar.getProperty('/folder/myProperties.prop', 'description');\n// Returns: 'My first plugin'\n</code></pre>"},{"location":"server-API/#avatartriggerlistener-options","title":"<code>Avatar.trigger(listener[, options])</code>","text":"<p>D\u00e9clenche un module d'\u00e9coute.</p> param\u00e8tre type Obligatoire Description <code>listener</code> string oui Nom du module d'\u00e9coute \u00e0 d\u00e9clencher <code>options</code> object non Param\u00e8tres \u00e0 passer au module d'\u00e9coute <p>Exemples: </p> <pre><code>Avatar.trigger('eeDomus', {key: 'SwitchLight', client: 'Living room', periph:'135968', state: \"100\" });\n</code></pre> <pre><code>// With callback\nAvatar.trigger('eeDomus', {\n    key: 'switchLight', \n    client: 'Living room', \n    periph:'135968', \n    state: \"100\", \n    callback: function (state) =&gt; { \n        // Do stuff\n});\n</code></pre>"},{"location":"server-API/#avatarlistenlistener-callbackoptions","title":"<code>Avatar.listen(listener[, callback(options)])</code>","text":"<p>D\u00e9claration d'un module d'\u00e9coute.</p> param\u00e8tre type Obligatoire Description <code>listener</code> string oui Nom du module d'\u00e9coute d\u00e9clar\u00e9 <code>callback</code> function non Fonction \u00e0 ex\u00e9cuter avec les options pass\u00e9es dans le d\u00e9clencheur <p>Exemples: </p> <pre><code>Avatar.listen('eeDomus', async data =&gt; {\n    // Executes the action\n    await set(data);\n});\n</code></pre> <pre><code>// With callback\nAvatar.listen('eeDomus', async data =&gt; {\n    // Executes the action\n    await set(data);\n    if (data.callback) callback();\n});\n</code></pre>"},{"location":"server-API/#avatarcallplugin-options-callback","title":"<code>Avatar.call(plugin[, options, callback])</code>","text":"<p>Fonction d'appel d'un plugin \u00e0 ex\u00e9cuter par un plugin.</p> param\u00e8tre type Obligatoire Description <code>plugin</code> string oui Nom du plugin \u00e0 ex\u00e9cuter <code>options</code> object non Options \u00e0 passer au plugin <code>callback</code> function non Fonction \u00e0 ex\u00e9cuter apr\u00e8s l'appel du plugin.Note: Le plugin peut passer un param\u00e8tre dans la fonction de callback de sa m\u00e9thode action <p>Exemples: </p> <pre><code>// Executes 'time' plugin, no options required\nAvatar.call('time');\n</code></pre> <pre><code>// Executes 'time' plugin with options and callback\nAvatar.call('time', {action: {command: 'set'}, language: 'en', client: 'Living room'}, () =&gt; {\n    //Do stuff\n});\n</code></pre> <pre><code>// Executes 'time' plugin with callback \n// data &lt;value&gt; - if the plugin returns a value in its callback\nAvatar.call('time', (data) =&gt; {\n    //Do stuff\n});\n</code></pre>"},{"location":"server-API/#avatarrunplugin-options-callback","title":"<code>Avatar.run(plugin[, options, callback])</code>","text":"<p>Identique \u00e0 Avatar.call() mais est ex\u00e9cut\u00e9e pour un appel de plugin par une requ\u00eate HTTP contrairement \u00e0 Avatar.call() :</p> Action Avatar.call() Avatar.run() <code>Requ\u00e8te HTTP</code> <code>Appel par plugin</code> Param\u00e8tre Type Obligatoire Description <code>plugin</code> string oui Nom du plugin \u00e0 ex\u00e9cuter <code>options</code> object non Options \u00e0 passer au plugin <code>callback</code> function non Fonction \u00e0 ex\u00e9cuter apr\u00e8s l'appel du plugin.Note: Le plugin peut passer un param\u00e8tre dans la fonction de callback de sa m\u00e9thode action <p>Exemples: </p> <pre><code>// Executes 'time' plugin, no options required\nAvatar.run('time');\n</code></pre> <pre><code>// Executes 'time' plugin with options and callback\nAvatar.run('time', {action: {command: 'set'}, language: 'en', client: 'Living room'}, () =&gt; {\n    //Do stuff\n});\n</code></pre> <pre><code>// Executes 'time' plugin with callback \n// data &lt;value&gt; - if the plugin returns a value in its callback\nAvatar.run('time', (data) =&gt; {\n    //Do stuff\n});\n</code></pre>"},{"location":"server-API/#avatarlastclient","title":"<code>Avatar.last(client)</code>","text":"<p>R\u00e9cup\u00e8re la derni\u00e8re action ex\u00e9cut\u00e9e pour le client.</p> <pre><code>const lastAction = Avatar.last('Living room');\n// Returns:\n// [{\n//      client: 'Living room',\n//      plugin: 'sonosPlayer',\n//      options: {\n//          rawSentence: 'test musique',\n//          client: 'Living room',\n//          language: 'fr',\n//          sentence: 'Music test',\n//          tags: [Array],\n//          tokens: [Array],\n//          relations: [Object],\n//          action: [Object],\n//          toClient: 'Living room',\n//          rule: 'test'\n//      },\n//      callback: false\n// }]\n</code></pre>"},{"location":"server-API/#avatarexistsplugin","title":"<code>Avatar.exists(plugin)</code>","text":"<p>Test si le plugin existe.</p> <ul> <li><code>plugin</code> &lt;string&gt; Le nom d'un plugin</li> <li>Returns:<ul> <li>true: Le plugin existe </li> <li>false: Le plugin n'existe pas</li> </ul> </li> </ul> <pre><code>const isExist = Avatar.exists('Living room');\n// Returns: true\n</code></pre>"},{"location":"server-API/#avatariaactionsentence-client-language-callback","title":"<code>Avatar.ia.action(sentence, client, language[, callback])</code>","text":"<p>D\u00e9clenche l'ex\u00e9cution du traitement de la sentence par NLP de la phrase puis ex\u00e9cute le plugin associ\u00e9.</p> Param\u00e8tre Type Obligatoire Description <code>sentence</code> string oui Phrase \u00e0 traiter par NLP <code>client</code> string oui Le client sur lequel l'action est ex\u00e9cut\u00e9e <code>language</code> string oui Le code court du langage utilis\u00e9 sur le client <code>callback</code> function non Fonction \u00e0 ex\u00e9cuter apr\u00e8s l'appel du plugin <p>Exemples: </p> <pre><code>// NLP sentence processing then execution of the associated plugin\nAvatar.ia.action('what time is it?', 'Living room', 'en');\n</code></pre> <pre><code>// NLP sentence processing, execution of the associated plugin then executes a callback\nAvatar.ia.action('quelle heure est il ?', 'Living room', 'fr', () =&gt; {\n    // Do stuff\n});\n</code></pre>"},{"location":"server-API/#language-pack","title":"Language pack","text":"<p>Les packs de langues permettent de localiser les messages du plugin. Les packs de langues doivent \u00eatre cr\u00e9\u00e9s dans le r\u00e9pertoire locales du plugin et \u00eatre sous la forme <code>&lt;code court pays\\&gt;.pak</code></p> <p>Tip</p> <p>Une cr\u00e9ation du plugin par Wigdet Studio y d\u00e9pose automatiquement un fichier <code>&lt;lang&gt;.pak</code> du langage courant.</p>"},{"location":"server-API/#avatarlangaddpluginpakplugin","title":"<code>Avatar.lang.addPluginPak(plugin)</code>","text":"<ul> <li><code>plugin</code> &lt;string&gt; Plugin name</li> </ul> <p>Ajoute les fichiers de langage du plugin dans la biblioth\u00e8que des packs de langues</p> <p>Important</p> <p>Ajoutez les packs de langues dans la m\u00e9thode init() du plugin pour ne l'effectuer qu'une seule fois.     </p> <p>Exemple: </p> <pre><code>export async function init () {\n\n    // Add plugin language packs to the language pack library\n    await Avatar.lang.addPluginPak('myPlugin');\n\n}\n</code></pre>"},{"location":"server-API/#avatarlanggetpakplugin-lang","title":"<code>Avatar.lang.getPak(plugin, lang)</code>","text":"<p>Retourne le pack de langue.</p> param\u00e8tre type Obligatoire Description <code>plugin</code> string oui Le nom du plugin <code>lang</code> string oui Le langage recherch\u00e9 <p>Important</p> <p>L'application \u00e9tant multi-rooms et que chaque client peut avoir son propre language de dialogue, il est pr\u00e9f\u00e9rable de chercher le pack de langue dans la m\u00e9thode action() du plugin.    </p> <p>Exemples: </p> <pre><code>// global internal variable\nlet Locale;\n\nexport async function action (data, callback) {\n\n    // searchs for lang pack for the current language\n    Locale = await Avatar.lang.getPak('myPlugin', data.language);\n\n    // .....\n\n}\n</code></pre>"},{"location":"server-API/#lang-pakgetkey","title":"<code>&lt;lang pak\\&gt;.get(key)</code>","text":"<p>R\u00e9cup\u00e8re la valeur de la cl\u00e9 dans le pack de langue charg\u00e9 dans la variable Locale (voir Avatar.lang.getPak())</p> <ul> <li><code>key</code>: &lt;string&gt; ou &lt;array&gt;[ ] La cl\u00e9 \u00e0 r\u00e9cup\u00e9rer</li> </ul> <p>Note: Les <code>$$</code> sont remplac\u00e9s dans la valeur de la cl\u00e9 dans l'ordre de leurs positions dans l'array (voir les exemples ci-dessous).</p> <p>Exemples:</p> en.pakfr.pak <pre><code>{\n    \"error\": {\n        \"decrypt\": \"Unable to decrypt the API password of the myPlugin plugin\",\n        \"init\": \"Error in the init module of the myPlugin plugin\"\n    },\n    \"speech\": {\n        \"answerSet\": \"right now|it's done|magic\",\n        \"answerGet\": \"the temperature is $$ degrees in the $$\"\n    }\n}\n</code></pre> <pre><code> {\n    \"error\": {\n        \"decrypt\": \"Impossible de d\u00e9crypter le mot de passe de l'API du plugin myPlugin\",\n        \"init\": \"Erreur dans le module init du plugin myPlugin\"\n    },\n    \"speech\": {\n        \"answerSet\": \"voil\u00e0|c'est fait|magique\",\n        \"answerGet\": \"il fait $$ degr\u00e9s dans la pi\u00e8ce $$\"\n    }\n}\n</code></pre> <pre><code>if (!myVar) {\n    // myVar is empty, write error message\n    return error(Locale.get('error.decrypt'));\n}\n</code></pre> <pre><code>// Set an action then speak a confirmation message (string)\nset(() =&gt; {\n    Avatar.speak(Locale.get('speech.answerSet'), 'Living room');\n}\n</code></pre> <pre><code>// Get a value then speak a message (array[ ])\n// The $$ in the value of the key is replaced by the dynamic values in the sentence order\n// First $$ in the message = value\n// Second $$ in the message = client\nget((value) =&gt; {\n    Avatar.speak(Locale.get([\"speech.answerGet\", value, 'Living room']), 'Living room');\n}\n</code></pre>"},{"location":"server-API/#avatarlanggetlanguagepakplugin-lang","title":"<code>Avatar.lang..getLanguagePak(Plugin, lang)</code>","text":"<p>Retourne le packs de langue du plugin.</p> <ul> <li><code>Plugin</code>: &lt;string&gt; Le plugin </li> <li><code>lang</code>: &lt;string&gt; Code court de la langue du pack \u00e0 retourner</li> <li>Returns: &lt;object&gt;[ ] le pack de langue</li> </ul> <pre><code>// Add plugin language packs to the language pack library\nconst langpak = await Avatar.lang.getLanguagePak('myPlugin', 'fr');\nReturns:\n// {\n//      \"error\": {\n//          \"decrypt\": \"Impossible de d\u00e9crypter le mot de passe de l'API du plugin myPlugin\",\n//          \"init\": \"Erreur dans le module init du plugin myPlugin\"\n//      },\n//      \"speech\": {\n//          \"answerSet\": \"voil\u00e0|c'est fait|magique\",\n//          \"answerGet\": \"il fait $$ degr\u00e9s dans la pi\u00e8ce $$\"\n//      }\n// }\n</code></pre>"},{"location":"server-API/#avatarlanggetpaksbypluginplugin","title":"<code>Avatar.lang..getPaksByPlugin(Plugin)</code>","text":"<p>Retourne les packs de langues du plugin.</p> <ul> <li><code>Plugin</code>: &lt;string&gt; Le plugin </li> <li>Returns: &lt;array&gt;[ ] Tableau des packs de langue du plugin</li> </ul> <p>Exemples:</p> <pre><code>// Add plugin language packs to the language pack library\nconst packs = await Avatar.lang.getPaksByPlugin('myPlugin');\n//Returns: \n// [\n//      PluginLanguage {\n//          get: [Function: get],\n//          plugin: 'myPlugin',\n//          locale: 'en',\n//          pak: { error: [Object], speech: [Object] }\n//      },\n//      PluginLanguage {\n//          get: [Function: get],\n//          plugin: 'myPlugin',\n//          locale: 'fr',\n//          pak: { error: [Object], speech: [Object] }\n//      }\n// ]\n</code></pre>"},{"location":"server-API/#encryptdecrypt-a-value","title":"Encrypt/decrypt a value","text":"<p>Ces fonctions ajoutent une protection suppl\u00e9mentaire aux donn\u00e9es stock\u00e9es sur disque en utilisant le syst\u00e8me de cryptographie fournis par le syst\u00e8me d'exploitation. La s\u00e9mantique de s\u00e9curit\u00e9 actuelle pour chaque plate-forme est d\u00e9crite ci-dessous.</p> Plateforme Chiffrement Test\u00e9 Windows DPAPI Linux Varie selon le syst\u00e8me:kwallet, kwallet5, kwallet6 and gnome-libsecretCertains syst\u00e8mes comme Debian ou Ubuntu ont un chiffrement install\u00e9 par d\u00e9faut, dans le cas contraire vous devrez installer manuellement une option de chiffrement Debian12 :  MacOS Keychain Access <p>Note</p> <p>Utilisez la m\u00e9thode de d\u00e9cryptage Avatar.decrypt() pour d\u00e9crypter la cha\u00eene de caract\u00e8res avant de l'utiliser.</p>"},{"location":"server-API/#avatarencryptvalue","title":"<code>Avatar.encrypt(value)</code>","text":"<ul> <li><code>value</code> &lt;string&gt; A value to encrypt</li> <li>Returns: &lt;array&gt;[ ] A encrypted array of values or false</li> </ul> <p>Exemples: </p> <pre><code>const encryptedValue = Avatar.encrypt('ipOhjugf11548OPpze');\n// Returns: \n// [\n//  118, 49, 48, 107, 188, 207, 26, 235, 24, 7,\n//   75, 124, 162, 192, 141, 39, 182, 231, 71, 130,\n//  123, 116, 190,  39, 220, 97, 61, 95, 13, 6,\n//   90, 18,  13, 160, 250, 109, 143, 77, 7, 232,\n//  244, 127, 133, 132, 116, 68, 96, 35, 144\n// ]\n</code></pre> <pre><code>// Test on a platform without encryption\nconst encryptedValue = Avatar.encrypt('ipOhjugf11548OPpze');\n// Returns: false\n</code></pre>"},{"location":"server-API/#avatardecryptvalue","title":"<code>Avatar.decrypt(value)</code>","text":"<ul> <li><code>value</code> &lt;string&gt; or &lt;array&gt;[ ] A string value ou array of values to decrypt</li> <li>Returns: &lt;string A decrypted value or false</li> </ul> <p>Exemples: </p> <pre><code>// Decryption of string\nconst decryptedValue = Avatar.decrypt('118, 49, 48, 107, 188, 207, 26, 235, 24, 75, 124, 162, 192, 141, 39, 182, 231, 71, 130, 123, 116, 190,  39, 220, 97, 61, 95, 13, 6, 90, 18,  13, 160, 250, 109, 143, 77, 7, 232, 244, 127, 133, 132, 116, 68, 96, 35, 144');\n// Returns: 'ipOhjugf11548OPpze'\n</code></pre> <pre><code>// Decryption of array\nconst decryptedValue = Avatar.decrypt([118, 49, 48, 107, 188, 207, 26, 235, 24, 75, 124, 162, 192, 141, 39, 182, 231, 71, 130, 123, 116, 190,  39, 220, 97, 61, 95, 13, 6, 90, 18,  13, 160, 250, 109, 143, 77, 7, 232, 244, 127, 133, 132, 116, 68, 96, 35, 144]);\n// Returns: 'ipOhjugf11548OPpze'\n</code></pre> <pre><code>// Test on a platform without decryption\nconst encryptedValue = Avatar.decrypt('118, 49, 48, 107, 188, 207, 26, 235, 24, 75, 124, 1...');\n// Returns: false\n</code></pre>"},{"location":"server-API/#http-request","title":"HTTP request","text":"<p>Acc\u00e8s aux plugins par requ\u00e8te HTTP.</p> <p>Format:  http://&lt;IP address&gt;:&lt;Port&gt;/avatar/&lt;Plugin&gt;?key=value&amp;key=value</p> Param\u00e8tre Obligatoire Description IP address oui L'adresse IP du serveur A.V.A.T.A.R Port oui Le port de communication du serveur A.V.A.T.A.R Plugin oui Le nom du plugin \u00e0 ex\u00e9cuter key=value non Les param\u00e8tres de l'object data \u00e0 passer \u00e0 la m\u00e9thode action du pluginSi une cl\u00e9 de param\u00e8tre est \u00e9gale \u00e0 <code>command</code> alors l'object data sera {action: {command: value, key: value} sinon {key: value} <p>Exemples:</p> <pre><code>// Serveur IP address: 192.168.2.34\n// Port: 3000\n// Plugin: myPlugin\n// keys: command=updateInfo&amp;id=225665\n// Object data re\u00e7u dans le plugin: {action: {command: updateInfo, id: 225665}}\ntry {\n    const response = await axios (url: 'http://192.168.2.34:3000/avatar/myPlugin?command=updateInfo&amp;id=225665');\n    if (response.status !== 200) {\n        throw new Error ('status '+response.status);\n    }\n} catch (err) {\n    error ('HTTP error:', err);\n}\n</code></pre> <pre><code>// Serveur IP address: 192.168.2.34\n// Port: 3000\n// Plugin: myPlugin\n// keys: id=225665\n// Object data re\u00e7u dans le plugin: {id: 225665}\ntry {\n    const response = await axios ('http://192.168.2.34:3000/avatar/myPlugin?id=225665');\n    if (response.status !== 200) {\n        throw new Error ('status '+response.status);\n    }\n} catch (err) {\n    error ('HTTP error:', err);\n}\n</code></pre>"},{"location":"server-API/#interface","title":"Interface","text":""},{"location":"server-API/#avatarinterfacemainwindow","title":"<code>Avatar.Interface.mainWindow()</code>","text":"<p>Retourne l'instance de BrowserWindow de la fen\u00eatre principale d'A.V.A.T.A.R.</p> <p>Exemple: </p> <pre><code>const mainWindow = Avatar.Interface.mainWindow();\n</code></pre>"},{"location":"server-API/#avatarinterfacebrowserwindowoptions-html-ismenu","title":"<code>Avatar.Interface.BrowserWindow(options, html[, isMenu])</code>","text":"<p>Cr\u00e9e une nouvelle <code>BrowserWindow</code> avec les propri\u00e9t\u00e9s natives d\u00e9finies par les options.</p> <ul> <li>Returns: &lt;string The instance of the window</li> </ul> param\u00e8tre type Obligatoire Values Default values Description <code>options</code> object oui Les options de cr\u00e9ation de la fen\u00eatre <code>html</code> string oui Le fichier html du renderer process de la fen\u00eatre <code>isMenu</code> boolean non truefalse false D\u00e9fini si la fen\u00eatre conserve son menu par d\u00e9faut <p>Important</p> <p>Consultez BrowserWindow de la documentation Electron pour plus d'information sur les options de cr\u00e9ation.  </p> <p>Retrouvez plus d'information dans l'exemple de cr\u00e9ation d'une fen\u00eatre pour le plugin weather forecast</p> <p>Exemple: </p> <pre><code>// Style of the window\nconst style = {\n    parent: Avatar.Interface.mainWindow(),\n    frame: false,\n    movable: true,\n    resizable: true,\n    minimizable: false,\n    alwaysOnTop: false,\n    show: false,\n    width: 320,\n    height: 150,\n    opacity : 1,\n    icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n    webPreferences: {\n        preload: path.resolve(__dirname, 'weather-preload.js')\n    },\n    title: \"Weather forecast\"\n}\n\n// Creates a new window with the style, the 'weather.html' file and no menu\nconst WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n</code></pre>"},{"location":"server-API/#avatarinterfaceipcmain","title":"<code>Avatar.Interface.ipcMain()</code>","text":"<p>Permet de communiquer de mani\u00e8re asynchrone depuis le processus main avec les processus de rendu. Retourne le module ipcMain d'A.V.A.T.A.R.</p> <p>Important</p> <p>Consultez ipcMain de la documentation Electron pour plus d'information sur ses m\u00e9thodes d'\u00e9coutes.  </p> <p>Retrouvez plus d'information dans l'exemple de cr\u00e9ation d'une fen\u00eatre pour le plugin weather forecast</p> <p>Exemple: </p> <pre><code>const ipcMain = Avatar.Interface.ipcMain();\n</code></pre>"},{"location":"server-API/#avatarinterfacemenu","title":"<code>Avatar.Interface.Menu()</code>","text":"<p>Retourne le module Menu</p> <pre><code>const template = [\n    {\n        label: \"Edit\",\n        icon: path.resolve(__dirname, 'assets/images/edit.png'),\n        click: () =&gt; edit()\n    },\n    {type: 'separator'},\n    {\n        label: \"View\",\n        icon: path.resolve(__dirname, 'assets/images/view.png'),\n        click: () =&gt; view()\n    },\n];\n\nconst menu = Avatar.Interface.Menu();\nconst myMenu = menu.buildFromTemplate(template);\nmyMenu.popup({window: myWindow});\n</code></pre>"},{"location":"server-API/#avatarinterfacedialog","title":"<code>Avatar.Interface.dialog()</code>","text":"<p>Retourne le module dialog</p> <pre><code>const options = {\n    type: 'question',\n    title: \"My message\",\n    message: \"Are you sure ?\",\n    detail: \"Answer Yes or No !\",\n    buttons: [\"Yes i do !\", \"I don't know !\"]\n};\n\nconst answer = Avatar.Interface.dialog().showMessageBoxSync(myParentWindow, options);\nswitch (answer) {\n    case 0: \n        info('You said Yes !');\n        break;\n    case 1:\n        info('You said Maybe !');\n}\n</code></pre>"},{"location":"server-API/#avatarinterfaceshell","title":"<code>Avatar.Interface.shell()</code>","text":"<p>Retourne le module shell</p> <pre><code>// Opens the site in the default internet browser \nAvatar.Interface.shell().openExternal('https://google.com');\n</code></pre> <pre><code>// Moves the item to the trash\nAvatar.Interface.shell().trashItem(path.resolve(__dirname, 'myfile'));\n</code></pre>"},{"location":"server-API/#avatarinterfaceglobalshortcut","title":"<code>Avatar.Interface.globalShortcut()</code>","text":"<p>Retourne le module globalShortcut</p> <pre><code>// Registers the F2 key to do a stuff\nAvatar.Interface.globalShortcut().register('F2', () =&gt; {\n    // Do stuff\n})\n</code></pre> <p>Important</p> <p>Les raccourcis globaux sont automatiquement supprim\u00e9s par A.V.A.T.A.R lorsque vous quittez l'application.</p> <p>Attention :  Le raccourci F11 est pris par A.V.A.T.A.R serveur et le raccourci F10 est pris par A.V.A.T.A.R client pour ouvrir la console Chromium des fen\u00eatres</p>"},{"location":"server-API/#avatarinterfaceshowrestartboxmsg","title":"<code>Avatar.Interface.showRestartBox(msg)</code>","text":"<p>Affiche une boite de dialogue de red\u00e9marrage dans l'interface A.V.A.T.A.R</p> <ul> <li><code>msg</code>: &lt;object&gt; {title, detail} Les messages d'informations de la boite de dialogue</li> </ul> <p>Exemple :</p> <pre><code>Avatar.Interface.showRestartBox({title: \"MyPlugin information\", detail: \"To update the changes, you need to restart the application\"});\n</code></pre> <p></p> <p>  Developer Guide </p>"},{"location":"server-install/","title":"Server installation","text":""},{"location":"server-install/#preparing-the-package","title":"Preparing the package","text":"<ol> <li>Create a C:\\packager\\server (Windows) or /packager/server (Linux) folder which will be used to package the application</li> <li>Download the A.V.A.T.A.R zip file from GitHub<ul> <li>Use the  button and <code>Download zip</code></li> </ul> </li> <li>Unzip <code>A.V.A.T.A.R-master.zip</code></li> <li>Copy the contents of the A.V.A.T.A.R-master/dist folder to /packager/server</li> </ol>"},{"location":"server-install/#installing-the-packager-module","title":"Installing the packager module","text":"<ol> <li>Open a terminal and move to the /packager/server folder</li> <li>Enter the following command to install the packager and all application modules: <pre><code>npm install --save-dev @electron/packager\n</code></pre></li> <li>After a few moments, you should see the following result: <pre><code>added 339 packages, and audited 340 packages in 15s\n\n55 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></li> </ol> About vulnerabilities <p>The application is updated regularly, but it is possible that you may discover vulnerabilities. If this is the case, installation is unaffected and can continue. You can also contribute by leaving an issue on the A.V.A.T.A.R. GitHub to update the application.</p>"},{"location":"server-install/#running-the-packager-module","title":"Running the packager module","text":"<p>In order to have the latest version of <code>Electron</code> for your installation, you need to retrieve the current version from GitHub Electron which will be used to package it.</p> <ul> <li> <p>On the right in the Releases section, below the About section, note the current version</p> <p></p> </li> <li> <p>Still in the packager/server folder</p> </li> <li> <p>Run the packager :</p> <ul> <li>For the example, the current version is 31.2.1, change the value to the current version retrieved from GitHub Electron</li> </ul> <p><pre><code>npx electron-packager . --electron-version=31.2.1 --icon=./avatar.ico --out=output\n</code></pre> 3. After a few moments, you should see the following result (varies by platform): <pre><code>Packaging app for platform win32 x64 using electron v31.2.1\nWrote new app to: output\\avatar-win32-x64\n</code></pre></p> </li> </ul>"},{"location":"server-install/#electron-module-installation","title":"Electron module installation","text":"<ol> <li>Move to the output/avatar-&lt;platform&gt;/resources/app folder</li> <li>Enter the following command to install Electron in the package: <pre><code>npm install electron --save-dev\n</code></pre></li> <li>After a few moments, you should see the following result: <pre><code>added 144 packages, changed 4 packages, and audited 346 packages in 13s\n\n55 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></li> </ol>"},{"location":"server-install/#deploy-avatar-as-an-application","title":"Deploy A.V.A.T.A.R. as an application","text":"<p>A.V.A.T.A.R. is now ready to be moved into its application folder</p>"},{"location":"server-install/#windows","title":"Windows","text":"<ol> <li>Create a folder for A.V.A.T.A.R. (e.g. C:\\avatar\\server).</li> <li>Move the contents of output\\avatar-win32-x64 to the created folder</li> <li>Delete the C:\\packager\\server folder</li> </ol>"},{"location":"server-install/#linux","title":"Linux","text":"<p>You have 2 possible choices:</p> <ul> <li>Move the contents of output\\avatar-linux-arch to a folder and start the server with its <code>avatar</code> executable</li> <li>Create a <code>.deb</code> package to install A.V.A.T.A.R. as an application</li> </ul> <p>Choose what you want to do below (between \u00ab Move to folder \u00bb or \u00ab Create a <code>.deb</code> package \u00bb)</p>"},{"location":"server-install/#move-to-folder","title":"Move to folder","text":"<ol> <li>Create a folder for A.V.A.T.A.R (e.g. /avatar/server)</li> <li>Move the contents of output/avatar-darwin-arch to the new folder</li> <li>Delete the /packager/server folder</li> </ol>"},{"location":"server-install/#create-a-deb-package","title":"Create a <code>.deb</code> package","text":"<ol> <li> <p>Install the required packages</p> <p><code>Linux Debian / Ubuntu</code>:     <pre><code>sudo apt-get update\nsudo apt-get install fakeroot dpkg\n</code></pre></p> <p><code>Linux Fedora</code>:     <pre><code>sudo yum update\nsudo yum install fakeroot dpkg\n</code></pre></p> </li> <li> <p>Install electron-installer-debian <pre><code>npm install -g electron-installer-debian\n</code></pre></p> </li> <li>In the /packager/server folder, create the <code>.deb</code> package <pre><code>electron-installer-debian --src output/avatar-linux-x64/ --dest output/installer/ --arch amd64\n</code></pre></li> <li>Move to the output/installer folder and install the package (the name may vary depending on the platform) <pre><code>sudo apt install ./avatar_4.0.0_amd64.deb\n</code></pre></li> <li> <p>Add an application icon</p> <ul> <li>Edit the /usr/share/applications/avatar.desktop file</li> <li>Change the value of the <code>Icon</code> property</li> </ul> <pre><code>Icon=/usr/lib/avatar/resources/app/avatar.ico\n</code></pre> </li> </ol>"},{"location":"server-install/#macos","title":"MacOS","text":"<p>You have 2 possible choices:</p> <ul> <li>Move the contents of output\\avatar-darwin-arch to a folder and start the server with its <code>avatar</code> executable.</li> <li>Create a <code>.deb</code> package to install A.V.A.T.A.R as an application</li> </ul> <p>Choose what you want to do below (between \u201cMove to a folder\u201d or \u201cCreate a .deb package\u201d)</p>"},{"location":"server-install/#move-to-folder_1","title":"Move to folder","text":"<ol> <li>Create a folder for A.V.A.T.A.R. (e.g. /avatar/server)</li> <li>Move the contents of output/avatar-darwin-arch to the created folder</li> <li>Delete the /packager/server folder</li> </ol>"},{"location":"server-install/#create-a-deb-package_1","title":"Create a <code>.deb</code> package","text":"<ol> <li>Install the required packages with Homebrew <pre><code>brew install fakeroot dpkg\n</code></pre></li> <li>Install electron-installer-debian <pre><code>npm install -g electron-installer-debian\n</code></pre></li> <li>In the packager/server folder, create the <code>.deb</code> package     <pre><code>electron-installer-debian --src output/avatar-darwin-&lt;arch&gt;/Contents/Resources/app --dest output/installer/ --arch &lt;arch&gt;\n</code></pre></li> <li>Move to the output/installer folder and install the package     <pre><code>dpkg -c ./avatar_4.0.0_&lt;arch&gt;.deb\n</code></pre></li> <li> <p>Add an application icon</p> <p>If the application icon does not appear, you can modify it using the <code>avatar.ico</code> file accessible in the application directories. </p> </li> <li> <p>Search for A.V.A.T.A.R. in applications</p> </li> </ol> About MacOS <p>Although theoretically possible, installation of a <code>.deb</code> package with electron-installer-debian for macOS has not been tested. If you encounter any problems, please consult the issues reported by users.  </p> <p>You can also use electron-deboa-maker instead of <code>electron-installer-debian</code>.</p>"},{"location":"server-install/#start-avatar-server","title":"Start A.V.A.T.A.R. server","text":""},{"location":"server-install/#windows_1","title":"Windows","text":"<ol> <li>Add a desktop shortcut for the A.V.A.T.A.R. executable: C:\\avatar\\server\\avatar.exe</li> <li>Start A.V.A.T.A.R. server by clicking on the desktop icon</li> </ol>"},{"location":"server-install/#linuxmacos","title":"Linux/MacOS","text":"<p>Start A.V.A.T.A.R. according to installation choice</p> <ul> <li>In a folder:<ul> <li>Click on the executable in its installation folder<ul> <li><code>Linux</code>: Start A.V.A.T.A.R server by clicking on /avatar/server/avatar</li> <li><code>MacOS</code>: Start A.V.A.T.A.R server by clicking on /avatar/server/avatar.app</li> </ul> </li> </ul> </li> <li>As an application: <ul> <li>Search for the A.V.A.T.A.R. application in applications and run it</li> </ul> </li> </ul> <p></p> <p>  Introduction Installing a client  </p>"},{"location":"server-properties/","title":"Server settings","text":"<p>Server settings are accessed via its node in the application interface.</p> <p></p> <ol> <li> <p>Left-click on the node to display its context menu</p> Tip <p>Left-click is deliberate for compatibility with graphic tablets without keyboard </p> </li> </ol> <p>NOTE: All the parameters below are described in the order in which they appear in the window.        </p> <ol> <li>Click on Settings</li> </ol>"},{"location":"server-properties/#settings-tab","title":"Settings tab","text":""},{"location":"server-properties/#show-all-informations-in-the-console","title":"<code>Show all informations in the console</code>","text":"<p>Select whether you want all information to be displayed in the console. This can be very useful if you want to know whether or not a plugin loads correctly on startup.</p>"},{"location":"server-properties/#application-language","title":"<code>Application language</code>","text":"<p>Defines the language used for all graphical interfaces and application messages in the console.</p> Info <p>Not to be confused with the language used for voice rules, which is defined in each client's settings</p> <p>2 languages are offered by default with the application:</p> <ul> <li>English</li> <li>French</li> </ul> <p>You can translate a localization file into the language of your choice and add it to the application's languages: </p> <ol> <li>Copy one of the localization files to app/locales/, naming it with the country code (2 letters)</li> <li> <p>Modify the values of all keys</p> Warning <p>The $$ characters are replaced by dynamic values when the message is displayed. Do not delete them </p> </li> <li> <p>Add an entry in app/locales/BCP47.loc to show the new language in the properties and use it</p> <ul> <li>For example, suppose a new location file pt.loc is created</li> <li>The new entry in the file will be :</li> </ul> <pre><code>{\n    \"1\": {\n        \"tag\": \"en\",\n        \"region\": \"English (US English)\"\n    },\n    \"2\": {\n        \"tag\": \"fr\",\n        \"region\": \"French (especially in France)\"\n    },\n    \"3\": {\n        \"tag\": \"pt\",\n        \"region\": \"Portuguese (Portugal)\"\n    }\n}\n</code></pre> </li> </ol>"},{"location":"server-properties/#communication-port-http","title":"<code>Communication port (HTTP)</code>","text":"<p>The communication port with the A.V.A.T.A.R. server. This port is also an access to the plugins by HTTP requests (see HTTP request in the API for more details).</p> Warning <p>This HTTP port number must be the same on each client </p>"},{"location":"server-properties/#server-search-port-used-by-clients-udp","title":"<code>Server search port used by clients (UDP)</code>","text":"<p>The UDP search port used by clients to search for the server.</p> <ul> <li>Default value: 3333</li> </ul> Warning <p>This UDP port number must be the same on each client </p>"},{"location":"server-properties/#default-client","title":"<code>Default client</code>","text":"<p>The name of a default client when it is homis in an action to be executed.</p>"},{"location":"server-properties/#number-of-automatic-client-restarts-per-24h","title":"<code>Number of automatic client restarts per 24h</code>","text":"<ul> <li>Default value: 0 (no restart)</li> </ul> <p>To refresh the server by restarting it regularly, you can enter a value between 1 and 24. </p> To know <p>In order not to interfere with automatic programs that may be launched at fixed times, 7 minutes are added to the selected times.</p>"},{"location":"server-properties/#action-synchronization","title":"<code>Action synchronization</code>","text":"<ul> <li>Default value: 0 milli-seconde</li> </ul> <p>Use to add a timeout (in milliseconds) between speech recognition and plugin script execution if a synchronization problem occurs.</p>"},{"location":"server-properties/#screen-saver","title":"Screen saver","text":"<p>Activates a screen saver after the server has been fully loaded. Useful, for example, if you use A.V.A.T.A.R. in tablet mode to automatically switch off the screen.</p> <p><code>Windows</code> : Black screen by default. No screensaver file required.</p> <ul> <li>If you want to use a specific screensaver:<ul> <li>Rename app/lib/screensaver/win32/screensaver.bat to app/lib/screensaver/win32/noscreensaver.bat. The application will then automatically use the app/lib/screensaver/win32/screensaver.vbs file</li> <li>Then select a screensaver to be passed as a parameter<ul> <li>Select C:\\Windows\\System32\\scrnsave.scr to have a black screen</li> </ul> </li> </ul> </li> </ul> <p><code>Linux</code> - <code>macOS</code> : Black screen by default. No screensaver file required.</p> <ul> <li>If you want to use a specific screensaver, edit the app/lib/screensaver/&lt;platform&gt;/screensaver.sh file</li> <li>Then select a screensaver to be passed as a parameter</li> </ul>"},{"location":"server-properties/#updates","title":"Updates","text":"<p>Choose whether you want the application to check for updates on startup. If Yes, and if a new version of the application is available, the flashing message \u201cNew version available!\u201d will be displayed in the interface.</p>"},{"location":"server-properties/#nodes-tab","title":"Nodes tab","text":"<p>In this tab, you can define the properties of client nodes in the application interface:</p> <ul> <li>Display client names</li> <li>Node size</li> <li>Client name text properties</li> <li>Line properties between nodes</li> <li>Rule text display properties </li> </ul>"},{"location":"server-properties/#dialog-tab","title":"Dialog tab","text":"<p>In this tab, you can define internal voice rules for the A.V.A.T.A.R. server.  </p>"},{"location":"server-properties/#repeat-the-last-rule","title":"<code>Repeat the last rule</code>","text":"<p>Enter the rules you can say to repeat the last action performed by A.V.A.T.A.R.</p> Warning <p>These internal rules have already been translated and are to be defined in English only.</p>"},{"location":"server-properties/#rule-not-understood","title":"<code>Rule not understood</code>","text":"<p>Enter the sentences A.V.A.T.A.R. can say when no action has been found for the rule.</p>"},{"location":"server-properties/#background-tab","title":"Background tab","text":"<p>Choose a wallpaper in <code>jpg</code> format for the A.V.A.T.A.R graphical interface.</p> <p>By default, the application offers a number of wallpapers in the app/assets/images/background folder.</p> <p>Note</p> <p>You can choose a wallpaper from any folder. When saved, it will be copied to the app/assets/images/background folder.</p>"},{"location":"server-properties/#console-tab","title":"Console tab","text":"<p>In this tab, you can set the console properties of the A.V.A.T.A.R. interface.</p> <p>  Getting started Client settings  </p>"},{"location":"time/","title":"World time plugin","text":""},{"location":"time/#creer-le-plugin","title":"Cr\u00e9er le plugin","text":"<ol> <li>D\u00e9marrez le serveur dans un terminal</li> <li> <p>Cr\u00e9ez un plugin par Plugin Studio</p> <ul> <li>Nom : <code>worldTime</code></li> <li>Affich\u00e9: <code>World time</code></li> <li>Rules: <ul> <li>Oui</li> <li>Par la syntaxe de la phrase</li> </ul> </li> <li>Script methods: s\u00e9lectionnez <code>M\u00e9thodes de localisation du langage</code></li> <li>Ajouter une image <ul> <li>S\u00e9lectionnez l'image <code>&lt;A.V.A.T.A.R&gt;/resources/app/assets/images/PluginCreation/worldTime.png</code></li> </ul> </li> <li>Pas de documentation</li> </ul> <p></p> </li> </ol>"},{"location":"time/#definir-les-regles-du-plugin","title":"D\u00e9finir les r\u00e8gles du plugin","text":"<ol> <li> <p>Modifiez les propri\u00e9t\u00e9s du plugin</p> <ul> <li>Cliquez sur l'onglet Properties</li> <li>Modifiez l'action <code>test</code> par <code>get</code></li> <li>Modifiez la r\u00e8gle par <code>what time {be}</code><ul> <li>Voir Root matches dans le tableau des correspondances de r\u00e8gles de plugin pour plus de d\u00e9tails sur l'\u00e9criture de la r\u00e8gle</li> </ul> </li> <li>Ouvrez le menu contextuel<ul> <li>Sauvegardez les propri\u00e9t\u00e9s par le menu <code>Save</code></li> </ul> </li> </ul> <p></p> <ul> <li>Fermez Plugin Studio</li> <li>Clique sur Later pour ne pas red\u00e9marrer A.V.A.T.A.R</li> </ul> </li> <li> <p>Modifiez le fichier script du plugin dans Visual Studio (ou un autre \u00e9diteur de texte)</p> <ul> <li>Ouvrez le fichier <code>&lt;A.V.A.T.A.R&gt;/resources/app/core/plugins/worldTime/worldTime.js</code></li> <li>Modifiez le tableau de commandes et le nom de la m\u00e9thode <code>test</code> par <code>get</code></li> <li>Modifiez la variable <code>client</code> par <code>data.client</code> dans la fonction <code>Avatar.speak</code></li> <li>Accessoirement, vous pouvez supprimer tous les commentaires et les imports ajout\u00e9s pendant la cr\u00e9ation du plugin</li> </ul> time.js<pre><code>//language pak\nlet Locale;\n\nexport async function init() {\n\n    if (!await Avatar.lang.addPluginPak(\"worldTime\")) {\n        return error('worldTime: unable to load language pak files');\n    }\n\n}\n\nexport async function action(data, callback) {\n\n    try {\n        Locale = await Avatar.lang.getPak(\"worldTime\", data.language)\n        if (!Locale) {\n            throw new Error (`worldTime: Unbale to find the '${data.language}' language pak.`);\n        }\n\n        const tblActions = {\n            get : () =&gt; get(data)                   \n        }\n\n        info(\"worldTime:\", data.action.command, L.get(\"plugin.from\"), data.client);\n\n        tblActions[data.action.command]()\n    } catch (err) {\n        if (data.client) Avatar.Speech.end(data.client);\n        if (err.message) error(err.message);\n    }   \n\n    callback();\n\n}\n\n\nconst get = (data) =&gt; {\n\n    Avatar.speak(Locale.get([\"message.test\", data.client]), data.client);\n\n}\n</code></pre> </li> <li> <p>Red\u00e9marrez A.V.A.T.A.R</p> <ul> <li>Faite un Ctrl +<code>C</code> dans le terminal pour arr\u00eater le serveur</li> <li>R\u00e9cup\u00e9rez la derni\u00e8re commande <code>npm start .</code> pour red\u00e9marrer le serveur</li> </ul> </li> <li> <p>Testez le plugin  </p> <ul> <li>D\u00e9marrez un client si ce n'est pas d\u00e9j\u00e0 fait</li> <li>Ex\u00e9cutez la r\u00e8gle <code>what time is it</code></li> </ul> Attention <p>Si le message  appara\u00eet dans la console A.V.A.T.A.R, v\u00e9rifiez si le pak de langue du client existe bien dans le r\u00e9pertoire time/locales. Si il n'existe pas, copiez le pak de langue existant en XX.pak, ensuite modifiez la valeur de la cl\u00e9 <code>test</code>.</p> </li> </ol>"},{"location":"time/#modification-du-plugin","title":"Modification du plugin","text":"<p>Nous allons maintenant faire en sorte d'avoir un plugin fonctionnel qui va nous permettre de demander l'heure pour toutes les principales villes du monde.</p> <ol> <li> <p>L'object relations</p> <p>D'abord, nous pouvons v\u00e9rifier si l'object relations peut \u00eatre utile pour le d\u00e9veloppement du plugin (voir aussi le Traitement naturel du langage).</p> <ul> <li>Ajoutez dans la fonction get() un console.log() pour afficher l'objet relation time.js<pre><code>const get = (data) =&gt; {\n\n    Avatar.speak(Locale.get([\"message.test\", data.client]), data.client);\n\n    console.log('Relation:', data.relations);\n}\n</code></pre></li> <li>Red\u00e9marrez A.V.A.T.A.R dans le terminal</li> <li> <p>Ex\u00e9cutez la r\u00e8gle <code>what time is it in new york</code></p> <p></p> </li> <li> <p>Nous pouvons voir l'objet relations.location</p> </li> <li> <p>Testez plusieurs r\u00e8gles avec des villes du monde pour v\u00e9rifier :</p> <ol> <li>Que majoritairement les plus grandes villes du monde sont correctement reconnues</li> <li>Que si il n'y a pas de ville dans la r\u00e8gle, l'objet relation.location n'existe pas</li> </ol> </li> <li> <p>Les tests sont concluants dans la majorit\u00e9 des cas, nous allons donc nous servir du traitement du langage pour d\u00e9velopper le plugin.</p> </li> </ul> </li> </ol> Tip <p>Quelques villes comme Beijing (ou P\u00e9kin) ne sont pas reconnues comme timeZone. Ce petit probl\u00e8me, non inh\u00e9rant au traitement du langage et qui n'est pas vu dans cet exemple peut \u00eatre trait\u00e9 simplement au cas par cas par le module <code>moment-timezone</code>.</p> <ol> <li> <p>Ajoutez des param\u00e8tres dans les propri\u00e9t\u00e9s</p> <p>La timezone \u00e9tant sur une ville principale, nous allons ajouter 2 param\u00e8tres:</p> <ul> <li>Un param\u00e8tre <code>zone</code> pour une timezone par d\u00e9faut lorsqu'il n'y a pas de ville dans la r\u00e8gle</li> <li>Un param\u00e8tre <code>speech</code> pour que le message de la timezone par d\u00e9faut soit en relation avec la ville o\u00f9 nous habitons (allons au bout des choses !)</li> </ul> <p>Modifiez les param\u00e8tres du plugin comme ci-dessous:</p> <p></p> </li> <li> <p>Installez les modules nec\u00e9ssaires</p> <ul> <li> <p>Nous avons besoin de 2 modules d'import :</p> <ul> <li><code>underscore</code> est un module A.V.A.T.A.R, il n'est donc pas n\u00e9cessaire de l'installer (voir best practices)</li> <li><code>moment-timezone</code>: Ce module est \u00e0 installer</li> </ul> </li> <li> <p>Ouvrez un terminal et d\u00e9placez-vous dans le r\u00e9pertoire du plugin</p> <p><pre><code>cd &lt;A.V.A..T.A.R&gt;/resources/app/cores/plugin/worldTime\n</code></pre>     * Installez le module <code>moment-timezone</code></p> <pre><code>npm install moment-timezone\n</code></pre> <p></p> </li> </ul> </li> <li> <p>Ajoutez les imports dans le script au d\u00e9but du fichier</p> worldTime.js<pre><code>import _ from 'underscore';\nimport moment from 'moment-timezone';\n</code></pre> </li> <li> <p>Modifiez la fonction get pour inclure la recherche de l'heure comme ci-dessous</p> <p>Note: Modifiez les Avatar.speak avec une phrase localis\u00e9e dans votre langue</p> worldTime.js<pre><code>const get = (data) =&gt; {\n   try {\n        // Defines the city, NLP relation or default\n        const city = data.relations?.location?.text ? data.relations.location.text : Config.modules.worldTime.default.zone;\n        // Defines the city for the speech\n        const speechCity = city === Config.modules.worldTime.default.zone ? Config.modules.worldTime.default.speech : city;\n        // Updates chars in the city to be conform to timeZones\n        const location = city.replace(/ /gi,\"_\");\n        // Retreives timeZones\n        const timeZones = Intl.supportedValuesOf('timeZone');\n        // Searchs for the city in the timeZones table \n        let even = _.find(timeZones, item =&gt; { return item.toLowerCase().indexOf(`${location}`.toLowerCase()) !== -1; });\n        if (even) {\n            // even can be a string or a Array\n            even = typeof even === 'string' ? even : even[0];\n            // Defines the location (e.g. 'en' or 'fr') for a language-correct sentence.\n            moment.locale(data.language);\n            // Builds the sentence\n            const sentence = moment.tz(Date.now(), even).format(`[In ${speechCity}, it is] H:m:s [the] dddd DD MMMM`);\n            // Speaks the sentence\n            Avatar.speak(sentence, data.client);\n        } else {\n            // Speaks a default sentence if no timezone\n            Avatar.speak(`i'm sorry, i couldn't retrieve the ${speechCity} time`, data.client);\n        }\n    } catch (err) {\n            if (data.client) Avatar.Speech.end(data.client);\n            if (err.message) error(err.message);\n    }\n}\n</code></pre> <ul> <li>Red\u00e9marrez A.V.A.T.A.R dans le terminal</li> <li>Ex\u00e9cutez la r\u00e8gle <code>what time is it in new york</code></li> </ul> </li> </ol> Success <p>Le plugin <code>worldTime</code> vous donne l'heure pour les plus grandes villes du monde !</p>"},{"location":"time/#localiser-le-plugin","title":"Localiser le plugin","text":"<p>Nous pouvons maintenant ajouter la localisation des messages. Pour l'exemple, nous allons ajouter l'anglais et le fran\u00e7ais.</p> <ol> <li> <p>Cr\u00e9ez (ou modifiez) 2 pak de langues dans le r\u00e9pertoire locales comme ci-dessous en remplacant la variable city par un $$ (voir la fonction get)</p> en.pakfr.pak <pre><code>{\n    \"message\": {\n        \"time\":\"[in $$, it is] H:m:s [the] dddd MMMM DD\"\n    },\n    \"error\": {\n        \"notime\":\"i'm sorry, i couldn't retrieve the $$ time\"\n    }\n}\n</code></pre> <pre><code>{\n    \"message\": {\n        \"time\":\"[a $$, il est] H:m:s [le] dddd DD MMMM\"\n    },\n    \"error\": {\n        \"notime\":\"je suis d\u00e9sol\u00e9, je n'ai pas r\u00e9ussi \u00e0 r\u00e9cup\u00e9rer l'heure de $$\"\n    }\n}\n</code></pre> </li> <li> <p>Modifiez le fichier script pour le multi-langage</p> worldTime.js<pre><code>const get = (data) =&gt; {\n   try {\n        // Defines the city, NLP relation or default\n        const city = data.relations?.location?.text ? data.relations.location.text : Config.modules.worldTime.default.zone;\n        // Defines the city for the speech\n        const speechCity = city === Config.modules.worldTime.default.zone ? Config.modules.worldTime.default.speech : city;\n        // Updates chars in the city to be conform to timeZones\n        const location = city.replace(/ /gi,\"_\");\n        // Retreives timeZones\n        const timeZones = Intl.supportedValuesOf('timeZone');\n        // Searchs for the city in the timeZones table \n        let even = _.find(timeZones, item =&gt; { return item.toLowerCase().indexOf(`${location}`.toLowerCase()) !== -1; });\n        if (even) {\n            // even can be a string or a Array\n            even = typeof even === 'string' ? even : even[0];\n            // Defines the location (e.g. 'en' or 'fr') for a language-correct sentence.\n            moment.locale(data.language);\n            // Builds the sentence\n            const sentence = moment.tz(Date.now(), even).format(Locale.get([\"message.time\", speechCity]));\n            // Speaks the sentence\n            Avatar.speak(sentence, data.client);\n        } else {\n            // Speaks a default sentence if no timezone\n            Avatar.speak(Locale.get([\"error.notime\", speechCity]), data.client);\n        }\n    } catch (err) {\n            if (data.client) Avatar.Speech.end(data.client);\n            if (err.message) error(err.message);\n    }\n}\n</code></pre> </li> </ol>"},{"location":"time/#page-dinformation-du-plugin","title":"Page d'information du plugin","text":"<p>Nous pouvons maintenant ajouter une page d'information au format Markdown.  </p> Note <p>Le format Markdown est un format de cr\u00e9ation de page HTML avec un format d'\u00e9criture tr\u00e8s simple et qui ne n\u00e9cessite aucunes connaissances particuli\u00e8res en HTML. </p> <p>Cette document est r\u00e9alis\u00e9e avec Markdown et est aussi le format d'\u00e9criture adopt\u00e9 par GitHub Voir aussi le site mkdocs-material pour plus d'information</p> Rappel Nom de fichier Description <code>info.md</code> Si il n'existe pas de fichier <code>info_&lt;application language&gt;.md</code> alors ce fichier est utilis\u00e9 <code>info_&lt;application language&gt;.md</code> application language: Code court du langage de l'applicationSi ce fichier existe alors il est utilis\u00e9.Exemple: <code>info_en.md</code> <p>Pour l'exemple, nous allons ajouter l'anglais et le fran\u00e7ais.</p> <ol> <li> <p>Ouvrez un terminal et d\u00e9placez-vous dans le r\u00e9pertoire assets du plugin</p> <pre><code>cd &lt;A.V.A..T.A.R&gt;/resources/app/cores/plugin/worldTime/assets\n</code></pre> </li> <li> <p>Cr\u00e9ez 2 fichiers d'information au format Markdown pour l'anglais et le fran\u00e7ais comme ci-dessous</p> info_en.mdinfo_fr.md <pre><code># World time\n\n![worldTime](../../core/plugins/worldTime/assets/images/worldTime.png =100x*)\n\nWorld time lets you find out the time for all world's major cities.  \n\n## Rules\n\n### Default location\n- `what time is it`: Returns the time for the default location\n\n### Major world city\n- `what time is it in new york`: Returns the time for New York city\n- `in new york, what time is it`: Returns the time for New York city\n\n## Parameters\n* `default.zone`: The default city (the _timeZone_) if no city is in the rule\n* `default.speech`: The default city to speak if no city is in the rule\n\n## Adding a language\nYou can localize A.V.A.T.A.R speech by adding a language pack to the _WorldTime/locales_ folder, copying an existing pack and modifying the key values.\n</code></pre> <pre><code># World time\n\n![worldTime](../../core/plugins/worldTime/assets/images/worldTime.png =100x*)\n\nWorld time vous permet de conna\u00eetre l'heure pour toutes les grandes villes du monde. \n\n## R\u00e8gles\n\n### Emplacement par d\u00e9faut\n- `what time is it`: Retourne l'heure de l'emplacement par d\u00e9faut\n\n### Grande ville du monde\n- `what time is it in new york`: Retourne l'heure pour la ville de New York\n- `in new york, what time is it`: Retourne l'heure pour la ville de New York\n\n## Param\u00e8tres\n* `default.zone`: La ville par d\u00e9faut (la _timeZone_) si aucune ville n'est mentionn\u00e9e dans la r\u00e8gle\n* `default.speech`: La ville \u00e0 utiliser pour le dialogue d'A.V.A.T.A.R si aucune ville n'est mentionn\u00e9e dans la r\u00e8gle.\n\n## Ajouter un langage\nVous pouvez localiser le dialogue d'A.V.A.T.A.R en ajoutant un pack de langues dans le dossier _WorldTime/locales_, en copiant un pack existant et en modifiant les valeurs de cl\u00e9s.\n</code></pre> </li> <li> <p>Red\u00e9marrez A.V.A.T.A.R dans le terminal</p> </li> <li> <p>Afficher la page d'information du plugin dans Plugin studio</p> AnglaisFran\u00e7ais <p></p> <p></p> </li> <li> <p>Vous pouvez changer le langage de l'application pour v\u00e9rifier le r\u00e9sultat dans un autre langage</p> </li> </ol> <p>  IntroductionMeteo  </p>"},{"location":"tutorial-action/","title":"L'action","text":"<p>Ceci est la partie 6 du tutoriel</p> <p>Le fichier action est un pr\u00e9-traitement qui rassemble des informations puis appelle le fichier script du plugin.</p>"},{"location":"tutorial-action/#laction-basique","title":"L'action basique","text":"<p>Si l'intention est r\u00e9solue de mani\u00e8re satisfaisante, l'action propos\u00e9e par la cr\u00e9ation d'un plugin par Plugin Studio couvre g\u00e9n\u00e9ralement 90% des besoins.  </p> <ul> <li><code>Ligne 5</code>: Temporisation en milli-secondes pour ex\u00e9cuter le script (Propri\u00e9t\u00e9s synchronisation des actions, par d\u00e9faut 0).</li> <li><code>Ligne 7</code>: Ajout de <code>module</code> dans <code>state.action</code>.</li> <li><code>Ligne 8</code>: Ajout de <code>command</code> dans <code>state.action</code>.</li> <li><code>Ligne 10</code>: Appel du script associ\u00e9 avec en param\u00e8tre l'objet <code>state</code>.</li> </ul> <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js'\n\nexport default function (state) {\n    return new Promise((resolve) =&gt; {\n        setTimeout(() =&gt; { \n            state.action = {\n                module: 'myFirstPlugin',\n                command: state.rule\n            };\n            resolve(state);\n        }, Config.waitAction.time);\n    });\n};\n</code></pre>"},{"location":"tutorial-action/#laction-personnalisee","title":"L'action personnalis\u00e9e","text":"<p>Les valeurs possibles de <code>state.action</code>:</p> Object Type Obligatoire Description <code>module</code> string non Le nom du plugin \u00e0 appeler.Si <code>module</code> n'est pas d\u00e9fini:- <code>tts</code> doit \u00eatre pr\u00e9sent.- Le fichier script doit \u00eatre pr\u00e9sent mais ne sera pas ex\u00e9cut\u00e9. <code>command</code> string non La m\u00e9thode \u00e0 ex\u00e9cuter.La valeur <code>module</code>doit \u00eatre pr\u00e9sente. <code>tts</code> stringouarray non Une phrase ou un tableau de phrases (dont une sera choisie al\u00e9atoirement) qu'A.V.A.T.A.R va prononcer avant d'appeler le script. <code>end</code> boolean non <code>true</code> par d\u00e9faut.<code>true</code>: Apr\u00e8s avoir prononc\u00e9 la phrase <code>tts</code>, l'\u00e9coute sur le client est restitu\u00e9e.<code>false</code>: Apr\u00e8s avoir prononc\u00e9 la phrase <code>tts</code>, l'\u00e9coute sur le client n'est pas restitu\u00e9e. <p>La mise en forme d'une action n'est pas fig\u00e9e. C'est vous qui choisissez en fonction de la complexit\u00e9 de votre projet. Il est tout \u00e0 fait possible d'ex\u00e9cuter un pr\u00e9-traitement avant l'appel du script, voir tout faire dans le fichier action, comme dans l'exemple d'un petit plugin <code>time</code> ci-dessous dans lequel il faut juste faire prononcer l'heure \u00e0 A.V.A.T.A.R.</p> ActionScript <pre><code>import moment from 'moment'\nimport * as _helpers from '../../ia/node_modules/ava-ia/helpers/index.js'\n\n/** \n * basic location of messages\n * not a good way, this is just for the example\n * prefer language.pak files for the location messages\n * @private\n */\nconst msg = {\n    'en':  {\n        'sentence': 'it is',\n        'hour': 'hour'\n    },\n    'fr': { \n        'sentence': 'il est',\n        'hour': 'heure'\n    }\n}\n\n/** \n * @private\n * @param {string} lang - short language code\n * @return {object} messages\n */\nfunction getValues (lang) {\n    return { ...msg[lang] }\n}\n\nexport default function (state) {\n    return new Promise(async (resolve) =&gt; {\n        moment.locale(Config.language)\n        const tts = getValues(Config.language)\n        const hour = moment().format(`[${tts.sentence}] H [${tts.hour}] m`)\n\n        setTimeout(() =&gt; {\n            state.action = {\n                tts: hour,\n                end: true\n            }\n            resolve(state);\n        }, Config.waitAction.time)\n    });\n};\n</code></pre> <pre><code>export function action (data, callback) {\n    callback()\n}\n</code></pre> <p>  L'intentionLe script  </p>"},{"location":"tutorial-create-plugin/","title":"Create a plugin","text":"<p>The application allows you to create a plugin automatically via the Plugin Studio interface. Although this is not essential for advanced users, we strongly advise you to always use it to have file templates directly in the right format and including the methods and properties useful for your development.</p> <p>In addition to the server, plugins can be added to each A.V.A.T.A.R. client. A client plugin is generally used to perform client-specific actions that cannot be performed with APIs from a server plugin, or to add button wigdets to the client interface.</p> Note <p>it is not possible to create a plugin in a client's Plugin Studio window.</p> <p>To create a plugin for a client :</p> <ol> <li>Create the plugin via the server's Plugin Studio</li> <li>Then copy the plugin to the client plugins folder</li> </ol> <ol> <li>In the server interface, left-click on the server node</li> <li>Menu Edit -&gt; Plugin Studio</li> <li>Left-click to open the Plugin tab</li> <li>Click on Create a Plugin to open the plugin creation window.</li> </ol>"},{"location":"tutorial-create-plugin/#step-1-general-information","title":"Step 1 - General information","text":"<ul> <li><code>Enter a name</code> (required):<ul> <li>For the exercise, enter myFirstPlugin</li> </ul> </li> <li><code>Enter a display label</code> (optional):<ul> <li>For the exercise, enter my first plugin</li> </ul> </li> </ul> <ul> <li>Click on Next</li> </ul>"},{"location":"tutorial-create-plugin/#step-2-the-intent","title":"Step 2 - The intent","text":"<p>Intent allows to check whether the sentence you are speaking validates a voice rule defined for the plugin.</p> <ul> <li><code>The plugin has voice rules?</code><ul> <li>Voice rules are not mandatory for a plugin. For example, a plugin can manage automations or actions on peripherals directly without voice rules.</li> <li>For the exercise, choose Yes.</li> </ul> </li> <li><code>How are plugin rules checked?</code><ul> <li>There are two ways to check a speech rule:<ul> <li>By the syntax of the sentence </li> <li>By a term in the sentence</li> </ul> </li> <li>For the exercise, choose By sentence syntax.</li> </ul> </li> </ul> Warning <p>Be careful with the choice of a term in the sentence, which can easily be duplicated by other rules in other plugins.</p> <p></p> <ul> <li>Click on Next</li> </ul>"},{"location":"tutorial-create-plugin/#step-3-the-script","title":"Step 3 - The script","text":"<p>The script is the entry point for developing a plugin. This step allows you to automatically add methods that interact with the application when necessary. </p> <p></p> <ul> <li>For the exercise, choose init(), Language localization methods annd cron()</li> <li>Click on Next</li> </ul>"},{"location":"tutorial-create-plugin/#step-4-image-and-documentation","title":"Step 4 - Image and documentation","text":"<ul> <li><code>Image</code> - Choose an image in <code>png</code> format to be displayed for the plugin. An image is added by default if no image is selected.</li> <li><code>Documentation</code> - The Information tab in Plugin Studio is available for displaying information about the plugin. In some cases, it may be preferable to create html documentation accessible via a browser. If the documentation requires an HTTP server, the A.V.A.T.A.R. server can be used as the documentation server.</li> </ul> Note <p>To access a plugin's documentation, open the plugins tab, then left-click on the plugin. If the plugin is not the current one, the tab will close, so try again to display its contextual menu. If the plugin has documentation, the Documentation menu will appear.</p> <p></p> <ul> <li>Click on select then move to the assets/images/pluginCreation folder</li> <li>Select the myFirstPlugin image<ul> <li>This image is an example; you can choose any <code>png</code> image from any directory. The image will be copied and renamed in the plugin's images folder. </li> </ul> </li> <li>Click on yes for HTML documentation.<ul> <li>Add a index.html start page.</li> <li>Click on the \u201cDocumentation server\u201d checkbox.</li> </ul> </li> <li>click on Next</li> </ul>"},{"location":"tutorial-create-plugin/#step-5-summary","title":"Step 5 - Summary","text":"<ul> <li>View the creation information, then click on Create</li> </ul>"},{"location":"tutorial-create-plugin/#step-6-creation","title":"Step 6 - Creation","text":"<ul> <li>The myFirstPlugin plugin information page is displayed</li> <li>Open the plugins tab, My first plugin has been added</li> </ul> <ul> <li>Click on the Properties tab to view the plugin's properties</li> </ul> <ul> <li>Click on the plugin to open its menu and click on documentation</li> </ul> <ul> <li>Close the Plugin Studio window</li> </ul> <p>Details of the files created for the myFirstPlugin project:</p> intent.myFirstPlugin.jsaction.myFirstPlugin.jsmyFirstPlugin.jsmyFirstPlugin.proppackage.jsonlocales\\&lt;lang&gt;.pakdocumentation\\index.html <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js';\n\nexport default async function (state, actions) {\n    if (state.isIntent) return (0, _helpers.resolve)(state);\n\n    for (var rule in Config.modules.myFirstPlugin.rules) {   \n        var match = (0, _helpers.syntax)(state.sentence, Config.modules.myFirstPlugin.rules[rule]);     \n        if (match) break;\n    }\n\n    if (match) {\n        state.isIntent = true;\n        state.rule = rule;\n        return (0, _helpers.factoryActions)(state, actions);\n    } else \n        return (0, _helpers.resolve)(state); \n};\n</code></pre> <p> The intention file is explained in detail in part 5 of the tutorial: The intention :</p> <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js'\n\nexport default function (state) {\n    return new Promise((resolve) =&gt; {\n        setTimeout(() =&gt; { \n            state.action = {\n                module: 'myFirstPlugin',\n                command: state.rule\n            };\n            resolve(state);\n        }, Config.waitAction.time);\n    });\n};\n</code></pre> <p> The action file is explained in detail in part 6 of the tutorial: The action</p> <ul> <li><p><code>Line 7</code>: The <code>init()</code> method executed when the plugin is loaded</p></li> <li><p><code>Line 8</code>: Loads pack of the localized messages</p></li> <li><p><code>Line 13</code>: The <code>cron()</code> function for executing tasks at regular intervals</p></li> <li><p><code>Line 17</code>: The <code>action()</code> function is the entry point for all plugin actions</p></li> <li><p><code>Line 20</code>: Searchs for localized messages for the client language</p></li> <li><p><code>Ligne 45</code>: The <code>test()</code> function is the generic private test function added when the plugin was created. It must then be deleted.</p></li> </ul> <pre><code>import * as path from 'node:path';\nimport * as url from 'url';\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\n\nlet Locale;\n\nexport async function init() {\n    if (!await Avatar.lang.addPluginPak(\"myFirstPlugin\")) {\n        return error('myFirstPlugin: unable to load language pak files');\n    }   \n}\n\nexport async function cron () {\n    // Do stuff\n}\n\nexport async function action(data, callback) {\n\n    try {\n        Locale = await Avatar.lang.getPak(\"myFirstPlugin\", data.language);\n        if (!Locale) {\n            throw new Error (`myFirstPlugin: Unable to find the '${data.language}' language pak.`);\n        }\n\n        // Table of actions\n        const tblActions = {\n            // test (see rules table in the property file)\n            test : () =&gt; test(data.client)                  \n        }\n\n        // Writes info console\n        info(\"myFirstPlugin:\", data.action.command, L.get(\"plugin.from\"), data.client);\n\n        // Calls the function that should be run\n        tblActions[data.action.command]();\n    } catch (err) {\n        if (data.client) Avatar.Speech.end(data.client);\n        if (err.message) error(err.message);\n    }   \n\n    callback();\n\n}\n\nconst test = (client) =&gt; {\n\n    Avatar.speak(Locale.get([\"message.test\", client]), client);\n\n}   \n</code></pre> <p> The script file is explained in detail in part 7 of the tutorial: The script</p> <p><p>The plugin properties file including:</p></p> <ul> <li><p><code>Ligne 3</code>: A required <code>modules</code>.<code>myFirstPlugin</code> object containing all plugin properties</p></li> <li><p><code>Ligne 6</code>: A <code>modules</code>.<code>myFirstPlugin</code>.<code>rules</code> object with which intent is checked in the <code>intent.myFirstPlugin.js</code> file</p></li> <li><p><code>Ligne 11</code>: A <code>cron</code> object as requested when creating the myFirstPlugin plugin and defining the execution interval of the <code>cron()</code> function in the <code>myFirstPlugin.js</code> file. Default is every 2 hours</p></li> </ul> <pre><code>{\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"My first plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    },\n    \"cron\": {\n        \"myFirstPlugin\": { \n            \"name\": \"myFirstPlugin\",\n            \"time\": \"0 * */2 * * *\"\n        }\n    }\n}\n</code></pre> <p><p>The <code>package.json</code> file is not mandatory, the plugin can work just fine without it.However, this configuration file is preferable if you are adding <code>npm</code> modules to the plugin</p></p> <p><p>Modify section values as required</p></p> <pre><code>{\n    \"name\": \"myFirstPlugin\",\n    \"version\": \"1.0.0\",\n    \"type\": \"module\",\n    \"description\": \"Plugin myFirstPlugin for A.V.A.T.A.R\",\n    \"repository\": \"https://github.com/YOUR-REPOSITORY\",\n    \"keywords\": [\n        \"myFirstPlugin\"\n    ],\n    \"author\": \"YOUR-NAME\",\n    \"license\": \"mit\"\n}\n</code></pre> <p><p>This file has been created as an example and needs to be completed. It contains main objects (here \u201cmessage\u201d) grouping by category the messages you wish to add in &lt;key&gt;:&lt;value&gt;</p> <p>Use the function <code>Locale.get(\u201cmessage.first\u201d)</code> to retrieve the value</p></p> <pre><code>{\n    \"message\": {\n        \"first\":\"i am testing the command for $$\"\n    }\n}\n</code></pre> <p><p>The documentation start page defined in the documentation.ini file. This file has been created as an example and must be modified</p></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;myFirstPlugin documentation&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorial-create-plugin/#test-the-plugin","title":"Test the plugin","text":"<p>A.V.A.T.A.R is updated with the new plugin without needing to restart. You can view the plugin loading in the console if show all information option is active. </p> <p>say the rule to test the plugin:</p> <ul> <li>Rule: <code>test the command</code></li> </ul> <p>  PrerequisitesFolders and files  </p>"},{"location":"tutorial-intention/","title":"The intent","text":"<p>Comme nous avons commenc\u00e9 \u00e0 l'aborder dans les chapitres pr\u00e9c\u00e9dents, pour valider une r\u00e8gle vocale A.V.A.T.A.R utilise des intentions et des actions qui sont des fonctions simples qui re\u00e7oivent un \u00e9tat et le renvoient avec une composition interne.</p> <ul> <li><code>Intention</code>: La fonction que vous souhaitez attacher \u00e0 une phrase.</li> <li><code>Action</code>: Une fonction d'action qui sera appel\u00e9e si l'intention est r\u00e9solue de mani\u00e8re satisfaisante.</li> </ul> <p>Nous pouvons nous le repr\u00e9senter graphiquement comme ceci:</p> <pre><code>graph LR\n  A[Phrase]\n  A --&gt; B{NLP};\n  B --&gt; C[Intention&lt;br&gt;plugin 1];\n  B --&gt; L[Intention&lt;br&gt;plugin x...];\n  C --&gt; F{r\u00e9solu ?};\n  F --&gt; |Oui| G[Action&lt;br&gt;plugin 1]; \n  F --&gt; |Non| I[Sortie]; \n  H[Propri\u00e9t\u00e9s&lt;br&gt;plugin 1] --&gt; C;\n  G --&gt; J[Fichier Script&lt;br&gt;plugin 1];\n  H --&gt; G;\n  H --&gt; J;\n  J --&gt; K[Methode action];</code></pre>"},{"location":"tutorial-intention/#les-methodes-de-resolution","title":"Les m\u00e9thodes de r\u00e9solution","text":""},{"location":"tutorial-intention/#par-la-syntaxe-de-la-phrase","title":"Par la syntaxe de la phrase","text":""},{"location":"tutorial-intention/#helperssyntaxsentence-terms","title":"<code>helpers.syntax(sentence, terms)</code>","text":"<ul> <li><code>sentence</code> string - La phrase <code>state.sentence</code> (en anglais).</li> <li><code>terms</code> array - Collection de termes (en anglais) </li> </ul> <p>Si un des termes est valid\u00e9 alors l'intention est r\u00e9solue. </p> intent.&lt;plugin&gt;.js&lt;plugin&gt;.prop <ul> <li><code>Ligne 6</code>: Boucle sur les tableaux de termes de l'objet <code>rules</code></li> <li><code>Ligne 7</code>: Si la syntaxe est valid\u00e9e, sortie de la boucle</li> <li><code>Ligne 13</code>: Ajout de <code>rule</code> dans l'objet <code>state</code></li> <li><code>ligne 14</code>: Appel de l'action associ\u00e9</li> </ul> <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js'\n\nexport default async function (state, actions) {\n    if (state.isIntent) return (0, _helpers.resolve)(state)\n\n    for (var rule in Config.modules.myFirstPlugin.rules) {   \n        var match = (0, _helpers.syntax)(state.sentence, Config.modules.myFirstPlugin.rules[rule])\n        if (match) break\n    }\n\n    if (match) {\n        state.isIntent = true\n        state.rule = rule\n        return (0, _helpers.factoryActions)(state, actions)\n    } else \n        return (0, _helpers.resolve)(state)\n};\n</code></pre> <pre><code>{\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"My first plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"tutorial-intention/#par-un-terme-dans-la-phrase","title":"Par un terme dans la phrase","text":""},{"location":"tutorial-intention/#helpersintersectterms-tokens","title":"<code>helpers.intersect(terms, tokens)</code>","text":"<ul> <li><code>terms</code> array - Collection de termes.</li> <li><code>tokens</code> array - Les tokens de la phrase <code>state.sentence</code> (en anglais).</li> </ul> <p>Si un des tokens est valid\u00e9 alors l'intention est r\u00e9solue. </p> intent.&lt;plugin&gt;.js&lt;plugin&gt;.prop <ul> <li><code>Ligne 6</code>: Boucle sur les tableaux des tokens de l'objet <code>rules</code></li> <li><code>Ligne 7</code>: Si un token est valid\u00e9, sortie de la boucle</li> <li><code>Ligne 12</code>: Ajout de <code>rule</code> dans l'objet <code>state</code></li> <li><code>ligne 13</code>: Appel de l'action associ\u00e9</li> </ul> <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js'\n\nexport default async function (state, actions) {\n    if (state.isIntent) return (0, _helpers.resolve)(state)\n\n    for (var rule in Config.modules.myFirstPlugin.rules) {   \n      var match = (0, _helpers.intersect)(Config.modules.myFirstPlugin.rules[rule], state.tokens) \n      if (match) break\n    }\n\n    if (match) {\n        state.isIntent = true\n        state.rule = rule\n        return (0, _helpers.factoryActions)(state, actions)\n    }  else \n        return (0, _helpers.resolve)(state)\n};\n</code></pre> <pre><code>{\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"My first plugin\",\n            \"rules\": {\n                \"test\": [\"1\", \"one\"]\n            }\n        }\n    }\n}\n</code></pre> Info <p>Le tableau <code>state.tokens</code> est compos\u00e9 automatiquement avec la phrase (en anglais) avant l'appel de l'intention (voir le chapitre pr\u00e9c\u00e9dent)</p> <p>Pour la phrase \"what time is it\",  l'objet <code>state.tokens</code> est :</p> <pre><code>state.tokens: [ 'what', 'time', 'is', 'it' ]\n</code></pre>"},{"location":"tutorial-intention/#lintention-simple","title":"L'intention simple","text":"<p>La validation de l'intention propos\u00e9e par la cr\u00e9ation automatique d'un plugin par Plugin Studio est une r\u00e9solution simple de la phrase dans les tableaux de l'objet <code>rules</code> du fichier de propri\u00e9t\u00e9s du plugin. Cette validation couvre g\u00e9n\u00e9ralement 90% des besoins.</p>"},{"location":"tutorial-intention/#lintention-personnalisee","title":"L'intention personnalis\u00e9e","text":"<p>La mise en forme d'une intention n'est pas fig\u00e9e. C'est vous qui choisissez en fonction de ce que vous voulez r\u00e9aliser. Par exemple, un tableau d'objet peut renvoyer vers un autre tableau d'objet du fichier de propri\u00e9t\u00e9s de votre plugin o\u00f9 sont d\u00e9finis les r\u00e8gles et des propri\u00e9t\u00e9s n\u00e9cessaires \u00e0 l'ex\u00e9cution de l'action.</p> <p>Voici un exemple de r\u00e9solution d'une intention l\u00e9g\u00e8rement plus complexe pour un projet de domotique. Supposons que nous voulons r\u00e9cup\u00e9rer toutes les informations n\u00e9cessaires \u00e0 une action en validant une phrase qui peut \u00eatre identique \u00e0 plusieurs p\u00e9riph\u00e9riques avec les phrases suivantes :</p> <pre><code>- allume|\u00e9teint la lumi\u00e8re dans le Salon\n- allume|\u00e9teint la lumi\u00e8re dans la cuisine\n</code></pre> <p>Nous pouvons comprendre que l'ID du p\u00e9riph\u00e9rique est diff\u00e9rent en fonction de chaque pi\u00e8ce et la valeur \u00e0 passer au p\u00e9riph\u00e9rique pour l'action aussi, ce qui donne: </p> <pre><code>- ID Salon: 1151500\n- ID Cuisine: 2664444\n- valeur Off: 0\n- valeur On: 100\n</code></pre> <p>Nous pouvons d\u00e9finir le diagramme simplifi\u00e9 suivant pour l'exemple (phrase traduite en anglais) switch on the light in the Lounge:</p> <pre><code>graph LR\n  A[Sentence]\n  A --&gt; B[for&lt;br&gt;intents&lt;br&gt;objects];\n  B --&gt; |key1: switch| J[for&lt;br&gt;ruleGroups.key1.value];\n  B --&gt; |key1: temperature| J;\n  B --&gt; |key1: tv| J;\n  J --&gt; |value1: Lounge switch| C[for&lt;br&gt;ruleGroups.key1];\n  J --&gt; |value1: Kitchen switch| C;\n  C --&gt; |key2: 0| F{resolve ?};\n  F --&gt; |no| I[none]\n  C --&gt; |key2: 100| G{resolve ?};\n  G --&gt; |yes| H[state.command = ruleGroups.key1.command&lt;br&gt;state.value = ruleGroups.key1.key2&lt;br&gt;state.answer=ruleGroups.key1.answer&lt;br&gt;state.periph=clients''clientTo''.value1];</code></pre> <p>Prenons le temps d'\u00e9tudier le diagramme en association avec les fichiers intent.&lt;plugin&gt;.js et &lt;plugin&gt;.prop:</p> intent.&lt;plugin&gt;.js&lt;plugin&gt;.prop <pre><code>var match, command, type, value, periph, answer\nvar tbl = Config.modules.myFirstPlugin.intents\n\n// Searches for the room for which the rule is executed\n// - sentence: switch on the light in the Lounge\n// - return: Lounge\nconst clientTo = Avatar.Socket.currentClient(state.client, state.rawSentence)\n\nfor (var i=0 ; i &lt; tbl.length &amp;&amp; !match; i++) {\n  for (value in Config.modules.myFirstPlugin.ruleGroups[tbl[i]]) {\n    if (value !== 'command' &amp;&amp; value !== 'answer') {\n\n      match = (0, _helpers.syntax)(state.sentence, Config.modules.myFirstPlugin.ruleGroups[tbl[i]][value])\n\n      if (match) {\n          command = Config.modules.myFirstPlugin.ruleGroups[tbl[i]].command \n          ? Config.modules.myFirstPlugin.ruleGroups[tbl[i]].command \n          : false\n\n          answer = Config.modules.myFirstPlugin.ruleGroups[tbl[i]].answer \n          ? Config.modules.myFirstPlugin.ruleGroups[tbl[i]].answer \n          : false\n\n          type = tbl[i]\n          _.map(Config.modules.myFirstPlugin.intents[type], num =&gt; { \n            if (Config.modules.myFirstPlugin.clients[clientTo][num]) {\n              periph = Config.modules.myFirstPlugin.clients[clientTo][num]\n            }   \n          })\n          break;\n      }\n    }\n  }\n}\n\nif (match) {\n    state.isIntent = true\n    state.command = command\n    state.periph = periph ? periph : false\n    state.value = value ? value : false\n    state.answer = answer ? answer : false\n    return (0, _helpers.factoryActions)(state, actions)\n} else \n    return (0, _helpers.resolve)(state)\n</code></pre> <pre><code>{\n  \"modules\":{\n    \"myFirstPlugin\":{\n      \"name\":\"myFirstPlugin\",\n      \"ruleGroups\":{\n        \"switch\":{\n          \"0\":[\"turn off * light\",\"extins * light\"],\n          \"100\":[\"turn on * light\",\"light * light\"],\n          \"command\":\"set\",\n          \"answer\":\"magic!\"\n        },\n        \"temperature\":{\n          \"command\":\"get\",\n          \"get\":[\"give * temperature\"]\n        },\n        \"tv\":{\n          \"0\":[\"turn off * tv\",\"off * tv\",\"tv * off\"],\n          \"100\":[\"turn on * tv\",\"turne on * tv\"],\n          \"command\":\"set\"\n        }\n      },\n      \"clients\":{\n        \"Lounge\":{\n          \"Lounge switch\":\"1151500\",\n          \"Temperature Lounge\":\"152764\",\n          \"Lounge TV jack\":\"1982673\",\n        },\n        \"Kitchen\":{\n          \"Kitchen switch\":\"2664444\"\n        },\n        \"Bedroom\":{\n          \"Bedroom TV jack\":\"483087\"\n        }\n      },\n      \"intents\":{\n        \"switch\":[\"Lounge switch\",\"Kitchen switch\"],\n        \"temperature\":[\"Temperature Lounge\"],\n        \"tv\":[\"Lounge TV jack\",\"Bedroom TV jack\"]\n      }\n    }\n  }\n}\n</code></pre> <p> Nous pouvons voir que dans cet exemple que l'intention est v\u00e9rifi\u00e9e et que plusieurs valeurs en relation sont r\u00e9cup\u00e9r\u00e9es et ajout\u00e9es \u00e0 l'objet <code>state</code></p>"},{"location":"tutorial-intention/#que-faut-il-retenir","title":"Que faut-il retenir ?","text":"<ol> <li>Choisissez bien le type d'intention que vous voulez pour votre plugin. Sauf cas sp\u00e9cifique, la validation par la syntaxe de la phrase est la plus utilis\u00e9e.</li> <li>Rien n'est fig\u00e9. Vous pouvez modifier le fichier intent.myFirstPlugin.js comme vous voulez. L'important est de valider l'intention !</li> </ol> <p>  Traitement Naturel du LangageL'action  </p>"},{"location":"tutorial-nlp/","title":"Natural Language Processing","text":"<p>A.V.A.T.A.R incorporates a modest but functional Natural Language Processing (NLP).  </p> <p>This step is automatic and internal to A.V.A.TA.R. It is called before checking the intent file of the plugins.</p>"},{"location":"tutorial-nlp/#example","title":"Example","text":"<p>If the sentence is :</p> <pre><code>Make a 1 hour appointment with the dentist tomorrow at 2:00 p.m. in Paris\n</code></pre> <p>A.V.A.T.A.R will analyze the sentence and create a relationship scenario, then suggest :</p> <ul> <li>Action: <code>make</code></li> <li>Object: <code>appointment</code></li> <li>Duration: <code>1 hour</code></li> <li>Item: <code>dentist</code></li> <li>When: <code>June 25th 2024 2:00 pm</code></li> <li>Location: <code>paris</code></li> </ul> <p>If the intention is verified, the <code>data</code> object accessible in the plugin script will receive the relationship scenario that NLP has built, which you can then use to, for example, create an appointment in your agenda.</p> <pre><code>Set an appointment in phone's calendar like: ${Object} ${Item} in ${Location} on ${When} of ${Duration}\n</code></pre>"},{"location":"tutorial-nlp/#objects","title":"Objects","text":"<p>Below are the objects created by NLP that you can use in the <code>data</code> object parameter of the <code>action</code> method in the script file. </p>"},{"location":"tutorial-nlp/#datatokens-array","title":"data.tokens - Array","text":"<p>Array of words of the sentence.</p> <pre><code>data.tokens: [\n    'make',        'a',\n    '1',           'hour',\n    'appointment', 'with',\n    'the',         'dentist',\n    'tomorrow',    'at',\n    '2:00',        'pm',\n    'in',          'paris'\n  ]\n</code></pre>"},{"location":"tutorial-nlp/#datatags-array","title":"data.tags - Array","text":"<p>Array of word types of the sentence.</p> <pre><code>tags: [\n    'Imperative',  'Determiner',\n    'Date',        'Singular',\n    'Noun',        'Preposition',\n    'Determiner',  'Singular',\n    'Date',        'Time',\n    'Time',        'Time',\n    'Preposition', 'City'\n  ]\n</code></pre> <p>You can consult the complete list of possible tags here </p> Warning <p>As tags are the types of each word, the <code>tokens</code> and <code>tags</code> arrays must have identical lengths. </p> <p>If this is not the case, the intention is not resolved. This is usually due to a compound word, which must then be correctly written into the collection of terms to correct the problem.</p>"},{"location":"tutorial-nlp/#datarelations-object","title":"data.relations - Object","text":"<p>The relationship scenario</p> <pre><code>relations: {\n    action: { \n        verb: { \n            tense: 'verb', \n            negative: false \n        }, \n        tag: 'verb', \n        text: 'make' \n    },\n    duration: { \n        tag: 'duration', \n        text: '1 hour' \n    },\n    object: { \n        tag: 'noun', \n        text: 'appointment' \n    },\n    item: { \n        tag: 'noun', \n        text: 'dentist' \n    },\n    when: { \n        info:  {\n            start: '2024-06-25T14:00:00.000+02:00',\n            timezone: 'Europe/Paris'\n        }, \n        tag: 'date', \n        text: 'June 25th 2024 2:00 pm' \n    },\n    location: { \n        tag: 'city', \n        text: 'paris' \n    }\n}\n</code></pre> <p>  Folders and FilesThe intent  </p>"},{"location":"tutorial-packager/","title":"Packager","text":"<p>Ceci est la partie 9 du tutoriel</p>"},{"location":"tutorial-plugin-folders-files/","title":"Folders and files","text":""},{"location":"tutorial-plugin-folders-files/#folders","title":"Folders","text":"<p>When launched, the application searches for plugins in the following folder:</p> <pre><code>A.V.A.T.A.R\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n            \u251c\u2500\u2500 core\n                \u251c\u2500\u2500 plugins\n</code></pre> ServerClient Folder Autocreation(1) Mandatory Description <code>assets</code> yes yes Includes:- The mandatory information file <code>\u00ecnfos.md</code> or <code>infos_&lt;application language&gt;.md</code> in Markdown format appearing in the plugin's <code>\u00ccnformation</code> tab in Plugin Studio. This file must be modified to add the information required to use the plugin.- A non-mandatory <code>images</code> folder for plugin images. A creation by Wigdet Studio stores the image file <code>&lt;myPlugin&gt;.png</code>. If the <code>images</code> folder does not exist, a default image is displayed. <code>documentation</code> yes no Includes:- The <code>documentation.ini</code> documentation configuration file.- Place any html documentation you can create in this folder. <code>locales</code> yes no If you're locating plugin messages, create your <code>&lt;lang&gt;.pak</code> files to this folder.Creation by Wigdet Studio automatically deposits a <code>&lt;lang&gt;.pak</code> file for the current language. <code>node_modules</code> no no Folder automatically created if you add npm modules to your plugin. <code>...</code> N/A no Any other folder useful to your plugin. <p>(1) Folder created automatically if you use Plugin Studio to create the plugin</p> Folder Mandatory Description <code>assets</code> yes Includes:- The mandatory information file <code>\u00ecnfos.md</code> or <code>infos_&lt;application language&gt;.md</code> in Markdown format appearing in the plugin's <code>\u00ccnformation</code> tab in Plugin Studio. This file must be modified to add the information required to use the plugin.- A non-mandatory <code>images</code> folder for plugin images. A creation by Wigdet Studio stores the image file <code>&lt;myPlugin&gt;.png</code>. If the <code>images</code> folder does not exist, a default image is displayed. <code>locales</code> no If you're locating plugin messages, create your <code>&lt;lang&gt;.pak</code> files to this folder. <code>node_modules</code> no Folder automatically created if you add npm modules to your plugin. <code>...</code> no Any other folder useful to your plugin. Note <p>If you decide to create the folders yourself (whether mandatory or not), use the same writing convention.</p>"},{"location":"tutorial-plugin-folders-files/#files","title":"Files","text":"ServerClient Type File Autocreation(1) Mandatory Description Intent <code>intent.&lt;plugin&gt;.js</code> yes no Intent allows to check whether the sentence you are speaking validates a voice rule defined for the plugin <code>intents.&lt;name&gt;.js</code> no no It is possible to have several intent files. For example, if you want to break down the check into several files.Let's take the example of a TV plugin that has 2 intents files, one for TV channel rules and another for controls (volume, on/off, etc.), , the intents files will be:- intents.tvChannels.js- intents.tvCommands.js Action <code>action.&lt;plugin&gt;.js</code> yes no If the sentence is verified by the intent file and validates a voice rule, then the associated action file is called.The action file is a pre-processor that gathers information sent by the intent file and calls the plugin's script file <code>actions.&lt;name&gt;.js</code> no no If you have chosen to have multiple intent files, then there must be the same number of actions files.Let's take the same example of a TV plugin (see above) that has 2 intents files, one for TV channel rules and another for controls (volume, on/off, etc.), the actions files will be:- actions.tvChannels.js- actions.tvCommands.js Script <code>&lt;plugin&gt;.js</code> yes yes Main script file in which the plugin is developed Properties <code>&lt;plugin&gt;.prop</code> yes yes The plugin properties file in <code>json</code> format Package <code>package.json</code> yes no <code>npm</code> package control file Language <code>locales/&lt;lang&gt;.pak</code> yes no Language localization file Information <code>assets/infos.md</code>or <code>infos_&lt;application language&gt;.md</code> yes yes Information file in Markdown format to be displayed on the plugin information page in Plugin Studio.application language: Short code of the application languageIf this file exists, it is used otherwise <code>info.md</code> is used Image <code>assets/&lt;plugin&gt;.png</code> yes no Plugin image file in <code>.png</code> format ... <code>...</code> N/A no Any other file useful to your plugin <p>(1) File created automatically if you use Plugin Studio to create the plugin</p> Type File Mandatory Description Script <code>&lt;plugin&gt;.js</code> yes Main script file in which the plugin is developed Properties <code>&lt;plugin&gt;.prop</code> yes The plugin properties file in <code>json</code> format Package <code>package.json</code> no <code>npm</code> package control file Language <code>locales/&lt;lang&gt;.pak</code> no Language localization file Information <code>assets/infos.md</code>or <code>infos_&lt;application language&gt;.md</code> yes Information file in Markdown format to be displayed on the plugin information page in Plugin Studio.application language: Short code of the application languageIf this file exists, it is used otherwise <code>info.md</code> is used Image <code>assets/&lt;plugin&gt;.png</code> no Plugin image file in <code>.png</code> format ... <code>...</code> no Any other file useful to your plugin <p>  Create a pluginNatural Language Processing  </p>"},{"location":"tutorial-prerequisites/","title":"Prerequisites","text":""},{"location":"tutorial-prerequisites/#goals","title":"Goals","text":"<p>This tutorial will guide you through the development process. The examples and the documentation for the server API and client API are also interesting chapters for learning how to develop a plugin.</p>"},{"location":"tutorial-prerequisites/#assumptions","title":"Assumptions","text":"<p>A plugin is an A.V.A.TA.R overlay running in a Node.js environment. Therefore, developing a plugin assumes that you are completely familiar with Node, npm, javascript and the basics of front-end web development. If you need to do some preliminary reading on the subject before getting started, we recommend the following resources:</p> <ul> <li>First steps on the Web (MDN Web Docs)</li> <li>Introduction to Node.js</li> </ul>"},{"location":"tutorial-prerequisites/#good-pratices","title":"Good pratices","text":"<p>It is preferable to have a development orientation before creating a plugin, which will be either:</p> <ul> <li>For personal use</li> <li>Added to the A.V.A.T.A.R library for public use</li> </ul> <p>If it's a personal decision, you'll be the only one using it, so you can ignore this paragraph. On the other hand, if you choose to share your plugins with the community, you'll need to respect certain conventions:</p> <ul> <li>Localize the plugin: A.V.A.T.A.R is multi-language, so localize at least the current language to allow translation of an existing language pack if necessary.</li> <li> <p>Add documentation: This part is always overlooked, but it's essential for using the plugin. Depending on the complexity of the documentation, you can choose between :</p> <ul> <li>Add an information page in Markdown format, which will be displayed in the plugin information page in Plugin Studio.</li> <li>Add an HTML document that can be displayed in a web browser.</li> </ul> <p>Note that in both cases, it is preferable to write in English.</p> </li> <li> <p>Think multi-room: A.V.A.T.A.R is a client-server application, so make sure that the plugin is always functional even if the client is not installed on the same plateform as the server.</p> <ul> <li>For example, a classic mistake is to use the server's <code>ffplay</code> application when the music is to be played on a client.</li> </ul> </li> <li>Think multiplatform: A.V.A.T.A.R runs on Windows, Linux and MacOS platforms. There are some peculiarities between systems, so always check that the specific conditions for each platform are respected if specific applications are to be used. If you don't know whether the plugin works on a particular platform, please note this in the documentation.</li> </ul>"},{"location":"tutorial-prerequisites/#required-tools","title":"Required tools","text":""},{"location":"tutorial-prerequisites/#code-editor","title":"Code editor","text":"<p>You will need a text editor to write your code. We recommend using Visual Studio Code, although you can choose whichever one you prefer.</p>"},{"location":"tutorial-prerequisites/#github","title":"GitHub","text":"<p>GitHub is a collaborative development platform built on Git. While neither is strictly necessary to create a plugin, managing your source code versions is indispensable. We also use GitHub project releases (in A.V.A.T.A.R format only) to display them in the A.V.A.T.A.R plugin library. </p> <p>So if you don't have a GitHub account, Create a GitHub account now. You can then use the GitHub Desktop application to manage your projects if you prefer to use a visual interface instead of the command line.</p> Note <p>If you're not a contributor, other users won't see your projects and won't be able to download them from the A.V.A.T.A.R plugin library. Your A.V.A.T.A.R GitHub projects will remain personal to you and will be displayed in your library only. </p> <p>Please note that to become a contributor for public use, you must submit a request. You will then be added as a contributor and users will be able to use your plugins.</p>"},{"location":"tutorial-prerequisites/#nodejs-and-npm","title":"nodejs and npm","text":"<p>Although the Electron framework integrates node.js in its executable, it is theoretically not necessary to install nodejs and npm, for A.V.A.T.A.R and to develop a plugin, this installation is mandatory.  </p> <p>This step is made during the installation of prerequisites the server and each client.  </p>"},{"location":"tutorial-prerequisites/#npm-packages","title":"npm packages","text":"<p>Developing a plugin means using npm packages in your application. Some of these packages are accessible by default in node.js, others from packages already installed in A.V.A.T.A.R, but you can also install specific packages to your plugin.</p> <ol> <li>First, check that the package is not a module included in node.js<ul> <li>If one exists, then you can import it into the script of the plugin: <pre><code>import * as path from 'node:path';\n</code></pre></li> </ul> </li> <li>Then open the file A.V.A.T.A.R/resources/app/package.json in a text editor<ul> <li>Search for the module you are interested in</li> <li>If one exists, you can import it into the script of the plugin:     <pre><code>import _ from 'underscore';\n</code></pre></li> <li>If it doesn't exist:<ul> <li>Open a terminal</li> <li>Move to the plugin folder     <pre><code>A.V.A.T.A.R (client or server)\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n            \u251c\u2500\u2500 core\n                \u251c\u2500\u2500 plugins\n                    \u251c\u2500\u2500 Your plugin\n</code></pre></li> <li>Install the package in the plugin folder     <pre><code>&gt; npm install package_name\n</code></pre></li> <li> <p>Check package installation     <pre><code>A.V.A.T.A.R\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n            \u251c\u2500\u2500 core\n                \u251c\u2500\u2500 plugins\n                    \u251c\u2500\u2500 Your plugin\n                        \u251c\u2500\u2500 node_modules\n                            \u251c\u2500\u2500 package_name\n                        \u251c\u2500\u2500 package.json\n</code></pre></p> <p>Note</p> <p>If you have created the plugin via Plugin Studio, a package.json file is automatically added to its folder. The package is added to it after the installation.</p> </li> </ul> </li> </ul> </li> </ol> <p>Danger</p> <p>Never install a new package in A.V.A.T.A.R client or server packages!</p>"},{"location":"tutorial-prerequisites/#development-terminal-and-debugging","title":"Development terminal and debugging","text":"<p>During development, we prefer to start/stop the server (or client) more quickly from a terminal. We also prefer to use console.log() to display useful information and error messages.</p> <ol> <li>Open a terminal</li> <li>Move to the application's app folder      <pre><code>A.V.A.T.A.R\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n</code></pre></li> <li> <p>Start the application with npm     <pre><code>&gt; npm start .\n</code></pre> </p> </li> <li> <p>You now have an npm console for starting/stopping and viewing messages</p> </li> </ol> <p> Create a plugin  </p>"},{"location":"tutorial-script/","title":"Le script","text":"<p>Ceci est la partie 7 du tutoriel</p> <p>Le fichier Script est le point d'entr\u00e9e pour d\u00e9velopper un plugin.</p>"},{"location":"tutorial-script/#les-methodes","title":"Les M\u00e9thodes","text":"<p>Ci-dessous les m\u00e9thodes de plugin appel\u00e9es automatiquement par A.V.A.T.A.R (par exemple, au d\u00e9marrage ou pendant l'ex\u00e9cution du script). Certaines de ces m\u00e9thodes sont cr\u00e9\u00e9es automatiquement si vous cr\u00e9ez le plugin par Plugin Studio</p>"},{"location":"tutorial-script/#actiondata-callback","title":"<code>action(data, callback)</code>","text":"<p>Cette m\u00e9thode obligatoire est le point d'entr\u00e9e du plugin. Elle est toujours appel\u00e9e apr\u00e8s le fichier action.&lt;plugin&gt;.js ou directement si le plugin n'a pas de r\u00e8gles vocales. Retourne obligatoirement la fonction <code>callback</code>.</p> <ul> <li><code>data</code> object - L'objet envoy\u00e9 depuis le fichier action.&lt;plugin&gt;.js<ul> <li><code>client</code> string - Le client A.V.A.T.A.R qui a envoy\u00e9 la phrase</li> <li><code>toClient</code> string - Le client (r\u00e9el ou virtuel) qui est dans la phrase</li> <li><code>rawSentence</code> string - La phrase non traduite</li> <li><code>sentence</code> string - La phrase traduite en Anglais </li> <li><code>language</code> string - Le code court du langage utilis\u00e9 sur le client pour <code>rawSentence</code></li> <li><code>tags</code> array - Les balises de la phrase traduite en anglais</li> <li><code>tokens</code> array - tokens de la phrase traduite en anglais</li> <li><code>relations</code> object - La relation trouv\u00e9e entre l'objet et l'action de la phrase traduite en anglais</li> <li><code>action</code> object - L'object d\u00e9fini dans le fichier action.&lt;plugin&gt;.js</li> </ul> </li> <li><code>callback</code> null ou fonction de callback si le plugin est appel\u00e9 par <code>Avatar.run()</code> ou <code>Avatar.call()</code> provenant d'un autre plugin avec une fonction de callback.</li> </ul> <p> Voir la section Traitement Naturel du Langage pour plus de d\u00e9tails sur les objets <code>tags</code>, <code>tokens</code> et <code>relations</code>.</p> <pre><code>export async function action(data, callback) {\n\n    // Table of actions\n    const tblActions = {\n        // test (see rules table in the property file)\n        doIt: () =&gt; doIt(data.client)                   \n    }\n\n    // Writes info console\n    info(\"test:\", data.action.command, L.get(\"plugin.from\"), data.client)\n\n    // Calls the function that should be run\n    tblActions[data.action.command]()\n\n    // Returns callback\n    callback()\n\n}\n</code></pre>"},{"location":"tutorial-script/#init","title":"<code>init()</code>","text":"<p>Cette m\u00e9thode optionnelle est ex\u00e9cut\u00e9e au chargement du plugin pendant l'initialiation d'A.V.A.T.A.R. Utile pour charger des informations n\u00e9cessaires au plugin, par exemple pour charger les fichiers <code>.pak</code> de langages:</p> <pre><code>export async function init() {\n    if (!await Avatar.lang.addPluginPak(\"myFirstPlugin\")) {\n        error('myFirstPlugin: unable to load language pak files')\n        return\n    }\n}\n</code></pre>"},{"location":"tutorial-script/#cron","title":"<code>cron()</code>","text":"<ul> <li><code>interval</code>: <code>2 heures</code> par d\u00e9faut \u00e0 la cr\u00e9ation du plugin par Plugin Studio.</li> </ul> <p>Cette m\u00e9thode optionnelle est appel\u00e9e \u00e0 interval r\u00e9gulier par l'application. L'interval est \u00e0 d\u00e9finir ensuite plus pr\u00e9cis\u00e9ment dans le fichier de propri\u00e9t\u00e9s myPlugin.prop.  </p> M\u00e9thodemyPlugin.prop <pre><code>export async function cron () {\n\n    // Says Hello every 2 hours\n    info ('hello from myPlugin !\")\n\n}\n</code></pre> <pre><code>{\n\"modules\": { \n    \"myPlugin\": {\n        \"version\": \"1.0\",\n        \"name\": \"My Plugin\",\n        \"rules\": {\n            \"test\": [\"test * (command|order)\"]\n        }\n    }\n},\n\"cron\": {\n    \"myPlugin\": { \n        \"name\": \"myPlugin\",\n        \"time\": \"0 * */2 * * *\"\n    }\n}\n</code></pre> <p>}</p>"},{"location":"tutorial-script/#syntaxe","title":"Syntaxe","text":"<pre><code>- `*` Asterisks: Any value\n- `1-3,5` Ranges: Ranges and individual values\n- `*/2` Steps: Every two units\n</code></pre> <p>Plages de valeurs prises en charge:</p> <pre><code>field          allowed values\n-----          --------------\nsecond         0-59\nminute         0-59\nhour           0-23\nday of month   1-31\nmonth          1-12 (or names, see below)\nday of week    0-7 (0 or 7 is Sunday, or use names)\n\n\nNames can also be used for the 'month' and 'day of week' fields.  \nUse the first three letters of the particular day or month (case does not matter).  \nRanges and lists of names are allowed.\nExamples: \"mon,wed,fri\", \"jan-mar\".\n</code></pre>"},{"location":"tutorial-script/#onclose","title":"<code>onClose()</code>","text":"<p>Cette m\u00e9thode optionnelle est appel\u00e9e juste avant qu'A.V.A.T.A.R soit ferm\u00e9 ou red\u00e9marr\u00e9. Utile pour sauvegarder des informations du plugin par exemple :</p> <pre><code>export async function onClose () {\n\n    return new Promise(resolve =&gt; {\n\n        let propertyFile = path.resolve(__dirname, 'credentials/' + Config.modules['myPlugin'].authorization.credentials)\n        fs.writeJsonSync(propertyFile, property)\n\n        resolve()\n    });\n\n}   \n</code></pre>"},{"location":"tutorial-script/#muteclientfrom-clientto","title":"<code>mute(clientFrom, clientTo)</code>","text":"<ul> <li><code>clientFrom</code>: string - Le client A.V.A.T.A.R qui a envoy\u00e9 la r\u00e8gle.</li> <li><code>clientTo</code>: string - le client A.V.A.T.A.R qui doit ex\u00e9cuter la r\u00e8gle, identique \u00e0 clientForm ou virtuel </li> </ul> <p>Cette m\u00e9thode optionnelle est appel\u00e9e si le client qui transmet la r\u00e8gle est en mode loop juste apr\u00e8s le mot-cl\u00e9 d\u00e9clencheur ou en mode question/r\u00e9ponse (askme). Permet d'effectuer une action telle que la mise en sourdine d'un appareil (TV ou autre) pendant le dialogue.</p> Exemple 1Exemple 2Exemple 3 <ul> <li>Conditions pr\u00e9alables : <ul> <li>La chambre \u00e0 coucher est un client virtuel de Salon.</li> <li>Le client Salon est en mode loop ou askme</li> </ul> </li> </ul> <pre><code>r\u00e8gle du client Salon: allume la lumi\u00e8re dans la chambre \u00e0 coucher \n* clientFrom: Salon \n* clientTo: Chambre \u00e0 coucher\n</code></pre> <ul> <li>Conditions pr\u00e9alables : <ul> <li>La chambre \u00e0 coucher n'est pas un client virtuel de Salon.</li> <li>Le client Salon est en mode loop ou askme</li> </ul> </li> </ul> <pre><code>r\u00e8gle du client Salon: allume la lumi\u00e8re dans la chambre \u00e0 coucher \n* clientFrom: Salon \n* clientTo: Salon\n</code></pre> <ul> <li>Conditions pr\u00e9alables : <ul> <li>La chambre \u00e0 coucher n'est pas un client virtuel de Salon.</li> <li>Le client Salon n'est pas en mode loop</li> <li>Le dialogue est pendant un askme</li> </ul> </li> </ul> <pre><code>r\u00e8gle du client Salon: allume la lumi\u00e8re dans la chambre \u00e0 coucher \n* clientFrom: Salon \n* clientTo: Salon\n</code></pre>"},{"location":"tutorial-script/#unmuteclientfrom-clientto","title":"<code>unmute(clientFrom, clientTo)</code>","text":"<ul> <li><code>clientFrom</code>: string - Le client A.V.A.T.A.R qui a envoy\u00e9 la r\u00e8gle.</li> <li><code>clientTo</code>: string - le client A.V.A.T.A.R qui doit ex\u00e9cuter la r\u00e8gle, identique \u00e0 clientForm ou virtuel </li> </ul> <p>Cette m\u00e9thode optionnelle est appel\u00e9e si le client qui transmet la r\u00e8gle est en mode loop juste apr\u00e8s la fin d'un dialogue ou en mode question/r\u00e9ponse. Permet d'effectuer une action, telle que remettre le son d'un appareil (TV ou autre) apr\u00e8s le dialogue.</p> <p> Remarque: Cette m\u00e9thode est g\u00e9n\u00e9ralement utilis\u00e9e en association avec la m\u00e9thode <code>mute</code></p> Exemple 1Exemple 2Exemple 3 <ul> <li>Conditions pr\u00e9alables : <ul> <li>La chambre \u00e0 coucher est un client virtuel de Salon.</li> <li>Le client Salon est en mode loop ou askme</li> </ul> </li> </ul> <pre><code>r\u00e8gle du client Salon: allume la lumi\u00e8re dans la chambre \u00e0 coucher \n* clientFrom: Salon \n* clientTo: Chambre \u00e0 coucher\n</code></pre> <ul> <li>Conditions pr\u00e9alables : <ul> <li>La chambre \u00e0 coucher n'est pas un client virtuel de Salon.</li> <li>Le client Salon est en mode loop ou askme</li> </ul> </li> </ul> <pre><code>r\u00e8gle du client Salon: allume la lumi\u00e8re dans la chambre \u00e0 coucher \n* clientFrom: Salon \n* clientTo: Salon\n</code></pre> <ul> <li>Conditions pr\u00e9alables : <ul> <li>La chambre \u00e0 coucher n'est pas un client virtuel de Salon.</li> <li>Le client Salon n'est pas en mode loop</li> <li>Le dialogue est pendant un askme</li> </ul> </li> </ul> <pre><code>r\u00e8gle du client Salon: allume la lumi\u00e8re dans la chambre \u00e0 coucher \n* clientFrom: Salon \n* clientTo: Salon\n</code></pre>"},{"location":"tutorial-script/#subclassspeak","title":"<code>subclassSpeak()</code>","text":"<p>Cette m\u00e9thode optionnelle est ex\u00e9cut\u00e9e au chargement du plugin pendant l'initialiation d'A.V.A.T.A.R. Permet de surclasser la m\u00e9thode <code>Avatar.speak()</code> pour utiliser un syst\u00e8me de son autre que celui du PC client pour les dialogues</p> <p> Remarque: Cette m\u00e9thode est appel\u00e9e automatiquement et uniquement si le param\u00e8tre de redirection des dialogues est activ\u00e9 sur le client (voir Client --&gt; param\u00e8tres --&gt; Dialogue). Un client peut donc rediriger ses dialogues sur une autre enceinte alors qu'un autre o\u00f9 ce param\u00e8tre n'est pas activ\u00e9, utilisera l'enceinte de son PC.</p> <pre><code>export async function subclassSpeak() {\n\n    // If you wish, you can save the default Avatar.speak function for your own use.  \n    let defaultSpeak = Avatar.speak;\n\n    Avatar.speak = () =&gt; {\n\n        // Do stuff\n\n    }\n}\n</code></pre>"},{"location":"tutorial-script/#subclassplay","title":"<code>subclassPlay()</code>","text":"<p>Cette m\u00e9thode optionnelle est ex\u00e9cut\u00e9e au chargement du plugin pendant l'initialiation d'A.V.A.T.A.R. Permet de surclasser la m\u00e9thode <code>Avatar.play()</code> pour utiliser un syst\u00e8me de son autre que celui du PC client pour les fichiers de musiques et sons.</p> <p> Remarque: Cette m\u00e9thode est appel\u00e9e automatiquement et uniquement si le param\u00e8tre de redirection des dialogues est activ\u00e9 sur le client (voir Client --&gt; param\u00e8tres --&gt; Dialogue). Un client peut donc rediriger ses dialogues sur une autre enceinte alors qu'un autre o\u00f9 ce param\u00e8tre n'est pas activ\u00e9, utilisera l'enceinte de son PC.</p> <pre><code>export async function subclassPlay() {\n\n    // If you wish, you can save the default Avatar.play function for your own use.  \n    let defaultPlay = Avatar.play;\n\n    Avatar.play = () =&gt; {\n\n        // Do stuff\n\n    }\n}\n</code></pre> <p>  L'action </p>"},{"location":"virtual-client/","title":"Virtual client","text":"<p>A virtual client is a client that doesn't exist but which can be interpreted in a rule as a real client. If a voice rule contains a virtual client, it will be automatically returned to the plugins by the data.toClient variable.</p> <p>Take the following rule passed from the <code>Living room</code> client, where <code>Kitchen</code> is a virtual client:</p> <pre><code>turns on the light in the kitchen\n</code></pre> <p>The plugin's action function will have the following values in its <code>data</code> object:</p> <pre><code>{\n  client: 'Living room',\n  toClient: 'Kitchen',\n  ... // Other parameters\n}\n</code></pre> <p>data.toClient can then be used directly in an action:</p> <pre><code>turn on the light in ${data.toClient}\n</code></pre>"},{"location":"virtual-client/#create-a-virtual-client","title":"Create a virtual client","text":"<p>A virtual client must be created from a real customer. To create a virtual customer:</p> <ol> <li>Left-click on a client in the server interface </li> <li>Select the Settings menu </li> <li> <p>Enter a virtual client name</p> <p></p> </li> <li> <p>Click on Save</p> </li> <li>Restart A.V.A.T.A.R</li> <li>Place the virtual client node in the interface</li> </ol> <p>Note</p> <p>The node position is automatically saved when you exit A.V.A.T.A.R.</p> <p>The virtual client has a default image. To select another image:</p> <ol> <li>Left-click on the virtual client</li> <li> <p>Click on Settings</p> <p></p> </li> <li> <p>Choose an image in <code>.png</code> format</p> </li> <li> <p>Test in the interface and/or click on Save</p> <p></p> </li> </ol> <p>Note</p> <p>You can choose an image in <code>.png</code> format from any folder. When saved, it will be copied to the app/assets/images/rooms folder.</p> <p>  Getting started </p>"},{"location":"voice-rules/","title":"Voice rules","text":""},{"location":"voice-rules/#trigger-listening","title":"Trigger listening","text":"<p>Listening is triggered by configurable keywords in the Dialog tab of each client's properties.</p> <p>There are 3 ways to say a rule:</p> keyword and ruleKeywordLoop mode <p>The rule is said in the same sentence as the trigger keyword.  </p> <pre><code>graph LR\nA[keyword and rule]\nA --&gt; B[execution of the action];</code></pre> <p>You: Jarvis, what time is it? Client: The time is 10 a.m.</p> <p>Listening is activated by the trigger keyword, the client responds, then you say the rule.  </p> <pre><code>graph LR\nA[keyword]\nA --&gt; B[listening message];\nB --&gt; C[rule];\nC --&gt; D[execution of the action];</code></pre> <p>You: Jarvis Client: I'm listening Vous: What time is it? Client: The time is 10 a.m.</p> <p>Listening is activated by the trigger keyword, the customer responds, you pass a rule, another... then you end the dialog.</p> <pre><code>graph LR\nA[keyword]\nA --&gt; B[listening message];\nB --&gt; C[rule];\nC --&gt; D[execution of the action];\nD--&gt; E{shall we&lt;br&gt;continue?};\nE --&gt; F{rule?}; \nF --&gt; |Yes| D; \nF --&gt; |No| G[Exit]; </code></pre> <p>You: Jarvis Client: I'm listening Vous: quelle heure est-il ? Client: What time is it? Client: Would you like anything else? Vous: turn on the TV    Client: It's done Client: anything else? etc... etc... Client: anything else?  Vous: it's fine thanks   Client: At your service   </p> <p>Note</p> <p>Loop mode must be enabled in the Dialog tab of each client's properties.</p> <p>All sentences are defined in the Rules tab of each client's properties.</p>"},{"location":"voice-rules/#listening-mode","title":"Listening mode","text":"<p>To use A.V.A.T.A.R properly, you need to understand how a dialog is executed. The diagram below shows the various steps in the execution of a rule.</p> <pre><code>graph LR\nA[listening];\nA --&gt; B{activation?};\nB --&gt; |Yes| C[stop listening]; \nB --&gt; |No| A; \nC --&gt; D[dialogue and action];\nD --&gt; E[end];\nE --&gt; F[Restitution of&lt;br&gt;the listening];\nF --&gt; A</code></pre> <p>As can be seen in the diagram, the listening of the client is stopped at the beginning and restored at the end, so as not to pick up sentences, noises or say another rule at the same time that could interfere with the dialogue and actions in progress.</p> <p>In the client console, you can see the various related messages:</p> <p></p> <ul> <li><code>Stop listening...</code>: Listening is stopped, you can no longer say a rule</li> <li><code>Ready to listen!</code> : The client is in listening mode, you can say a rule</li> </ul> <p>Important</p> <p>After a dialog and/or an action, if you don't see the <code>Ready to listen!</code> in the console and listening is not reactivated, this is usually due to a development error in the plugin linked to the rule that doesn't send the end-of-action request to the client. </p> <p>In this case, you'll need to reactivate the listening function manually (see below), and don't forget to correct the plugin error!</p>"},{"location":"voice-rules/#listening-actions-in-the-contextual-menu","title":"Listening actions in the contextual menu","text":"<p>You can use contextual menu actions to manage listening:</p> <p></p> <p>These actions are available:</p> <ul> <li>On each client node context menu in the server interface </li> <li>In the contextual menu accessible by left-clicking on its name in each client's interface.</li> </ul>"},{"location":"voice-rules/#activate-listening","title":"<code>Activate listening</code>","text":"<p>Enables listening on the client. This action resets the listening function if it has been deactivated.</p>"},{"location":"voice-rules/#disable-listening","title":"<code>Disable listening</code>","text":"<p>Disables listening on the client.</p>"},{"location":"voice-rules/#start-listening","title":"<code>Start listening</code>","text":"<p>Activates listening on the client. This action is identical to the trigger keyword.</p>"},{"location":"voice-rules/#stop-listening","title":"<code>Stop listening</code>","text":"<p>Stop listening on the customer if this has been triggered.</p> <p>  Getting started </p>"}]}